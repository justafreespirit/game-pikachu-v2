{"version":3,"sources":["routes/CONSTANTS.ts","types/game.ts","recoil/atoms/gameSoundState.ts","hooks/useLocalStorage.ts","services/i18n.ts","hooks/useAsync.ts","components/SwitchLanguage.tsx","recoil/atoms/playerState.ts","pages/MainPage.tsx","api/CONSTANTS.ts","api/ranking.ts","utils/time.ts","components/Rank/TopList.tsx","components/RankBoard.tsx","recoil/atoms/gameState.ts","utils/game.ts","recoil/atoms/gameOverlayState.ts","recoil/atoms/selectedPokemonsState.ts","recoil/atoms/suggestTimingState.ts","recoil/selectors/selectedPokemonsSelector.ts","recoil/atoms/gameTimingState.ts","hooks/useGameActions.ts","pages/SinglePlayerPage.tsx","types/chat.ts","recoil/atoms/messagesState.ts","components/Chat/ChatBox.tsx","components/Chat/Message.tsx","components/Chat/MessagesBox.tsx","components/ChatRoom.tsx","pages/MultiPlayerPage.tsx","components/Game/PokemonCard.tsx","components/Game/PokemonRow.tsx","hooks/useGameEngine.ts","components/GameBoard.tsx","components/Game/LineCard.tsx","components/Game/LineRow.tsx","components/GameOverlay.tsx","hooks/useGameOverlayEngine.ts","components/Game/GameSpeedInfo.tsx","pages/SpeedModePage.tsx","components/Game/GameSurvivalInfo.tsx","pages/SurvivalModePage.tsx","pages/PlayerPage.tsx","recoil/atoms/toggleSoundState.ts","components/ToggleSound.tsx","components/ToggleMusic.tsx","App.tsx","hooks/usePlaySound.ts","reportWebVitals.ts","assets/sound/menu-open.mp3","assets/sound/disable-sound.mp3","assets/sound/enable-sound.mp3","assets/sound/switch-on.mp3","assets/sound/switch-off.mp3","assets/sound/bite.mp3","assets/sound/fanfare.mp3","assets/sound/glug-a.mp3","assets/sound/rising-pops.mp3","assets/sound/game-completion.wav","assets/sound/gamers-fail-game.mp3","assets/sound/time-limited.wav","assets/sound/levelup.mp3","assets/sound/pop-down.mp3","assets/sound/pop-up-on.mp3","assets/sound/pop-up-off.mp3","assets/sound/you-win.mp3","assets/sound/game-song.mp3","components/Sound/BiteSound.tsx","components/Sound/CompletedGameSound.tsx","components/Sound/OpenMenuSound.tsx","components/Sound/DisableSound.tsx","components/Sound/EnableSound.tsx","components/Sound/FanfareSound.tsx","components/Sound/FailedGameSound.tsx","components/Sound/GameSongSound.tsx","components/Sound/LevelUpSound.tsx","components/Sound/NearlyEndTimeSound.tsx","components/Sound/OffSound.tsx","components/Sound/OnSound.tsx","components/Sound/PopDownSound.tsx","components/Sound/PopUpOffSound.tsx","components/Sound/PopUpOnSound.tsx","components/Sound/YouWinSound.tsx","components/Sound/RisingPopSound.tsx","components/Sound/YoutubeThemeSong.tsx","components/SoundProvider.tsx","index.tsx"],"names":["Routes","GameSelector","GameMode","GameTypeState","GameStatus","Direction","PointType","GameLevel","gameOptions","LEVEL_1","row","col","LEVEL_2","LEVEL_3","LEVEL_4","LEVEL_5","LEVEL_6","LEVEL_7","LEVEL_8","LEVEL_9","LEVEL_10","LEVEL_11","LEVEL_12","LEVEL_13","LEVEL_14","nextLevel","gameSoundState","atom","key","GAME_SOUND_STATE","default","soundReady","gameSongDuration","playOpenMenuSound","undefined","playEnableSound","playDisableSound","playCompletedGameSound","playFailedGameSound","playBiteSound","playRisingPopSound","playFanfareSound","playGlugSound","playNearlyEndTimeSound","playOffSound","playOnSound","playLevelUpSound","playPopDownSound","playPopUpOnSound","playPopUpOffSound","playYouWinSound","playGameSong","useLocalStorage","initialValue","useState","item","window","localStorage","getItem","JSON","parse","error","console","log","storedValue","setStoredValue","value","valueToStore","Function","setItem","stringify","i18n","use","initReactI18next","init","resources","en","translation","English","Vietnamese","Back","Replay","Language","Level","Welcome","Congratulations","Submit","vi","lng","fallbackLng","interpolation","escapeValue","ResponseStatus","SwitchLanguage","t","useTranslation","useRecoilValue","setStorageValue","changeLanguage","className","onClick","playerState","PLAYER_STATE","rankingId","playerName","playerTiming","MainPage","Helmet","charSet","to","SINGLE_PLAYER_PAGE","MULTI_PLAYER_PAGE","BASE_API","defaultFetchOptions","method","mode","cache","credentials","headers","redirect","referrerPolicy","getTopRanking","fetch","then","res","json","response","useAsync","asyncFunction","immediate","IDLE","status","setStatus","setValue","setError","execute","useCallback","PENDING","SUCCESS","catch","ERROR","useEffect","timeConvert","num","minutes","Math","floor","toString","padStart","dateTimeFromTimestamp","timestamp","Date","toLocaleString","TopList","topPlayersResponse","data","SPEED_MODE","SPEED_MODE_PAGE","style","width","margin","SURVIVAL_MODE_PAGE","map","player","index","timing","RankBoard","SURVIVAL_MODE","memo","gameState","GAME_STATE","pokemons","matrix","level","BASE_URL","pokemonList","id","matched","image","shufflePokemonList","nonShuffleList","shuffledPokemonList","sort","random","shuffledlistPokemon","pokemon","nid","nanoid","reShufflePokemonList","arrayPokemons","objectList","arrayList","Object","keys","push","convertObjectToArrayList","generatePokemonMatrix","rowSetting","colSetting","newPokemons","totalCol","totalRow","pokemonKeys","pokemonMatrix","borderPoint","pokemonKey","pop","rowIndex","colIndex","hasConnectLine","point1","point2","pathPoints","fromPoint","toPoint","matrixTotalRow","matrixTotalCol","tempMatrix","newMatrix","length","i","slice","cloneMatrix","matrixPoints","matrixTrackingPoints","dRow","dCol","queue","currentPoint","shift","trackedPoints","trackPoint","findPath","connected","checkPointInLine","connectingLinePoints","currentPosition","find","matchingLinePoint","checkConnectionSelectedPokemons","selectedPokemons","newSelectedPokemons","selectedPokemon1","selectedPokemon2","limitRow","limitCol","reduce","newPathPoints","arrayPoints","type","LINE","direction","prevIndex","END","prevPoint","TOP","BOTTOM","LEFT","RIGHT","extraPoint","START","newCurrentPoint","drawPath","gameOverlayState","GAME_OVERLAY_STATE","selectedPokemonsState","SELECTED_POKEMONS","suggestTimingState","GAME_SUGGEST_TIMING_STATE","selectedPokemonsSelector","selector","SELECTED_POKEMONS_SELECTOR","get","set","newValue","cloneSelectedPokemons","gameTimingState","GAME_TIMING_STATE","yourTiming","useGameActions","setGame","useSetRecoilState","setPlayer","setGameTiming","setSelectedPokemons","resetGameState","useResetRecoilState","resetGameOverlayState","resetSelectedPokemonsState","initGame","total","slicePokemonList","nonShufflePokemonList","makeListPokemons","RUNNING","currentPlayer","addNewRankingScore","fetchOptions","body","addNewRanking","now","prevPlayer","replayGame","endGame","prevGame","COMPLETED","selectPokemon","pokemonId","resetGame","updateNewRankingScore","updateNewRanking","ChatTypeState","SinglePlayerPage","MAIN_PAGE","messagesState","MESSAGES_STATE","messages","ChatBox","handleSubmit","throttle","setThrottle","onSubmit","event","setTimeout","alert","name","placeholder","autoFocus","autoComplete","Message","message","content","selfClass","isOldMessage","prevProps","nextProps","MessagesBox","messagesBox","document","getElementById","scrollTo","behavior","top","scrollHeight","ChatRoom","room","setMessagesState","socketUrl","useWebSocket","reconnectAttempts","reconnectInterval","retryOnError","shouldReconnect","queryParams","username","onMessage","sendJsonMessage","readyState","lastJsonMessage","lastMessage","handleClickSendMessage","messageJson","command","channel","ReadyState","OPEN","preventDefault","inputMessage","currentTarget","setAttribute","replace","trim","removeAttribute","focus","CLOSED","location","reload","MultiPlayerPage","showInDevelopment","PokemonCard","isSelected","selected","hidden","backgroundImage","propsAreEquals","PokemonRow","findIndex","useGameEngine","useLocation","entries","checkCompletedLevel","levelUp","foundConnectLine","entriesPokemons","entryPokemon","currentPokemon","some","hasAnyConnectLine","newShufflePokemons","shuffleMatrix","GameBoard","LineCard","point","pointClass","lineRef","useRef","current","classList","remove","ref","LineRow","cards","_","GameOverlay","gameTiming","useGameOverlayEngine","columnCards","Array","fill","GameSpeedInfo","useRecoilState","suggestTiming","setSuggestTiming","timeoutId","clearTimeout","SpeedModePage","GameSurvivalInfo","SurvivalModePage","PlayerPage","history","useHistory","setPlayerName","match","maxLength","toggleSoundState","music","effect","ToggleSound","sound","toggleSound","classSound","prevValue","ToggleMusic","App","Sound","language","prevPlayerName","PLAYER_PAGE","path","exact","reportWebVitals","onPerfEntry","getCLS","getFID","getFCP","getLCP","getTTFB","usePlaySound","defaultConfigSound","interrupt","volume","soundPath","menuOpenSound","BITE","biteSound","COMPLETE_GAME","completeGameSound","DISABLE","disableSound","ENABLE","enableSound","ON","onSound","OFF","offSound","FAIL_GAME","failedGameSound","GLUG","glugSound","FANFARE","fanfareSound","RISING_POP","risingPopSound","NEARLY_END_TIME","nearlyEndTimeSound","LEVEL_UP","levelUpSound","POP_DOWN","popDownSound","POP_UP_ON","popUpOnSound","POP_UP_OFF","popUpOffSound","YOU_WIN","youWinSound","GAME_SONG","gameSongSound","useSound","play","playSound","loadedSound","stopSound","stop","pauseSound","pause","duration","BiteSound","setSounds","sounds","areLoaded","CompletedGameSound","OpenMenuSound","MENU_OPEN","DisableSound","EnableSound","FanfareSound","FailedGameSound","GameSongSound","LevelUpSound","NearlyEndTimeSound","OffSound","OnSound","PopDownSound","PopUpOffSound","PopUpOnSound","YouWinSound","RisingPopSound","YoutubeThemeSong","url","playing","loop","SoundProvider","children","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.451f4ae4.chunk.js","sourcesContent":["export enum Routes {\n  MAIN_PAGE = \"/\",\n  PLAYER_PAGE = \"/player\",\n  SINGLE_PLAYER_PAGE = \"/single-player\",\n  MULTI_PLAYER_PAGE = \"/multi-player\",\n  SURVIVAL_MODE_PAGE = \"/survival-mode\",\n  SPEED_MODE_PAGE = \"/speed-mode\",\n}\n","import { PlayFunction } from \"use-sound/dist/types\";\n\nexport enum GameSelector {\n  SELECTED_POKEMONS_SELECTOR = \"SELECTED_POKEMONS_SELECTOR\",\n}\n\nexport interface PlayerState {\n  rankingId?: string;\n  playerName: string;\n  playerTiming: number;\n}\n\nexport interface Pokemon {\n  id: string;\n  matched: boolean;\n  nid?: string;\n  image?: string;\n  rowIndex?: number;\n  colIndex?: number;\n}\n\nexport enum GameMode {\n  SURVIVAL_MODE = \"survival\",\n  SPEED_MODE = \"speed\",\n}\n\nexport interface GameSound {\n  soundReady: boolean;\n  gameSongDuration: number;\n  playOpenMenuSound?: PlayFunction;\n  playDisableSound?: PlayFunction;\n  playEnableSound?: PlayFunction;\n  playCompletedGameSound?: PlayFunction;\n  playFailedGameSound?: PlayFunction;\n  playBiteSound?: PlayFunction;\n  playOnSound?: PlayFunction;\n  playOffSound?: PlayFunction;\n  playGlugSound?: PlayFunction;\n  playFanfareSound?: PlayFunction;\n  playRisingPopSound?: PlayFunction;\n  playNearlyEndTimeSound?: PlayFunction;\n  playLevelUpSound?: PlayFunction;\n  playPopUpOnSound?: PlayFunction;\n  playPopUpOffSound?: PlayFunction;\n  playPopDownSound?: PlayFunction;\n  playYouWinSound?: PlayFunction;\n  playGameSong?: PlayFunction;\n}\n\nexport enum GameTypeState {\n  PLAYER_STATE = \"PLAYER_STATE\",\n  GAME_STATE = \"GAME_STATE\",\n  GAME_SOUND_STATE = \"GAME_SOUND_STATE\",\n  GAME_TIMING_STATE = \"GAME_TIMING_STATE\",\n  GAME_OVERLAY_STATE = \"GAME_OVERLAY_STATE\",\n  GAME_SUGGEST_TIMING_STATE = \"GAME_SUGGEST_TIMING_STATE\",\n  SELECTED_POKEMONS = \"SELECTED_POKEMONS\",\n}\n\nexport enum GameStatus {\n  RUNNING = \"running\",\n  PENDING = \"pending\",\n  COMPLETED = \"completed\",\n  FAILED = \"failed\",\n}\n\nexport interface GameState {\n  status: GameStatus;\n  row: number;\n  col: number;\n  pokemons: Record<string, Pokemon>;\n  matrix: Pokemon[][];\n  level: GameLevel;\n}\n\nexport interface GameOverlayState {\n  connectingLinePoints: PointCoords[];\n}\n\nexport enum Direction {\n  LEFT = \"left\",\n  RIGHT = \"right\",\n  TOP = \"top\",\n  BOTTOM = \"bottom\",\n}\n\nexport enum PointType {\n  START = \"start\",\n  END = \"end\",\n  LINE = \"line\",\n}\n\nexport interface PointCoords {\n  rowIndex: number;\n  colIndex: number;\n  direction?: Direction;\n  type?: PointType;\n}\n\nexport interface PokemonCoords extends PointCoords {\n  nid?: string;\n}\n\nexport enum GameLevel {\n  LEVEL_1 = \"1\",\n  LEVEL_2 = \"2\",\n  LEVEL_3 = \"3\",\n  LEVEL_4 = \"4\",\n  LEVEL_5 = \"5\",\n  LEVEL_6 = \"6\",\n  LEVEL_7 = \"7\",\n  LEVEL_8 = \"8\",\n  LEVEL_9 = \"9\",\n  LEVEL_10 = \"10\",\n  LEVEL_11 = \"11\",\n  LEVEL_12 = \"12\",\n  LEVEL_13 = \"13\",\n  LEVEL_14 = \"MAX\",\n}\n\nexport type GameOptions = {\n  [key in GameLevel]: {\n    row: number;\n    col: number;\n  };\n};\n\nexport const gameOptions: GameOptions = {\n  [GameLevel.LEVEL_1]: {\n    row: 3,\n    col: 4,\n  },\n  [GameLevel.LEVEL_2]: {\n    row: 4,\n    col: 4,\n  },\n  [GameLevel.LEVEL_3]: {\n    row: 4,\n    col: 5,\n  },\n  [GameLevel.LEVEL_4]: {\n    row: 4,\n    col: 6,\n  },\n  [GameLevel.LEVEL_5]: {\n    row: 4,\n    col: 7,\n  },\n  [GameLevel.LEVEL_6]: {\n    row: 6,\n    col: 8,\n  },\n  [GameLevel.LEVEL_7]: {\n    row: 7,\n    col: 8,\n  },\n  [GameLevel.LEVEL_8]: {\n    row: 8,\n    col: 8,\n  },\n  [GameLevel.LEVEL_9]: {\n    row: 8,\n    col: 9,\n  },\n  [GameLevel.LEVEL_10]: {\n    row: 8,\n    col: 10,\n  },\n  [GameLevel.LEVEL_11]: {\n    row: 8,\n    col: 11,\n  },\n  [GameLevel.LEVEL_12]: {\n    row: 8,\n    col: 12,\n  },\n  [GameLevel.LEVEL_13]: {\n    row: 9,\n    col: 12,\n  },\n  [GameLevel.LEVEL_14]: {\n    row: 10,\n    col: 12,\n  },\n};\n\nexport const nextLevel = {\n  [GameLevel.LEVEL_1]: GameLevel.LEVEL_2,\n  [GameLevel.LEVEL_2]: GameLevel.LEVEL_3,\n  [GameLevel.LEVEL_3]: GameLevel.LEVEL_4,\n  [GameLevel.LEVEL_4]: GameLevel.LEVEL_5,\n  [GameLevel.LEVEL_5]: GameLevel.LEVEL_6,\n  [GameLevel.LEVEL_6]: GameLevel.LEVEL_7,\n  [GameLevel.LEVEL_7]: GameLevel.LEVEL_8,\n  [GameLevel.LEVEL_8]: GameLevel.LEVEL_9,\n  [GameLevel.LEVEL_9]: GameLevel.LEVEL_10,\n  [GameLevel.LEVEL_10]: GameLevel.LEVEL_11,\n  [GameLevel.LEVEL_11]: GameLevel.LEVEL_12,\n  [GameLevel.LEVEL_12]: GameLevel.LEVEL_13,\n  [GameLevel.LEVEL_13]: GameLevel.LEVEL_14,\n  [GameLevel.LEVEL_14]: GameLevel.LEVEL_9,\n};\n\nexport const BASE_START_TIME = 300;\nexport const BONUS_TIME = 2;\nexport const PENALTY_TIME = 5;\n","import { atom } from \"recoil\";\nimport { GameSound, GameTypeState } from \"../../types/game\";\n\nconst gameSoundState = atom<GameSound>({\n  key: GameTypeState.GAME_SOUND_STATE,\n  default: {\n    soundReady: false,\n    gameSongDuration: 0,\n    playOpenMenuSound: undefined,\n    playEnableSound: undefined,\n    playDisableSound: undefined,\n    playCompletedGameSound: undefined,\n    playFailedGameSound: undefined,\n    playBiteSound: undefined,\n    playRisingPopSound: undefined,\n    playFanfareSound: undefined,\n    playGlugSound: undefined,\n    playNearlyEndTimeSound: undefined,\n    playOffSound: undefined,\n    playOnSound: undefined,\n    playLevelUpSound: undefined,\n    playPopDownSound: undefined,\n    playPopUpOnSound: undefined,\n    playPopUpOffSound: undefined,\n    playYouWinSound: undefined,\n    playGameSong: undefined,\n  },\n});\n\nexport default gameSoundState;\n","import { useState } from \"react\";\n\n// Hook\nexport default function useLocalStorage(key: string, initialValue: string) {\n  // State to store our value\n  // Pass initial state function to useState so logic is only executed once\n  const [storedValue, setStoredValue] = useState(() => {\n    try {\n      // Get from local storage by key\n      const item = window.localStorage.getItem(key);\n      // Parse stored json or if none return initialValue\n      return item ? JSON.parse(item) : initialValue;\n    } catch (error) {\n      // If error also return initialValue\n      console.log(error);\n      return initialValue;\n    }\n  });\n  // Return a wrapped version of useState's setter function that ...\n  // ... persists the new value to localStorage.\n  const setValue = (value: any) => {\n    try {\n      // Allow value to be a function so we have same API as useState\n      const valueToStore =\n        value instanceof Function ? value(storedValue) : value;\n      // Save state\n      setStoredValue(valueToStore);\n      // Save to local storage\n      window.localStorage.setItem(key, JSON.stringify(valueToStore));\n    } catch (error) {\n      // A more advanced implementation would handle the error case\n      console.log(error);\n    }\n  };\n  return [storedValue, setValue];\n}\n","import i18n from \"i18next\";\nimport { initReactI18next } from \"react-i18next\";\n\ni18n\n  .use(initReactI18next) // passes i18n down to react-i18next\n  .init({\n    // the translations\n    // (tip move them in a JSON file and import them,\n    // or even better, manage them via a UI: https://react.i18next.com/guides/multiple-translation-files#manage-your-translations-with-a-management-gui)\n    resources: {\n      en: {\n        translation: {\n          English: \"English\",\n          Vietnamese: \"Vietnamese\",\n          Back: \"Back\",\n          Replay: \"Replay\",\n          Language: \"Language\",\n          Level: \"Level\",\n          Welcome: \"Welcome\",\n          Congratulations: \"Congratulations\",\n          Submit: \"Submit\",\n          \"The fastest is best\": \"The fastest is best\",\n          \"The longest is best\": \"The longest is best\",\n          \"Your score\": \"Your score\",\n          \"Your time\": \"Your time\",\n          \"Remaining time\": \"Remaining time\",\n          \"Top players\": \"Top players\",\n          \"Single player\": \"Single player\",\n          \"Multi player\": \"Multi player\",\n          \"Main menu\": \"Main menu\",\n          \"Speed mode\": \"Speed mode\",\n          \"Survival mode\": \"Survival mode\",\n          \"Coming soon...\": \"Coming soon...\",\n          \"Scroll down to play\": \"Scroll down to play\",\n          \"Scroll down to chat\": \"Scroll down to chat\",\n          \"Preparing resource...\": \"Preparing resource...\",\n          \"Please complete all levels as fast as you can\":\n            \"Please complete all levels as fast as you can\",\n          \"Try your best not to run out of time as long as possible.\":\n            \"Try your best not to run out of time as long as possible\",\n          \"Your time will increase when you match a pair of pokemon\":\n            \"Your time will increase when you match a pair of pokemon\",\n          \"Choosing the wrong pair will increase the time\":\n            \"Choosing the wrong pair will increase the time\",\n          \"Choosing the wrong pair will decrease the time\":\n            \"Choosing the wrong pair will decrease the time\",\n          \"Accept alphabet and digit only.\":\n            \"Accept alphabet, digits and space only.\",\n          \"Please enter your name\": \"Please enter your name\",\n          \"Enter your name here\": \"Enter your name here\",\n          \"Make your own ranking\": \"Make your own ranking\",\n          \"Make match\": \"Make match\",\n          \"Find random match\": \"Find random match\",\n          \"Enter your message here...\": \"Enter your message here...\",\n          \"Service is not available now.\": \"Service is not available now.\",\n          \"Please try again\": \"Please try again\",\n          \"Chat slowly please\": \"Chat slowly please\",\n        },\n      },\n      vi: {\n        translation: {\n          English: \"Tiếng Anh\",\n          Vietnamese: \"Tiếng Việt\",\n          Back: \"Quay về\",\n          Replay: \"Chơi lại\",\n          Language: \"Ngôn ngữ\",\n          Level: \"Cấp độ\",\n          Welcome: \"Chào bạn\",\n          Congratulations: \"Xin chúc mừng\",\n          Submit: \"Nhập\",\n          \"The fastest is best\": \"Hoàn thành càng sớm, thứ hạng càng cao\",\n          \"The longest is best\":\n            \"Kéo dài thời gian càng lâu, thứ hạng càng cao\",\n          \"Your score\": \"Điểm số của bạn\",\n          \"Your time\": \"Thời gian của bạn\",\n          \"Remaining time\": \"Thời gian còn lại\",\n          \"Top players\": \"Danh sách người chơi hàng đầu\",\n          \"Single player\": \"Cá nhân\",\n          \"Multi player\": \"Đối kháng\",\n          \"Main menu\": \"Màn hình chính\",\n          \"Speed mode\": \"Tốc độ\",\n          \"Survival mode\": \"Sinh tồn\",\n          \"Coming soon...\": \"Đang phát triển...\",\n          \"Preparing resource...\": \"Đang chuẩn bị...\",\n          \"Scroll down to play\": \"Lăn chuột xuống để chơi\",\n          \"Scroll down to chat\": \"Lăn chuột xuống để nhắn tin\",\n          \"Please complete all levels as fast as you can\":\n            \"Hãy hoàn thành tất cả cấp độ nhanh nhất có thể \",\n          \"Try your best not to run out of time as long as possible\":\n            \"Cố gắng hết sức để không hết thời gian lâu nhất có thể\",\n          \"Your time will increase when you match a pair of pokemon\":\n            \"Thời gian của bạn sẽ tăng thêm khi chọn khớp một cặp pokemon\",\n          \"Choosing the wrong pair will increase the time\":\n            \"Chọn sai cặp sẽ bị tăng thêm thời gian\",\n          \"Choosing the wrong pair will decrease the time\":\n            \"Chọn sai cặp sẽ bị giảm thời gian\",\n          \"Accept alphabet and digit only.\":\n            \"Chỉ chấp nhận chữ cái, chữ số và kí tự trắng.\",\n          \"Please enter your name\": \"Hãy nhập tên của bạn\",\n          \"Enter your name here\": \"Nhập tên bạn tại đây\",\n          \"Make your own ranking\": \"Tạo xếp hạng của bạn\",\n          \"Make match\": \"Tạo trận đấu\",\n          \"Find random match\": \"Tìm trận ngẫu nhiên\",\n          \"Enter your message here...\": \"Nhập tin nhắn tại đây...\",\n          \"Service is not available now.\": \"Dịch vụ hiện tại không khả dụng.\",\n          \"Please try again\": \"Thử lại\",\n          \"Chat slowly please\": \"Chat chậm lại bạn nhé\",\n        },\n      },\n    },\n    lng: \"en\", // if you're using a language detector, do not define the lng option\n    fallbackLng: \"en\",\n\n    interpolation: {\n      escapeValue: false,\n    },\n  });\n\nexport default i18n;\n","import { useState, useEffect, useCallback } from \"react\";\n\nexport type ResponseData = Record<string, any> | null;\n\nexport interface Response {\n  success: boolean;\n  message: string;\n  data?: ResponseData;\n  error?: string;\n}\n\nexport interface ResponseError extends Response {\n  error?: string;\n}\n\nexport enum ResponseStatus {\n  SUCCESS = \"success\",\n  ERROR = \"error\",\n  IDLE = \"idle\",\n  PENDING = \"pending\",\n}\n\n// Hook\nconst useAsync = <T extends Response, E = string>(\n  asyncFunction: () => Promise<T>,\n  immediate = true\n) => {\n  const [status, setStatus] = useState<ResponseStatus>(ResponseStatus.IDLE);\n  const [value, setValue] = useState<T | ResponseData>(null);\n  const [error, setError] = useState<E | ResponseError | null>(null);\n  // The execute function wraps asyncFunction and\n  // handles setting state for pending, value, and error.\n  // useCallback ensures the below useEffect is not called\n  // on every render, but only if asyncFunction changes.\n  const execute = useCallback(() => {\n    setStatus(ResponseStatus.PENDING);\n    setValue(null);\n    setError(null);\n    return asyncFunction()\n      .then((response: T) => {\n        if (response) {\n          setValue(response);\n        }\n        setStatus(ResponseStatus.SUCCESS);\n      })\n      .catch((error: ResponseError) => {\n        if (error) {\n          setError(error);\n        }\n        setStatus(ResponseStatus.ERROR);\n      });\n  }, [asyncFunction]);\n  // Call execute if we want to fire it right away.\n  // Otherwise execute can be called later, such as\n  // in an onClick handler.\n  useEffect(() => {\n    if (immediate) {\n      execute();\n    }\n  }, [execute, immediate]);\n  return { execute, status, value, error };\n};\n\nexport default useAsync;\n","import { useTranslation } from \"react-i18next\";\nimport { useRecoilValue } from \"recoil\";\nimport useLocalStorage from \"../hooks/useLocalStorage\";\nimport gameSoundState from \"../recoil/atoms/gameSoundState\";\nimport i18n from \"../services/i18n\";\n\nconst SwitchLanguage = () => {\n  const { t } = useTranslation();\n  const { playOffSound } = useRecoilValue(gameSoundState);\n  const [_, setStorageValue] = useLocalStorage(\"language\", \"vi\");\n  const changeLanguage = (lng: \"en\" | \"vi\") => {\n    i18n.changeLanguage(lng);\n    setStorageValue(lng);\n    playOffSound && playOffSound();\n  };\n\n  return (\n    <h5 className=\"select-language\">\n      {t(\"Language\")}:{\" \"}\n      <strong onClick={() => changeLanguage(\"en\")}>{t(\"English\")}</strong> -{\" \"}\n      <strong onClick={() => changeLanguage(\"vi\")}>{t(\"Vietnamese\")}</strong>\n    </h5>\n  );\n};\n\nexport default SwitchLanguage;\n","import { atom } from \"recoil\";\nimport { PlayerState, GameTypeState } from \"../../types/game\";\n\nconst playerState = atom<PlayerState>({\n  key: GameTypeState.PLAYER_STATE,\n  default: {\n    rankingId: \"\",\n    playerName: \"\",\n    playerTiming: 0,\n  },\n});\n\nexport default playerState;\n","import { useTranslation } from \"react-i18next\";\nimport { Link } from \"react-router-dom\";\nimport { Routes } from \"../routes/CONSTANTS\";\nimport { useRecoilValue } from \"recoil\";\nimport gameSoundState from \"../recoil/atoms/gameSoundState\";\nimport SwitchLanguage from \"../components/SwitchLanguage\";\nimport { Helmet } from \"react-helmet\";\nimport playerState from \"../recoil/atoms/playerState\";\n\nconst MainPage = () => {\n  const { t } = useTranslation();\n  const { playPopUpOnSound } = useRecoilValue(gameSoundState);\n  const { playerName } = useRecoilValue(playerState);\n\n  return (\n    <div className=\"main-board\">\n      <Helmet>\n        <meta charSet=\"utf-8\" />\n        <title>Pika pika! - Main board</title>\n      </Helmet>\n      <nav className=\"navigation\">\n        <h3 className=\"text-center\">\n          {t(\"Welcome\")}, {playerName}\n        </h3>\n        <Link to={Routes.SINGLE_PLAYER_PAGE}>\n          <button onClick={() => playPopUpOnSound && playPopUpOnSound()}>\n            {t(\"Single player\")}\n          </button>\n        </Link>\n        <Link to={Routes.MULTI_PLAYER_PAGE}>\n          <button onClick={() => playPopUpOnSound && playPopUpOnSound()}>\n            {t(\"Multi player\")}\n          </button>\n        </Link>\n        <SwitchLanguage />\n      </nav>\n    </div>\n  );\n};\n\nexport default MainPage;\n","// const BASE_API = \"https://pokemon-game.ldktech.com/api\";\nconst BASE_API = \"http://localhost:8080\";\n\nexport default BASE_API;\n","import { Response } from \"../hooks/useAsync\";\nimport { GameMode } from \"../types/game\";\nimport BASE_API from \"./CONSTANTS\";\n\nexport type TopPlayer = {\n  _id?: string;\n  timing?: number;\n  playerName: string;\n  mode: GameMode;\n  timestamp: number;\n};\n\nexport interface TopPlayersResponse extends Response {\n  data: TopPlayer[];\n}\n\nexport interface InsertedTopPlayerResponse extends Response {\n  data?: {\n    InsertedID: string;\n  };\n  id: string;\n}\n\nconst defaultFetchOptions: RequestInit = {\n  method: \"POST\", // *GET, POST, PUT, DELETE, etc.\n  mode: \"cors\", // no-cors, *cors, same-origin\n  cache: \"no-cache\", // *default, no-cache, reload, force-cache, only-if-cached\n  credentials: \"same-origin\", // include, *same-origin, omit\n  headers: {\n    \"Content-Type\": \"application/json\",\n    // 'Content-Type': 'application/x-www-form-urlencoded',\n  },\n  redirect: \"follow\", // manual, *follow, error\n  referrerPolicy: \"no-referrer\", // no-referrer, *no-referrer-when-downgrade, origin, origin-when-cross-origin, same-origin, strict-origin, strict-origin-when-cross-origin, unsafe-url\n};\n\nconst getTopRanking = (mode: GameMode): Promise<TopPlayersResponse> => {\n  return fetch(`${BASE_API}/rankings?mode=${mode}`)\n    .then((res) => res.json())\n    .then(\n      (response) => response,\n      // Note: it's important to handle errors here\n      // instead of a catch() block so that we don't swallow\n      // exceptions from actual bugs in components.\n      (error) => error\n    );\n};\n\nconst addNewRanking = (data: TopPlayer): Promise<InsertedTopPlayerResponse> => {\n  const fetchOptions = { ...defaultFetchOptions, body: JSON.stringify(data) };\n  return fetch(`${BASE_API}/rankings`, fetchOptions)\n    .then((res) => res.json())\n    .then(\n      (response) => response,\n      // Note: it's important to handle errors here\n      // instead of a catch() block so that we don't swallow\n      // exceptions from actual bugs in components.\n      (error) => error\n    );\n};\n\nconst updateNewRanking = (\n  id: string,\n  data: TopPlayer\n): Promise<InsertedTopPlayerResponse> => {\n  const fetchOptions = {\n    ...defaultFetchOptions,\n    method: \"PUT\",\n    body: JSON.stringify(data),\n  };\n  return fetch(`${BASE_API}/rankings/${id}`, fetchOptions)\n    .then((res) => res.json())\n    .then(\n      (response) => response,\n      // Note: it's important to handle errors here\n      // instead of a catch() block so that we don't swallow\n      // exceptions from actual bugs in components.\n      (error) => error\n    );\n};\n\nexport { getTopRanking, addNewRanking, updateNewRanking };\n","export function timeConvert(num: number) {\n  if (num <= 0) {\n    return \"00:00\";\n  }\n  const hours = Math.floor(num / 60);\n  const minutes = num % 60;\n  return (\n    hours.toString().padStart(2, \"0\") +\n    \":\" +\n    minutes.toString().padStart(2, \"0\")\n  );\n}\n\nexport function dateTimeFromTimestamp(timestamp: number) {\n  const dateObject = new Date(timestamp);\n\n  return dateObject.toLocaleString();\n}\n","import { FC } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { TopPlayer, TopPlayersResponse } from \"../../api/ranking\";\nimport useAsync, { ResponseStatus } from \"../../hooks/useAsync\";\nimport { Routes } from \"../../routes/CONSTANTS\";\nimport { dateTimeFromTimestamp, timeConvert } from \"../../utils/time\";\nimport { useRecoilValue } from \"recoil\";\nimport gameSoundState from \"../../recoil/atoms/gameSoundState\";\nimport { useTranslation } from \"react-i18next\";\nimport { GameMode } from \"../../types/game\";\n\ntype TopListProps = {\n  fetch: () => Promise<TopPlayersResponse>;\n  mode: GameMode;\n};\n\nconst TopList: FC<TopListProps> = ({ fetch, mode }) => {\n  const { t } = useTranslation();\n  const { playPopUpOnSound } = useRecoilValue(gameSoundState);\n  const { status, value: topPlayersResponse, error } = useAsync(fetch, true);\n\n  return (\n    <>\n      {topPlayersResponse &&\n        topPlayersResponse.data === null &&\n        (mode === GameMode.SPEED_MODE ? (\n          <Link to={Routes.SPEED_MODE_PAGE}>\n            <button\n              onClick={() => playPopUpOnSound && playPopUpOnSound()}\n              style={{ width: \"calc(100% - 32px)\", margin: 16 }}\n            >\n              {t(\"Make your own ranking\")}\n            </button>\n          </Link>\n        ) : (\n          <Link to={Routes.SURVIVAL_MODE_PAGE}>\n            <button\n              onClick={() => playPopUpOnSound && playPopUpOnSound()}\n              style={{ width: \"calc(100% - 32px)\", margin: 16 }}\n            >\n              {t(\"Make your own ranking\")}\n            </button>\n          </Link>\n        ))}\n      <ol className=\"rank-list\">\n        {status === ResponseStatus.SUCCESS &&\n          topPlayersResponse?.data?.map(\n            (player: TopPlayer, index: number) =>\n              player.timing && (\n                <li key={`id-${index}`}>\n                  {player.playerName} - {timeConvert(player.timing)} -{\" \"}\n                  {dateTimeFromTimestamp(player.timestamp)}\n                </li>\n              )\n          )}\n        {status === ResponseStatus.ERROR && error && (\n          <p className=\"has-error\">{error}</p>\n        )}\n      </ol>\n    </>\n  );\n};\n\nexport default TopList;\n","import { memo } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { getTopRanking } from \"../api/ranking\";\nimport { GameMode } from \"../types/game\";\nimport TopList from \"./Rank/TopList\";\n\nconst RankBoard = () => {\n  const { t } = useTranslation();\n\n  return (\n    <div className=\"max-screen-container rank-board\">\n      <h1>{t(\"Top players\")}</h1>\n      <div className=\"row\">\n        <div className=\"col\">\n          <h4>\n            <em>{t(\"The longest is best\")}</em>\n          </h4>\n          <TopList\n            fetch={() => getTopRanking(GameMode.SURVIVAL_MODE)}\n            mode={GameMode.SURVIVAL_MODE}\n          />\n        </div>\n        <div className=\"col\">\n          <h4>\n            <em>{t(\"The fastest is best\")}</em>\n          </h4>\n          <TopList\n            fetch={() => getTopRanking(GameMode.SPEED_MODE)}\n            mode={GameMode.SPEED_MODE}\n          />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(RankBoard, () => true);\n","import { atom } from \"recoil\";\nimport {\n  GameStatus,\n  GameState,\n  GameTypeState,\n  GameLevel,\n} from \"../../types/game\";\n\nconst gameState = atom<GameState>({\n  key: GameTypeState.GAME_STATE,\n  default: {\n    status: GameStatus.PENDING,\n    row: 3,\n    col: 4,\n    pokemons: {},\n    matrix: [],\n    level: GameLevel.LEVEL_1,\n  },\n});\n\nexport default gameState;\n","import { nanoid } from \"nanoid\";\nimport {\n  PointCoords,\n  Pokemon,\n  PokemonCoords,\n  Direction,\n  PointType,\n} from \"../types/game\";\n\nconst BASE_URL =\n  \"https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/versions/generation-v/black-white\";\n\nexport let pokemonList: Pokemon[] = [\n  { id: \"poke-0\", matched: false, image: `${BASE_URL}/1.png` },\n  { id: \"poke-1\", matched: false, image: `${BASE_URL}/2.png` },\n  { id: \"poke-2\", matched: false, image: `${BASE_URL}/3.png` },\n  { id: \"poke-3\", matched: false, image: `${BASE_URL}/4.png` },\n  { id: \"poke-5\", matched: false, image: `${BASE_URL}/5.png` },\n  { id: \"poke-4\", matched: false, image: `${BASE_URL}/6.png` },\n  { id: \"poke-6\", matched: false, image: `${BASE_URL}/7.png` },\n  { id: \"poke-7\", matched: false, image: `${BASE_URL}/8.png` },\n  { id: \"poke-8\", matched: false, image: `${BASE_URL}/9.png` },\n  { id: \"poke-9\", matched: false, image: `${BASE_URL}/10.png` },\n  { id: \"poke-10\", matched: false, image: `${BASE_URL}/11.png` },\n  { id: \"poke-11\", matched: false, image: `${BASE_URL}/12.png` },\n  { id: \"poke-12\", matched: false, image: `${BASE_URL}/13.png` },\n  { id: \"poke-13\", matched: false, image: `${BASE_URL}/14.png` },\n  { id: \"poke-14\", matched: false, image: `${BASE_URL}/15.png` },\n  { id: \"poke-15\", matched: false, image: `${BASE_URL}/16.png` },\n  { id: \"poke-16\", matched: false, image: `${BASE_URL}/17.png` },\n  { id: \"poke-17\", matched: false, image: `${BASE_URL}/18.png` },\n  { id: \"poke-18\", matched: false, image: `${BASE_URL}/19.png` },\n  { id: \"poke-19\", matched: false, image: `${BASE_URL}/20.png` },\n  { id: \"poke-20\", matched: false, image: `${BASE_URL}/21.png` },\n  { id: \"poke-21\", matched: false, image: `${BASE_URL}/22.png` },\n  { id: \"poke-22\", matched: false, image: `${BASE_URL}/23.png` },\n  { id: \"poke-23\", matched: false, image: `${BASE_URL}/24.png` },\n  { id: \"poke-24\", matched: false, image: `${BASE_URL}/25.png` },\n  { id: \"poke-25\", matched: false, image: `${BASE_URL}/26.png` },\n  { id: \"poke-26\", matched: false, image: `${BASE_URL}/27.png` },\n  { id: \"poke-27\", matched: false, image: `${BASE_URL}/28.png` },\n  { id: \"poke-28\", matched: false, image: `${BASE_URL}/29.png` },\n  { id: \"poke-29\", matched: false, image: `${BASE_URL}/30.png` },\n  { id: \"poke-30\", matched: false, image: `${BASE_URL}/31.png` },\n  { id: \"poke-31\", matched: false, image: `${BASE_URL}/32.png` },\n  { id: \"poke-32\", matched: false, image: `${BASE_URL}/33.png` },\n  { id: \"poke-33\", matched: false, image: `${BASE_URL}/34.png` },\n  { id: \"poke-34\", matched: false, image: `${BASE_URL}/35.png` },\n  { id: \"poke-35\", matched: false, image: `${BASE_URL}/36.png` },\n  { id: \"poke-36\", matched: false, image: `${BASE_URL}/37.png` },\n  { id: \"poke-37\", matched: false, image: `${BASE_URL}/38.png` },\n  { id: \"poke-38\", matched: false, image: `${BASE_URL}/39.png` },\n  { id: \"poke-39\", matched: false, image: `${BASE_URL}/40.png` },\n];\n\nconst convertObjectToArrayList = <Model>(\n  objectList: Record<string, Model>\n): Model[] => {\n  const arrayList: Model[] = [];\n  Object.keys(objectList).map((key) => {\n    arrayList.push(objectList[key]);\n    return key;\n  });\n  return arrayList;\n};\n\nexport const shufflePokemonList = (nonShuffleList: Pokemon[]) => {\n  const shuffledPokemonList = nonShuffleList.sort(() => Math.random() - 0.5);\n  const shuffledlistPokemon: Record<string, Pokemon> = {};\n  shuffledPokemonList.map((pokemon) => {\n    const nid = nanoid();\n    shuffledlistPokemon[nid] = pokemon;\n    return pokemon;\n  });\n\n  return shuffledlistPokemon;\n};\n\nexport const reShufflePokemonList = (pokemonList: Record<string, Pokemon>) => {\n  const arrayPokemons = convertObjectToArrayList(pokemonList);\n\n  return shufflePokemonList(arrayPokemons);\n};\n\nexport const makeListPokemons = (row: number, col: number) => {\n  const clonePokemonList: Pokemon[] = pokemonList.sort(\n    () => Math.random() - 0.5\n  );\n  // pokemonList.map((pokemon) => {\n  //   clonePokemonList.push(pokemon);\n  //   return pokemon;\n  // });\n  const total = (row * col) / 4;\n  const slicePokemonList = clonePokemonList.slice(0, total);\n  const nonShufflePokemonList = [\n    ...slicePokemonList,\n    ...slicePokemonList,\n    ...slicePokemonList,\n    ...slicePokemonList,\n  ];\n\n  return shufflePokemonList(nonShufflePokemonList);\n};\n\nexport const generatePokemonMatrix = (\n  pokemons: Record<string, Pokemon>,\n  rowSetting: number = 8,\n  colSetting: number = 10\n): { pokemonMatrix: Pokemon[][]; pokemons: Record<string, Pokemon> } => {\n  const newPokemons = { ...pokemons };\n  const totalCol = colSetting + 2;\n  const totalRow = rowSetting + 2;\n  const pokemonKeys = Object.keys(pokemons);\n  const pokemonMatrix: Pokemon[][] = [];\n\n  for (let row = 0; row < totalRow; row++) {\n    if (pokemonMatrix[row] === undefined) pokemonMatrix[row] = [];\n    for (let col = 0; col < totalCol; col++) {\n      if (\n        row === 0 ||\n        row === totalRow - 1 ||\n        col === 0 ||\n        col === totalCol - 1\n      ) {\n        const id = nanoid();\n        const borderPoint = { nid: id, id, matched: true };\n        pokemonMatrix[row].push(borderPoint);\n      } else {\n        const pokemonKey = pokemonKeys.pop();\n        if (pokemonKey) {\n          const pokemon = {\n            ...newPokemons[pokemonKey],\n            nid: pokemonKey,\n            row,\n            col,\n          };\n          newPokemons[pokemonKey] = {\n            ...newPokemons[pokemonKey],\n            rowIndex: row,\n            colIndex: col,\n          };\n          pokemonMatrix[row].push(pokemon);\n        }\n      }\n    }\n  }\n\n  return { pokemonMatrix, pokemons: newPokemons };\n};\n\nconst cloneMatrix = (matrix: Pokemon[][]) => {\n  const newMatrix = [];\n  const length = matrix.length;\n\n  for (let i = 0; i < length; i++) {\n    newMatrix[i] = matrix[i].slice();\n  }\n\n  return newMatrix;\n};\n\nexport const findPath = (\n  fromPoint: PointCoords,\n  toPoint: PointCoords,\n  matrix: Pokemon[][],\n  totalRow: number,\n  totalCol: number\n) => {\n  const matrixTotalRow = totalRow + 2;\n  const matrixTotalCol = totalCol + 2;\n  const tempMatrix = cloneMatrix(matrix);\n  const matrixPoints: boolean[][] = [];\n  const matrixTrackingPoints: (PointCoords | undefined)[][] = [];\n\n  for (let rowIndex = 0; rowIndex < matrixTotalRow; ++rowIndex) {\n    matrixPoints.push([]);\n    matrixTrackingPoints.push([]);\n    for (let colIndex = 0; colIndex < matrixTotalCol; ++colIndex) {\n      const pokemon = { ...tempMatrix[rowIndex][colIndex] };\n      matrixPoints[rowIndex].push(pokemon.matched);\n      matrixTrackingPoints[rowIndex].push(undefined);\n    }\n  }\n  const dRow: number[] = [-1, 0, 1, 0];\n  const dCol: number[] = [0, 1, 0, -1];\n  const queue = [];\n  queue.push(toPoint);\n  matrixTrackingPoints[toPoint.rowIndex][toPoint.colIndex] = {\n    rowIndex: -2,\n    colIndex: -2,\n  };\n\n  matrixPoints[fromPoint.rowIndex][fromPoint.colIndex] = true;\n  matrixPoints[toPoint.rowIndex][toPoint.colIndex] = true;\n\n  while (queue.length) {\n    const currentPoint = queue.shift();\n\n    if (currentPoint) {\n      if (\n        currentPoint?.rowIndex === fromPoint.rowIndex &&\n        currentPoint?.colIndex === fromPoint.colIndex\n      ) {\n        break;\n      }\n      for (let index = 0; index < 4; index++) {\n        let rowIndex: number = currentPoint.rowIndex + dRow[index];\n        let colIndex: number = currentPoint.colIndex + dCol[index];\n        while (\n          rowIndex >= 0 &&\n          rowIndex < matrixTotalRow &&\n          colIndex >= 0 &&\n          colIndex < matrixTotalCol &&\n          matrixPoints[rowIndex][colIndex] === true\n        ) {\n          if (matrixTrackingPoints[rowIndex][colIndex] === undefined) {\n            matrixTrackingPoints[rowIndex][colIndex] = currentPoint;\n            queue.push({ rowIndex, colIndex });\n          }\n          rowIndex += dRow[index];\n          colIndex += dCol[index];\n        }\n      }\n    }\n  }\n\n  const trackedPoints: PointCoords[] = [];\n  let trackPoint: PointCoords = { ...fromPoint };\n\n  if (matrixTrackingPoints[trackPoint.rowIndex][trackPoint.colIndex]) {\n    while (trackPoint.rowIndex !== -2 && trackPoint.colIndex !== -2) {\n      trackedPoints.push({\n        rowIndex: trackPoint.rowIndex,\n        colIndex: trackPoint.colIndex,\n      });\n      trackPoint = {\n        ...(matrixTrackingPoints[trackPoint.rowIndex][\n          trackPoint.colIndex\n        ] as PointCoords),\n      };\n    }\n  }\n\n  return trackedPoints;\n};\n\nexport const hasConnectLine = (\n  point1: PokemonCoords,\n  point2: PokemonCoords,\n  matrix: Pokemon[][],\n  totalRow: number,\n  totalCol: number\n) => {\n  const pathPoints = findPath(point1, point2, matrix, totalRow, totalCol);\n\n  return {\n    connected: pathPoints.length >= 2 && pathPoints.length <= 4,\n    pathPoints,\n  };\n};\n\nexport const checkPointInLine = (\n  connectingLinePoints: PointCoords[],\n  currentPosition: PointCoords\n) => {\n  const { rowIndex, colIndex } = currentPosition;\n\n  return connectingLinePoints.find(\n    (matchingLinePoint) =>\n      matchingLinePoint.rowIndex === rowIndex &&\n      matchingLinePoint.colIndex === colIndex\n  );\n};\n\nexport const drawPath = (\n  pathPoints: PointCoords[],\n  totalRow: number,\n  totalCol: number\n) => {\n  const limitRow = totalRow + 2;\n  const limitCol = totalCol + 2;\n  // console.log(pathPoints);\n  return pathPoints.reduce(\n    (newPathPoints, currentPoint, index, arrayPoints) => {\n      let type: PointType = PointType.LINE;\n      let direction: Direction | undefined = undefined;\n      const nextIndex = index + 1;\n      const prevIndex = index - 1;\n\n      if (arrayPoints[nextIndex] === undefined) {\n        type = PointType.END;\n      }\n\n      if (arrayPoints[prevIndex]) {\n        const prevPoint = arrayPoints[prevIndex];\n        if (prevPoint.rowIndex > currentPoint.rowIndex) {\n          direction = Direction.TOP;\n        } else if (prevPoint.rowIndex < currentPoint.rowIndex) {\n          direction = Direction.BOTTOM;\n        } else {\n          if (prevPoint.colIndex > currentPoint.colIndex) {\n            direction = Direction.LEFT;\n          } else if (prevPoint.colIndex < currentPoint.colIndex) {\n            direction = Direction.RIGHT;\n          } else {\n            if (prevPoint.rowIndex > currentPoint.rowIndex) {\n              direction = Direction.TOP;\n            } else if (prevPoint.rowIndex < currentPoint.rowIndex) {\n              direction = Direction.BOTTOM;\n            }\n          }\n        }\n\n        let extraPoint: PointCoords | undefined = {\n          ...currentPoint,\n          direction,\n          type: PointType.LINE,\n        };\n\n        // console.log(extraPoint);\n\n        do {\n          switch (extraPoint.direction) {\n            case Direction.BOTTOM:\n              extraPoint.rowIndex--;\n              if (extraPoint.rowIndex < 0) {\n                extraPoint = undefined;\n              }\n\n              break;\n\n            case Direction.TOP:\n              extraPoint.rowIndex++;\n              if (extraPoint.rowIndex >= limitRow) {\n                extraPoint = undefined;\n              }\n              break;\n\n            case Direction.LEFT:\n              extraPoint.colIndex++;\n              if (extraPoint.colIndex >= limitCol) {\n                extraPoint = undefined;\n              }\n              break;\n\n            case Direction.RIGHT:\n              extraPoint.colIndex--;\n              if (extraPoint.colIndex < 0) {\n                extraPoint = undefined;\n              }\n              break;\n\n            default:\n              break;\n          }\n          if (extraPoint === undefined) {\n            break;\n          }\n          if (\n            extraPoint.rowIndex === prevPoint.rowIndex &&\n            extraPoint.colIndex === prevPoint.colIndex\n          ) {\n            break;\n          }\n\n          newPathPoints.push({ ...extraPoint });\n        } while (extraPoint !== undefined);\n      } else {\n        type = PointType.START;\n      }\n      const newCurrentPoint = { ...currentPoint, direction, type };\n\n      newPathPoints.push(newCurrentPoint);\n\n      return newPathPoints;\n    },\n    [] as PointCoords[]\n  );\n};\n\nexport const checkConnectionSelectedPokemons = (\n  selectedPokemons: PokemonCoords[],\n  pokemons: Record<string, Pokemon>,\n  matrix: Pokemon[][],\n  rowSetting: number,\n  colSetting: number\n) => {\n  const newPokemons = { ...pokemons };\n  const newSelectedPokemons = [...selectedPokemons];\n  const [selectedPokemon1, selectedPokemon2] = newSelectedPokemons;\n  let connectingLinePoints: PointCoords[] = [];\n  let newMatrix = [...matrix];\n\n  if (\n    selectedPokemon1?.nid &&\n    selectedPokemon2?.nid &&\n    pokemons[selectedPokemon1.nid].id === pokemons[selectedPokemon2.nid].id\n  ) {\n    const { connected, pathPoints } = hasConnectLine(\n      selectedPokemon1,\n      selectedPokemon2,\n      matrix,\n      rowSetting,\n      colSetting\n    );\n\n    if (connected) {\n      connectingLinePoints = drawPath(pathPoints, rowSetting, colSetting);\n\n      newPokemons[selectedPokemon1.nid] = {\n        ...newPokemons[selectedPokemon1.nid],\n        matched: true,\n      };\n      newPokemons[selectedPokemon2.nid] = {\n        ...newPokemons[selectedPokemon2.nid],\n        matched: true,\n      };\n      const { pokemonMatrix } = generatePokemonMatrix(\n        newPokemons,\n        rowSetting,\n        colSetting\n      );\n      newMatrix = pokemonMatrix;\n    } else {\n      connectingLinePoints = [{ rowIndex: -1, colIndex: -1 }];\n    }\n\n    newSelectedPokemons.length = 0;\n  } else {\n    if (selectedPokemons.length === 2) {\n      newSelectedPokemons.length = 0;\n      connectingLinePoints = [{ rowIndex: -1, colIndex: -1 }];\n    }\n  }\n\n  return {\n    newSelectedPokemons,\n    newMatrix,\n    newPokemons,\n    connectingLinePoints,\n  };\n};\n\nexport const checkCompletedLevel = (pokemons: Record<string, Pokemon>) => {\n  return (\n    Object.keys(pokemons).length &&\n    Object.entries(pokemons).findIndex(\n      ([_, pokemon]) => pokemon.matched === false\n    ) === -1\n  );\n};\n\nexport const hasAnyConnectLine = (\n  pokemons: Record<string, Pokemon>,\n  matrix: Pokemon[][],\n  totalRow: number,\n  totalCol: number\n) => {\n  let foundConnectLine = false;\n  const entriesPokemons = Object.entries(pokemons);\n\n  while (entriesPokemons.length) {\n    const entryPokemon = entriesPokemons.pop();\n\n    if (entryPokemon === undefined) {\n      break;\n    }\n    const [nid, currentPokemon] = entryPokemon;\n\n    if (currentPokemon.matched === false) {\n      foundConnectLine = entriesPokemons.some(([nid, pokemon]) => {\n        if (currentPokemon.id === pokemon.id && pokemon.matched === false) {\n          const { connected } = hasConnectLine(\n            currentPokemon as PointCoords,\n            pokemon as PointCoords,\n            matrix,\n            totalRow,\n            totalCol\n          );\n\n          // if (connected) {\n          //   console.log(\n          //     \"debug thôi, đừng có xem\",\n          //     currentPokemon.rowIndex,\n          //     currentPokemon.colIndex,\n          //     pokemon.rowIndex,\n          //     pokemon.colIndex\n          //   );\n          // }\n\n          return connected;\n        }\n\n        return false;\n      });\n      if (foundConnectLine) {\n        break;\n      }\n    }\n  }\n\n  return foundConnectLine;\n};\n","import { atom } from \"recoil\";\nimport { GameOverlayState, GameTypeState } from \"../../types/game\";\n\nconst gameOverlayState = atom<GameOverlayState>({\n  key: GameTypeState.GAME_OVERLAY_STATE,\n  default: {\n    connectingLinePoints: [],\n  },\n});\n\nexport default gameOverlayState;\n","import { atom } from \"recoil\";\nimport { GameTypeState, PokemonCoords } from \"../../types/game\";\n\nconst selectedPokemonsState = atom<PokemonCoords[]>({\n  key: GameTypeState.SELECTED_POKEMONS,\n  default: [],\n});\n\nexport default selectedPokemonsState;\n","import { atom } from \"recoil\";\nimport { GameTypeState } from \"../../types/game\";\n\nconst suggestTimingState = atom<number>({\n  key: GameTypeState.GAME_SUGGEST_TIMING_STATE,\n  default: 0,\n});\n\nexport default suggestTimingState;\n","import { selector } from \"recoil\";\nimport { GameSelector, PokemonCoords } from \"../../types/game\";\nimport { checkConnectionSelectedPokemons } from \"../../utils/game\";\nimport gameState from \"../atoms/gameState\";\nimport gameOverlayState from \"../atoms/gameOverlayState\";\nimport selectedPokemonsState from \"../atoms/selectedPokemonsState\";\nimport suggestTimingState from \"../atoms/suggestTimingState\";\n\nconst selectedPokemonsSelector = selector({\n  key: GameSelector.SELECTED_POKEMONS_SELECTOR,\n  get: ({ get }) => {\n    const selectedPokemons = get(selectedPokemonsState);\n    return selectedPokemons;\n  },\n  set: ({ set, get }, newValue) => {\n    const { row, col, status, matrix, pokemons, level } = get(gameState);\n    const selectedPokemons = get(selectedPokemonsState);\n\n    const cloneSelectedPokemons = [...selectedPokemons];\n\n    cloneSelectedPokemons.push(newValue as PokemonCoords);\n\n    const {\n      connectingLinePoints,\n      newMatrix,\n      newPokemons,\n      newSelectedPokemons,\n    } = checkConnectionSelectedPokemons(\n      cloneSelectedPokemons,\n      pokemons,\n      matrix,\n      row,\n      col\n    );\n\n    if (connectingLinePoints.length >= 1) {\n      if (connectingLinePoints.length > 1) {\n        set(gameState, {\n          row,\n          col,\n          status,\n          level,\n          matrix: newMatrix,\n          pokemons: newPokemons,\n        });\n        set(suggestTimingState, 0);\n      }\n      set(gameOverlayState, {\n        connectingLinePoints,\n      });\n    }\n\n    set(selectedPokemonsState, newSelectedPokemons);\n  },\n});\n\nexport default selectedPokemonsSelector;\n","import { atom } from \"recoil\";\nimport { GameTypeState } from \"../../types/game\";\n\nconst gameTimingState = atom<{ timing: number; yourTiming?: number }>({\n  key: GameTypeState.GAME_TIMING_STATE,\n  default: {\n    timing: 0,\n    yourTiming: 0,\n  },\n});\n\nexport default gameTimingState;\n","import { useRecoilValue, useResetRecoilState, useSetRecoilState } from \"recoil\";\nimport gameState from \"../recoil/atoms/gameState\";\nimport selectedPokemonsSelector from \"../recoil/selectors/selectedPokemonsSelector\";\nimport selectedPokemonsState from \"../recoil/atoms/selectedPokemonsState\";\nimport gameOverlayState from \"../recoil/atoms/gameOverlayState\";\nimport gameSoundState from \"../recoil/atoms/gameSoundState\";\nimport { useCallback } from \"react\";\nimport {\n  BASE_START_TIME,\n  GameLevel,\n  GameMode,\n  gameOptions,\n  GameStatus,\n} from \"../types/game\";\nimport { generatePokemonMatrix, makeListPokemons } from \"../utils/game\";\nimport gameTimingState from \"../recoil/atoms/gameTimingState\";\nimport { addNewRanking, TopPlayer, updateNewRanking } from \"../api/ranking\";\nimport playerState from \"../recoil/atoms/playerState\";\n\nexport function useGameActions(mode: GameMode) {\n  const setGame = useSetRecoilState(gameState);\n  const setPlayer = useSetRecoilState(playerState);\n  const setGameTiming = useSetRecoilState(gameTimingState);\n  const setSelectedPokemons = useSetRecoilState(selectedPokemonsSelector);\n  const resetGameState = useResetRecoilState(gameState);\n  const resetGameOverlayState = useResetRecoilState(gameOverlayState);\n  const resetSelectedPokemonsState = useResetRecoilState(selectedPokemonsState);\n  const { playBiteSound, playFanfareSound, playNearlyEndTimeSound } =\n    useRecoilValue(gameSoundState);\n\n  const selectPokemon = (\n    pokemonId: string,\n    rowIndex: number,\n    colIndex: number\n  ) => {\n    playBiteSound && playBiteSound();\n    setSelectedPokemons({ nid: pokemonId, rowIndex, colIndex });\n  };\n\n  const resetGame = () => {\n    resetGameState();\n    resetGameOverlayState();\n    resetSelectedPokemonsState();\n  };\n\n  const initGame = useCallback(\n    (level: GameLevel) => {\n      const { row, col } = gameOptions[level];\n      const pokemons = makeListPokemons(row, col);\n      const { pokemonMatrix, pokemons: newPokemons } = generatePokemonMatrix(\n        pokemons,\n        row,\n        col\n      );\n      setGame({\n        pokemons: newPokemons,\n        matrix: pokemonMatrix,\n        level,\n        row,\n        col,\n        status: GameStatus.RUNNING,\n      });\n      setPlayer((currentPlayer) => ({ ...currentPlayer, playerTiming: 0 }));\n    },\n    [setGame]\n  );\n\n  const replayGame = (playerName: string) => {\n    playFanfareSound && playFanfareSound();\n    initGame(GameLevel.LEVEL_1);\n    addNewRankingScore(mode, playerName);\n    if (mode === GameMode.SURVIVAL_MODE) {\n      setGameTiming({ timing: BASE_START_TIME, yourTiming: 0 });\n    }\n    if (mode === GameMode.SPEED_MODE) {\n      setGameTiming({ timing: 0 });\n    }\n  };\n\n  const endGame = () => {\n    if (mode === GameMode.SURVIVAL_MODE) {\n      playNearlyEndTimeSound && playNearlyEndTimeSound();\n      setGame((prevGame) => ({\n        ...prevGame,\n        status: GameStatus.COMPLETED,\n      }));\n    }\n  };\n\n  const addNewRankingScore = (mode: GameMode, playerName: string) => {\n    const playerScore: TopPlayer = {\n      mode,\n      playerName,\n      timestamp: Date.now(),\n    };\n    addNewRanking(playerScore).then((response) => {\n      setPlayer((prevPlayer) => ({\n        ...prevPlayer,\n        rankingId: response.id,\n      }));\n    });\n  };\n\n  const updateNewRankingScore = (\n    id: string,\n    mode: GameMode,\n    playerName: string,\n    timing: number\n  ) => {\n    const playerScore: TopPlayer = {\n      mode,\n      playerName,\n      timing,\n      timestamp: Date.now(),\n    };\n    updateNewRanking(id, playerScore);\n  };\n\n  return {\n    initGame,\n    replayGame,\n    endGame,\n    selectPokemon,\n    resetGame,\n    addNewRankingScore,\n    updateNewRankingScore,\n  };\n}\n","import { useTranslation } from \"react-i18next\";\nimport { Link } from \"react-router-dom\";\nimport RankBoard from \"../components/RankBoard\";\nimport { Routes } from \"../routes/CONSTANTS\";\nimport { useGameActions } from \"../hooks/useGameActions\";\nimport { useEffect } from \"react\";\nimport gameSoundState from \"../recoil/atoms/gameSoundState\";\nimport { useRecoilValue } from \"recoil\";\nimport SwitchLanguage from \"../components/SwitchLanguage\";\nimport { Helmet } from \"react-helmet\";\nimport { GameMode } from \"../types/game\";\n\nconst SinglePlayerPage = () => {\n  const { t } = useTranslation();\n  const { playPopUpOnSound, playGameSong } = useRecoilValue(gameSoundState);\n  const { resetGame } = useGameActions(GameMode.SURVIVAL_MODE);\n\n  useEffect(() => {\n    resetGame();\n  }, [resetGame]);\n\n  return (\n    <div className=\"game-container\">\n      <Helmet>\n        <meta charSet=\"utf-8\" />\n        <title>Pika pika! - Single player</title>\n      </Helmet>\n      <div className=\"game-board\">\n        <RankBoard />\n      </div>\n      <div className=\"sidebar\">\n        <div className=\"game-info\">\n          <h1 className=\"game-title\">{t(\"Single player\")}</h1>\n        </div>\n        <div>\n          <Link to={Routes.SURVIVAL_MODE_PAGE}>\n            <button onClick={() => playPopUpOnSound && playPopUpOnSound()}>\n              {t(\"Survival mode\")}\n            </button>\n          </Link>\n          <Link to={Routes.SPEED_MODE_PAGE}>\n            <button onClick={() => playPopUpOnSound && playPopUpOnSound()}>\n              {t(\"Speed mode\")}\n            </button>\n          </Link>\n          <Link to={Routes.MAIN_PAGE}>\n            <button onClick={() => playPopUpOnSound && playPopUpOnSound()}>\n              {t(\"Back\")}\n            </button>\n          </Link>\n        </div>\n        <SwitchLanguage />\n      </div>\n    </div>\n  );\n};\n\nexport default SinglePlayerPage;\n","export enum ChatTypeState {\n  MESSAGES_STATE = \"MESSAGES_STATE\",\n}\n\nexport type Message = {\n  channel: string;\n  content: string;\n};\n\nexport interface MessagesState {\n  messages: Message[];\n}\n","import { atom } from \"recoil\";\nimport { ChatTypeState, MessagesState } from \"../../types/chat\";\n\nconst messagesState = atom<MessagesState>({\n  key: ChatTypeState.MESSAGES_STATE,\n  default: {\n    messages: [],\n  },\n});\n\nexport default messagesState;\n","import { FC, FormEventHandler, useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\n\ninterface ChatBoxProps {\n  handleSubmit: FormEventHandler<HTMLFormElement>;\n}\n\nconst ChatBox: FC<ChatBoxProps> = ({ handleSubmit }) => {\n  const { t } = useTranslation();\n  const [throttle, setThrottle] = useState(1);\n\n  const onSubmit: FormEventHandler<HTMLFormElement> = (event) => {\n    if (throttle) {\n      setThrottle(0);\n      handleSubmit(event);\n      setTimeout(() => {\n        setThrottle(1);\n      }, 300);\n    } else {\n      alert(t(\"Chat slowly please\"));\n    }\n  };\n\n  return (\n    <div className=\"chat-box\">\n      <form onSubmit={onSubmit}>\n        <input\n          name=\"message\"\n          placeholder={t(\"Enter your message here...\")}\n          autoFocus\n          autoComplete=\"off\"\n        />\n      </form>\n    </div>\n  );\n};\n\nexport default ChatBox;\n","import { FC, memo } from \"react\";\nimport { useRecoilValue } from \"recoil\";\nimport playerState from \"../../recoil/atoms/playerState\";\nimport { dateTimeFromTimestamp } from \"../../utils/time\";\n\ninterface MessageProps {\n  message: string;\n}\n\nconst Message: FC<MessageProps> = ({ message }) => {\n  const { playerName } = useRecoilValue(playerState);\n  try {\n    const { name, content, timestamp } = JSON.parse(message);\n    const selfClass = playerName === name ? \"self\" : \"\";\n    return (\n      <div className={`message ${selfClass}`}>\n        <small className=\"message-name\">{name}</small>\n        <strong className=\"message-content\">{content}</strong>\n        <small className=\"message-date\">\n          <em>{dateTimeFromTimestamp(timestamp)}</em>\n        </small>\n      </div>\n    );\n  } catch {\n    return null;\n  }\n};\n\nfunction isOldMessage(prevProps: MessageProps, nextProps: MessageProps) {\n  return prevProps.message === nextProps.message;\n}\n\nexport default memo(Message, isOldMessage);\n","import { FC, useEffect } from \"react\";\nimport Message from \"./Message\";\nimport { useRecoilValue } from \"recoil\";\nimport messagesState from \"../../recoil/atoms/messagesState\";\n\nconst MessagesBox: FC = () => {\n  const { messages } = useRecoilValue(messagesState);\n\n  useEffect(() => {\n    const messagesBox = document.getElementById(\"messages-box\");\n    if (messagesBox) {\n      messagesBox.scrollTo({\n        behavior: \"smooth\",\n        top: messagesBox.scrollHeight,\n      });\n    }\n  }, [messages.length]);\n\n  return (\n    <div id=\"messages-box\" className=\"messages-box\">\n      {messages.map(\n        (message, index) =>\n          message && <Message key={index} message={message.content} />\n      )}\n    </div>\n  );\n};\n\nexport default MessagesBox;\n","import { FC, FormEventHandler, useCallback, useEffect, useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport useWebSocket, { ReadyState } from \"react-use-websocket\";\nimport { useRecoilValue, useSetRecoilState } from \"recoil\";\nimport gameSoundState from \"../recoil/atoms/gameSoundState\";\nimport messagesState from \"../recoil/atoms/messagesState\";\nimport playerState from \"../recoil/atoms/playerState\";\nimport ChatBox from \"./Chat/ChatBox\";\nimport MessagesBox from \"./Chat/MessagesBox\";\n\ninterface ChatRoomProps {\n  room: string;\n}\n\n// const BASE_WS_URL = \"wss://pokemon-game.ldktech.com/websocket\";\nconst BASE_WS_URL = \"ws://localhost:8080\";\n\nconst ChatRoom: FC<ChatRoomProps> = ({ room }) => {\n  const { t } = useTranslation();\n  const { playerName } = useRecoilValue(playerState);\n  const { playPopUpOffSound } = useRecoilValue(gameSoundState);\n  const setMessagesState = useSetRecoilState(messagesState);\n  const [socketUrl] = useState(`${BASE_WS_URL}/chat`);\n  const { sendJsonMessage, readyState, lastJsonMessage, lastMessage } =\n    useWebSocket(socketUrl, {\n      reconnectAttempts: 10,\n      reconnectInterval: 3000,\n      retryOnError: true,\n      shouldReconnect: () => true,\n      queryParams: {\n        username: playerName,\n      },\n      onMessage: (event) => {\n        playPopUpOffSound && playPopUpOffSound();\n      },\n    });\n\n  const reTryConnectSocket = () => {\n    window.location.reload();\n  };\n\n  useEffect(() => {\n    lastJsonMessage &&\n      setMessagesState(({ messages }) => ({\n        messages: [...messages, lastJsonMessage],\n      }));\n  }, [lastMessage]);\n\n  const handleClickSendMessage = useCallback((message) => {\n    const messageJson = {\n      command: 2,\n      channel: \"general\",\n      name: playerName,\n      content: message,\n      timestamp: Date.now(),\n    };\n    // playPopUpOnSound();\n    sendJsonMessage(messageJson);\n  }, []);\n\n  const handleSubmit: FormEventHandler<HTMLFormElement> = (event) => {\n    event.preventDefault();\n    const inputMessage = event.currentTarget.message;\n    inputMessage.setAttribute(\"disabled\", \"true\");\n    const message = inputMessage.value.replace(\n      /\\b(dit|du|fuck|cu|dcm|dm|dcm|cat)\\b/g,\n      \"*\"\n    );\n    if (message && message.trim() !== \"\") {\n      handleClickSendMessage(message);\n      inputMessage.value = \"\";\n    } else {\n      alert(t(\"Please enter your message\"));\n    }\n    inputMessage.removeAttribute(\"disabled\");\n    inputMessage.focus();\n  };\n\n  return (\n    <div className=\"chat-room\">\n      <div className=\"chat-container\">\n        {readyState === ReadyState.OPEN && (\n          <>\n            <MessagesBox />\n            <ChatBox handleSubmit={handleSubmit} />\n          </>\n        )}\n        {readyState === ReadyState.CLOSED && (\n          <div className=\"service-status\">\n            {t(\"Service is not available now.\")}\n            <strong className=\"clickable\" onClick={reTryConnectSocket}>\n              {t(\"Please try again\")}\n            </strong>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default ChatRoom;\n","import { Helmet } from \"react-helmet\";\nimport { useTranslation } from \"react-i18next\";\nimport { Link } from \"react-router-dom\";\nimport { useRecoilValue } from \"recoil\";\nimport ChatRoom from \"../components/ChatRoom\";\nimport SwitchLanguage from \"../components/SwitchLanguage\";\nimport gameSoundState from \"../recoil/atoms/gameSoundState\";\nimport { Routes } from \"../routes/CONSTANTS\";\n\nconst MultiPlayerPage = () => {\n  const { t } = useTranslation();\n\n  const { playPopUpOnSound, playGlugSound } = useRecoilValue(gameSoundState);\n\n  const showInDevelopment = () => {\n    playGlugSound && playGlugSound();\n    alert(t(\"In development\"));\n  };\n\n  return (\n    <div className=\"chat-board\">\n      <Helmet>\n        <meta charSet=\"utf-8\" />\n        <title>Pika pika! - Multi player</title>\n      </Helmet>\n      <div className=\"game-board\">\n        <ChatRoom room=\"general\" />\n      </div>\n      <div className=\"sidebar\">\n        <div className=\"game-info\">\n          <h1 className=\"game-title\">{t(\"Multi player\")}</h1>\n        </div>\n        <div>\n          <div className=\"text-center\">\n            <p className=\"text-coming-soon\">{t(\"Coming soon...\")}</p>\n            <button onClick={showInDevelopment}>{t(\"Make match\")}</button>\n            <button onClick={showInDevelopment}>\n              {t(\"Find random match\")}\n            </button>\n            <Link to={Routes.MAIN_PAGE}>\n              <button onClick={() => playPopUpOnSound && playPopUpOnSound()}>\n                {t(\"Main menu\")}\n              </button>\n            </Link>\n          </div>\n        </div>\n        <p className=\"mobile-helper\">{t(\"Scroll down to chat\")}</p>\n        <SwitchLanguage />\n      </div>\n    </div>\n  );\n};\n\nexport default MultiPlayerPage;\n","import { FC, memo } from \"react\";\nimport { Pokemon } from \"../../types/game\";\n\ntype PokemonCardProps = {\n  pokemon: Pokemon;\n  rowIndex: number;\n  colIndex: number;\n  isSelected: number | boolean;\n  selectPokemon: (\n    pokemonId: string,\n    rowIndex: number,\n    colIndex: number\n  ) => void;\n};\n\nconst PokemonCard: FC<PokemonCardProps> = ({\n  pokemon,\n  rowIndex,\n  colIndex,\n  isSelected,\n  selectPokemon,\n}) => {\n  const selected = isSelected ? \"selected\" : \"\";\n  const hidden = pokemon.matched ? \"hidden\" : \"\";\n  return (\n    <div\n      style={{\n        backgroundImage: `url(${pokemon.image ?? \"\"})`,\n      }}\n      className={`pokemon-card ${selected} ${hidden}`}\n      onClick={() => {\n        if (!isSelected && !pokemon.matched && pokemon.nid) {\n          selectPokemon(pokemon.nid, rowIndex, colIndex);\n        }\n      }}\n    />\n  );\n};\n\nfunction propsAreEquals(\n  prevProps: PokemonCardProps,\n  nextProps: PokemonCardProps\n) {\n  return (\n    prevProps.pokemon.nid === nextProps.pokemon.nid &&\n    prevProps.pokemon.image === nextProps.pokemon.image &&\n    prevProps.pokemon.matched === nextProps.pokemon.matched &&\n    prevProps.isSelected === nextProps.isSelected\n  );\n}\n\nexport default memo(PokemonCard, propsAreEquals);\n","import { FC } from \"react\";\nimport { useRecoilValue } from \"recoil\";\nimport { useGameActions } from \"../../hooks/useGameActions\";\nimport selectedPokemonsState from \"../../recoil/atoms/selectedPokemonsState\";\n\nimport { GameMode, Pokemon } from \"../../types/game\";\nimport PokemonCard from \"./PokemonCard\";\n\ntype PokemonRowProps = {\n  pokemons: Pokemon[];\n  rowIndex: number;\n  mode: GameMode;\n};\n\nconst PokemonRow: FC<PokemonRowProps> = ({ pokemons, rowIndex, mode }) => {\n  const selectedPokemons = useRecoilValue(selectedPokemonsState);\n  const { selectPokemon } = useGameActions(mode);\n  return (\n    <>\n      {pokemons.map((pokemon, index) => (\n        <PokemonCard\n          key={`card-${index}`}\n          pokemon={pokemon}\n          rowIndex={rowIndex}\n          colIndex={index}\n          isSelected={\n            pokemon.nid !== undefined &&\n            selectedPokemons.findIndex(({ nid }) => nid === pokemon.nid) >= 0\n          }\n          selectPokemon={selectPokemon}\n        />\n      ))}\n    </>\n  );\n};\n\nexport default PokemonRow;\n","import { useEffect } from \"react\";\nimport { useLocation } from \"react-router-dom\";\nimport { useRecoilValue, useSetRecoilState } from \"recoil\";\nimport gameSoundState from \"../recoil/atoms/gameSoundState\";\nimport gameState from \"../recoil/atoms/gameState\";\nimport gameTimingState from \"../recoil/atoms/gameTimingState\";\nimport playerState from \"../recoil/atoms/playerState\";\nimport suggestTimingState from \"../recoil/atoms/suggestTimingState\";\nimport {\n  BASE_START_TIME,\n  GameLevel,\n  GameMode,\n  GameStatus,\n  nextLevel,\n  Pokemon,\n} from \"../types/game\";\nimport {\n  generatePokemonMatrix,\n  checkCompletedLevel,\n  hasAnyConnectLine,\n  reShufflePokemonList,\n} from \"../utils/game\";\nimport { useGameActions } from \"./useGameActions\";\n\nexport default function useGameEngine(mode: GameMode) {\n  const location = useLocation();\n  const {\n    playFanfareSound,\n    playLevelUpSound,\n    playCompletedGameSound,\n    playYouWinSound,\n  } = useRecoilValue(gameSoundState);\n  const {\n    initGame,\n    replayGame,\n    endGame,\n    addNewRankingScore,\n    updateNewRankingScore,\n  } = useGameActions(mode);\n  const setGame = useSetRecoilState(gameState);\n  const currentPlayer = useRecoilValue(playerState);\n  const setGameTiming = useSetRecoilState(gameTimingState);\n  const { matrix, row, col, status, pokemons, level } =\n    useRecoilValue(gameState);\n  const shuffleMatrix = (pokemons: Record<string, Pokemon>) => {\n    const newShufflePokemons = reShufflePokemonList(pokemons);\n    const { pokemonMatrix, pokemons: newPokemons } = generatePokemonMatrix(\n      newShufflePokemons,\n      row,\n      col\n    );\n    setGame({\n      pokemons: newPokemons,\n      matrix: pokemonMatrix,\n      level,\n      row,\n      col,\n      status: GameStatus.RUNNING,\n    });\n  };\n\n  // Setup game\n  useEffect(() => {\n    if (status === GameStatus.PENDING) {\n      playFanfareSound && playFanfareSound();\n      initGame(level);\n      addNewRankingScore(mode, currentPlayer.playerName);\n      if (mode === GameMode.SURVIVAL_MODE) {\n        setGameTiming({ timing: BASE_START_TIME, yourTiming: 0 });\n      }\n      if (mode === GameMode.SPEED_MODE) {\n        setGameTiming({ timing: 0 });\n      }\n    }\n    return () => {\n      // cleanup\n    };\n  }, [status, initGame]);\n\n  // Check game completed and post result\n  useEffect(() => {\n    if (status === GameStatus.COMPLETED) {\n      if (currentPlayer.rankingId) {\n        updateNewRankingScore(\n          currentPlayer.rankingId,\n          mode,\n          currentPlayer.playerName,\n          currentPlayer.playerTiming\n        );\n      }\n    }\n  }, [currentPlayer.rankingId, currentPlayer.playerTiming]);\n\n  // Check completed one level and re-start new one higher level\n  useEffect(() => {\n    if (checkCompletedLevel(pokemons)) {\n      const levelUp: GameLevel = nextLevel[level];\n      if (level !== levelUp || mode === GameMode.SURVIVAL_MODE) {\n        initGame(levelUp);\n        playCompletedGameSound && playCompletedGameSound();\n      } else {\n        if (mode === GameMode.SPEED_MODE) {\n          playYouWinSound && playYouWinSound();\n          setGame({\n            matrix,\n            row,\n            col,\n            pokemons,\n            level,\n            status: GameStatus.COMPLETED,\n          });\n        }\n      }\n    } else {\n      if (\n        Object.keys(pokemons).length &&\n        hasAnyConnectLine(pokemons, matrix, row, col) === false\n      ) {\n        shuffleMatrix(pokemons);\n        playLevelUpSound && playLevelUpSound();\n      }\n    }\n  }, [pokemons]);\n\n  // Setup new game if access directly from browser\n  useEffect(() => {\n    if (status === GameStatus.RUNNING) {\n      playFanfareSound && playFanfareSound();\n      initGame(GameLevel.LEVEL_1);\n      if (mode === GameMode.SURVIVAL_MODE) {\n        setGameTiming({ timing: BASE_START_TIME, yourTiming: 0 });\n      }\n      if (mode === GameMode.SPEED_MODE) {\n        setGameTiming({ timing: 0 });\n      }\n    }\n  }, [location]);\n\n  return {\n    initGame,\n    replayGame,\n    endGame,\n    matrix,\n    row,\n    col,\n    status,\n    level,\n  };\n}\n","import PokemonRow from \"./Game/PokemonRow\";\nimport useGameEngine from \"../hooks/useGameEngine\";\nimport { GameMode } from \"../types/game\";\nimport { FC } from \"react\";\n\nconst GameBoard: FC<{ mode: GameMode }> = ({ mode }) => {\n  const { matrix, row, col } = useGameEngine(mode);\n\n  return (\n    <div className={`game-pokemon board-${row}x${col}`}>\n      {matrix &&\n        matrix.map((pokemons, index) => (\n          <PokemonRow\n            mode={mode}\n            key={`row-${index}`}\n            rowIndex={index}\n            pokemons={pokemons}\n          />\n        ))}\n    </div>\n  );\n};\n\nexport default GameBoard;\n","import { FC, memo, useEffect, useRef } from \"react\";\nimport { PointCoords } from \"../../types/game\";\n\ntype LineCardProps = {\n  point?: PointCoords;\n  rowIndex: number;\n  colIndex: number;\n};\n\nconst LineCard: FC<LineCardProps> = ({ point, rowIndex, colIndex }) => {\n  const type = point && point.type ? `${point.type}-point` : \"\";\n  const direction =\n    point && point.direction ? `${point.direction}-direction` : \"\";\n  const pointClass = point ? `in-line ${direction} ${type}` : \"\";\n  const lineRef = useRef<HTMLDivElement>(null);\n  useEffect(() => {\n    setTimeout(() => {\n      if (lineRef.current) {\n        direction && lineRef.current.classList.remove(direction);\n        type && lineRef.current.classList.remove(type);\n      }\n    }, 300);\n    return () => {};\n  }, [lineRef, direction, type]);\n\n  return (\n    <div ref={lineRef} className={`line-card ${pointClass}`}>\n      <strong>\n        {rowIndex},{colIndex}\n      </strong>\n    </div>\n  );\n};\n\nfunction propsAreEquals(prevProps: LineCardProps, nextProps: LineCardProps) {\n  if (prevProps.point === undefined && nextProps.point === undefined) {\n    return true;\n  }\n\n  return (\n    prevProps.point?.direction === nextProps.point?.direction &&\n    prevProps.point?.type === nextProps.point?.type\n  );\n}\n\nexport default memo(LineCard, propsAreEquals);\n","import { FC } from \"react\";\nimport { PointCoords, Pokemon } from \"../../types/game\";\nimport { checkPointInLine } from \"../../utils/game\";\nimport LineCard from \"./LineCard\";\n\ntype LineRowProps = {\n  cards: Pokemon[] | number[];\n  rowIndex: number;\n  connectingLinePoints: PointCoords[];\n};\n\nconst LineRow: FC<LineRowProps> = ({\n  cards,\n  rowIndex,\n  connectingLinePoints,\n}) => {\n  return (\n    <>\n      {cards.map((_, colIndex) => (\n        <LineCard\n          key={`card-${colIndex}`}\n          rowIndex={rowIndex}\n          colIndex={colIndex}\n          point={checkPointInLine(connectingLinePoints, { rowIndex, colIndex })}\n        />\n      ))}\n    </>\n  );\n};\n\nexport default LineRow;\n","import { FC } from \"react\";\nimport LineRow from \"./Game/LineRow\";\nimport useGameOverlayEngine from \"../hooks/useGameOverlayEngine\";\nimport { GameMode } from \"../types/game\";\n\ntype GameOverlayProps = {\n  mode: GameMode;\n};\n\nconst GameOverlay: FC<GameOverlayProps> = ({ mode }) => {\n  const { connectingLinePoints, matrix, row, col } = useGameOverlayEngine(mode);\n\n  const columnCards = new Array(col + 2).fill(false);\n\n  return (\n    <div className={`game-overlay board-${row}x${col}`}>\n      {matrix &&\n        matrix.map((_, index) => (\n          <LineRow\n            key={`row-${index}`}\n            cards={columnCards}\n            rowIndex={index}\n            connectingLinePoints={connectingLinePoints}\n          />\n        ))}\n    </div>\n  );\n};\n\nexport default GameOverlay;\n","import { useRecoilValue, useSetRecoilState } from \"recoil\";\nimport gameState from \"../recoil/atoms/gameState\";\nimport gameOverlayState from \"../recoil/atoms/gameOverlayState\";\nimport { useEffect } from \"react\";\nimport gameSoundState from \"../recoil/atoms/gameSoundState\";\nimport { BONUS_TIME, GameMode, PENALTY_TIME } from \"../types/game\";\nimport gameTimingState from \"../recoil/atoms/gameTimingState\";\n\nexport default function useGameOverlayEngine(mode: GameMode) {\n  const { connectingLinePoints } = useRecoilValue(gameOverlayState);\n  const { matrix, row, col, status } = useRecoilValue(gameState);\n  const { playRisingPopSound, playGlugSound } = useRecoilValue(gameSoundState);\n  const setGameTiming = useSetRecoilState(gameTimingState);\n\n  useEffect(() => {\n    if (connectingLinePoints.length === 1) {\n      playGlugSound && playGlugSound();\n      if (mode === GameMode.SPEED_MODE) {\n        setGameTiming((gameTiming) => ({\n          timing: gameTiming.timing + PENALTY_TIME,\n        }));\n      }\n      if (mode === GameMode.SURVIVAL_MODE) {\n        setGameTiming((gameTiming) => ({\n          ...gameTiming,\n          timing: gameTiming.timing - PENALTY_TIME,\n        }));\n      }\n    }\n    if (connectingLinePoints.length > 1) {\n      playRisingPopSound && playRisingPopSound();\n      if (mode === GameMode.SURVIVAL_MODE) {\n        setGameTiming((gameTiming) => ({\n          ...gameTiming,\n          timing: gameTiming.timing + BONUS_TIME,\n        }));\n      }\n    }\n  }, [connectingLinePoints]);\n\n  return {\n    connectingLinePoints,\n    matrix,\n    row,\n    col,\n    status,\n  };\n}\n","import { useEffect } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { useRecoilState, useRecoilValue } from \"recoil\";\n\nimport gameState from \"../../recoil/atoms/gameState\";\nimport gameTimingState from \"../../recoil/atoms/gameTimingState\";\nimport suggestTimingState from \"../../recoil/atoms/suggestTimingState\";\nimport playerState from \"../../recoil/atoms/playerState\";\nimport { GameMode, GameStatus } from \"../../types/game\";\nimport { timeConvert } from \"../../utils/time\";\nimport { useGameActions } from \"../../hooks/useGameActions\";\nimport { hasAnyConnectLine } from \"../../utils/game\";\n\nconst GameSpeedInfo = () => {\n  const { t } = useTranslation();\n  const { level, status } = useRecoilValue(gameState);\n  const [gameTiming, setGameTiming] = useRecoilState(gameTimingState);\n  const [suggestTiming, setSuggestTiming] = useRecoilState(suggestTimingState);\n  const [currentPlayer, setPlayer] = useRecoilState(playerState);\n  const { timing } = gameTiming;\n  const { replayGame } = useGameActions(GameMode.SPEED_MODE);\n\n  useEffect(() => {\n    let timeoutId: NodeJS.Timeout | undefined = undefined;\n\n    if (status === GameStatus.RUNNING) {\n      if (suggestTiming >= 15) {\n        setSuggestTiming(0);\n      }\n\n      timeoutId = setTimeout(() => {\n        setGameTiming({\n          timing: timing + 1,\n        });\n        setSuggestTiming(suggestTiming + 1);\n      }, 1000);\n    }\n    if (status === GameStatus.COMPLETED) {\n      if (timeoutId) clearTimeout(timeoutId);\n      setPlayer({ ...currentPlayer, playerTiming: timing });\n    }\n    return () => {\n      if (timeoutId) clearTimeout(timeoutId);\n    };\n  }, [timing, status]);\n\n  return (\n    <div className=\"game-info\">\n      <h1 className=\"game-title\">\n        {status === GameStatus.COMPLETED\n          ? t(\"Congratulations\") + \" \" + currentPlayer.playerName\n          : t(\"Speed mode\")}\n      </h1>\n      <h3 className=\"game-title\">\n        {t(\"Level\")} {level} / 14\n      </h3>\n      <p className=\"text-center\">\n        {t(\"Your time\")}: {timeConvert(timing)}\n      </p>\n      <p>\n        <button onClick={() => replayGame(currentPlayer.playerName)}>\n          {t(\"Replay\")}\n        </button>\n      </p>\n    </div>\n  );\n};\n\nexport default GameSpeedInfo;\n","import { useTranslation } from \"react-i18next\";\nimport { Link } from \"react-router-dom\";\nimport { Routes } from \"../routes/CONSTANTS\";\nimport GameBoard from \"../components/GameBoard\";\nimport GameOverlay from \"../components/GameOverlay\";\nimport { useRecoilValue } from \"recoil\";\nimport gameSoundState from \"../recoil/atoms/gameSoundState\";\nimport gameState from \"../recoil/atoms/gameState\";\nimport GameSpeedInfo from \"../components/Game/GameSpeedInfo\";\nimport SwitchLanguage from \"../components/SwitchLanguage\";\nimport { GameMode } from \"../types/game\";\nimport { Helmet } from \"react-helmet\";\n\nconst SpeedModePage = () => {\n  const { t } = useTranslation();\n  const { status } = useRecoilValue(gameState);\n  const { playPopUpOnSound } = useRecoilValue(gameSoundState);\n\n  return (\n    <div className=\"game-container\">\n      <Helmet>\n        <meta charSet=\"utf-8\" />\n        <title>Pika pika! - Speed mode board</title>\n      </Helmet>\n      <div className={`game-board game-${status}`}>\n        <GameSpeedInfo />\n        <GameOverlay mode={GameMode.SPEED_MODE} />\n        <GameBoard mode={GameMode.SPEED_MODE} />\n      </div>\n      <div className=\"sidebar\">\n        <GameSpeedInfo />\n        <div>\n          <blockquote className=\"game-helper\">\n            {t(\"Please complete all levels as fast as you can\")}\n          </blockquote>\n          <blockquote className=\"game-helper\">\n            {t(\"Choosing the wrong pair will increase the time\")}\n          </blockquote>\n        </div>\n        <Link to={Routes.SINGLE_PLAYER_PAGE}>\n          <button onClick={() => playPopUpOnSound && playPopUpOnSound()}>\n            {t(\"Back\")}\n          </button>\n        </Link>\n        <p className=\"mobile-helper\">{t(\"Scroll down to play\")}</p>\n        <SwitchLanguage />\n      </div>\n    </div>\n  );\n};\n\nexport default SpeedModePage;\n","import { useEffect } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { useRecoilState, useRecoilValue } from \"recoil\";\nimport { useGameActions } from \"../../hooks/useGameActions\";\nimport gameState from \"../../recoil/atoms/gameState\";\nimport gameTimingState from \"../../recoil/atoms/gameTimingState\";\nimport playerState from \"../../recoil/atoms/playerState\";\nimport { GameMode, GameStatus } from \"../../types/game\";\nimport { timeConvert } from \"../../utils/time\";\n\nconst GameSurvivalInfo = () => {\n  const { t } = useTranslation();\n  const { level, status } = useRecoilValue(gameState);\n  const [gameTiming, setGameTiming] = useRecoilState(gameTimingState);\n  const { timing, yourTiming = 0 } = gameTiming;\n  const [currentPlayer, setPlayer] = useRecoilState(playerState);\n  const { replayGame, endGame } = useGameActions(GameMode.SURVIVAL_MODE);\n\n  useEffect(() => {\n    let timeoutId: NodeJS.Timeout | undefined = undefined;\n\n    if (status === GameStatus.RUNNING) {\n      if (timing <= 0) {\n        if (timeoutId) clearTimeout(timeoutId);\n        endGame();\n      } else {\n        timeoutId = setTimeout(() => {\n          setGameTiming({\n            yourTiming: yourTiming + 1,\n            timing: timing - 1,\n          });\n        }, 1000);\n      }\n    }\n    return () => {\n      if (timeoutId) clearTimeout(timeoutId);\n    };\n  }, [timing, status]);\n\n  useEffect(() => {\n    if (status === GameStatus.COMPLETED) {\n      setPlayer({ ...currentPlayer, playerTiming: yourTiming });\n    }\n  }, [status]);\n\n  return (\n    <div className=\"game-info\">\n      <h1 className=\"game-title\">\n        {status === GameStatus.COMPLETED\n          ? t(\"Congratulations\") + \" \" + currentPlayer.playerName\n          : t(\"Survival mode\")}\n      </h1>\n      <h3 className=\"game-title\">\n        {t(\"Level\")} {level} / 14\n      </h3>\n      <p className=\"text-center\">\n        {t(\"Your time\")}: {yourTiming && timeConvert(yourTiming)}\n      </p>\n      <p className=\"text-center\">\n        {t(\"Remaining time\")}: {timeConvert(timing)}\n      </p>\n      <p>\n        <button onClick={() => replayGame(currentPlayer.playerName)}>\n          {t(\"Replay\")}\n        </button>\n      </p>\n    </div>\n  );\n};\n\nexport default GameSurvivalInfo;\n","import { useTranslation } from \"react-i18next\";\nimport { Link } from \"react-router-dom\";\nimport { Routes } from \"../routes/CONSTANTS\";\nimport GameBoard from \"../components/GameBoard\";\nimport GameOverlay from \"../components/GameOverlay\";\nimport { useRecoilValue } from \"recoil\";\nimport gameSoundState from \"../recoil/atoms/gameSoundState\";\nimport gameState from \"../recoil/atoms/gameState\";\nimport SwitchLanguage from \"../components/SwitchLanguage\";\nimport GameSurvivalInfo from \"../components/Game/GameSurvivalInfo\";\nimport { GameMode } from \"../types/game\";\nimport { Helmet } from \"react-helmet\";\n\nconst SurvivalModePage = () => {\n  const { t } = useTranslation();\n  const { status } = useRecoilValue(gameState);\n  const { playPopUpOnSound } = useRecoilValue(gameSoundState);\n\n  return (\n    <div className=\"game-container\">\n      <Helmet>\n        <meta charSet=\"utf-8\" />\n        <title>Pika pika! - Survival mode board</title>\n      </Helmet>\n      <div className={`game-board game-${status}`}>\n        <GameSurvivalInfo />\n        <GameOverlay mode={GameMode.SURVIVAL_MODE} />\n        <GameBoard mode={GameMode.SURVIVAL_MODE} />\n      </div>\n      <div className=\"sidebar\">\n        <GameSurvivalInfo />\n        <div>\n          <blockquote className=\"game-helper\">\n            {t(\"Try your best not to run out of time as long as possible\")}\n          </blockquote>\n          <blockquote className=\"game-helper\">\n            {t(\"Your time will increase when you match a pair of pokemon\")}\n          </blockquote>\n          <blockquote className=\"game-helper\">\n            {t(\"Choosing the wrong pair will decrease the time\")}\n          </blockquote>\n        </div>\n        <Link to={Routes.SINGLE_PLAYER_PAGE}>\n          <button onClick={() => playPopUpOnSound && playPopUpOnSound()}>\n            {t(\"Back\")}\n          </button>\n        </Link>\n        <p className=\"mobile-helper\">{t(\"Scroll down to play\")}</p>\n        <SwitchLanguage />\n      </div>\n    </div>\n  );\n};\n\nexport default SurvivalModePage;\n","import { useTranslation } from \"react-i18next\";\nimport { Helmet } from \"react-helmet\";\nimport useLocalStorage from \"../hooks/useLocalStorage\";\nimport { useSetRecoilState } from \"recoil\";\nimport playerState from \"../recoil/atoms/playerState\";\nimport { FormEventHandler } from \"react\";\nimport SwitchLanguage from \"../components/SwitchLanguage\";\nimport { useHistory } from \"react-router-dom\";\nimport { Routes } from \"../routes/CONSTANTS\";\n\nconst PlayerPage = () => {\n  const { t } = useTranslation();\n  const history = useHistory();\n  const setPlayer = useSetRecoilState(playerState);\n  const [_, setPlayerName] = useLocalStorage(\"playerName\", \"\");\n\n  const handleSubmit: FormEventHandler<HTMLFormElement> = (event) => {\n    event.preventDefault();\n    const playerName = event.currentTarget.playerName.value;\n    if (playerName && playerName.trim() !== \"\") {\n      if (playerName.match(/^[a-zA-Z0-9 ]*$/gim)) {\n        setPlayerName(playerName);\n        setPlayer({ playerName, playerTiming: 0 });\n        history.push(Routes.MAIN_PAGE);\n      } else {\n        alert(t(\"Accept alphabet and digit only.\"));\n      }\n    } else {\n      alert(t(\"Please enter your name\"));\n    }\n  };\n\n  return (\n    <div className=\"main-board\">\n      <Helmet>\n        <meta charSet=\"utf-8\" />\n        <title>Pika pika! - Player board</title>\n      </Helmet>\n      <div>\n        <form onSubmit={handleSubmit}>\n          <input\n            name=\"playerName\"\n            autoFocus\n            placeholder={t(\"Enter your name here\")}\n            maxLength={20}\n            autoComplete=\"off\"\n          />\n          <button>{t(\"Submit\")}</button>\n        </form>\n        <SwitchLanguage />\n      </div>\n    </div>\n  );\n};\n\nexport default PlayerPage;\n","import { atom } from \"recoil\";\n\nconst toggleSoundState = atom<{ music: number; effect: number }>({\n  key: \"TOGGLE_SOUND\",\n  default: {\n    music: 0,\n    effect: 1,\n  },\n});\n\nexport default toggleSoundState;\n","import { useRecoilState, useRecoilValue } from \"recoil\";\nimport gameSoundState from \"../recoil/atoms/gameSoundState\";\nimport toggleSoundState from \"../recoil/atoms/toggleSoundState\";\n\nconst ToggleSound = () => {\n  const [sound, toggleSound] = useRecoilState(toggleSoundState);\n  const { playDisableSound, playEnableSound } = useRecoilValue(gameSoundState);\n  const classSound = sound.effect ? \"icono-volumeMedium\" : \"icono-volumeMute\";\n\n  return (\n    <div\n      className=\"toggle-sound-effect\"\n      onClick={() => {\n        toggleSound((prevValue) => ({\n          ...prevValue,\n          effect: prevValue.effect === 1 ? 0 : 1,\n        }));\n        if (sound) {\n          playDisableSound && playDisableSound();\n        }\n      }}\n    >\n      <i className={classSound}></i>\n    </div>\n  );\n};\n\nexport default ToggleSound;\n","import { useRecoilState } from \"recoil\";\nimport toggleSoundState from \"../recoil/atoms/toggleSoundState\";\n\nconst ToggleMusic = () => {\n  const [sound, toggleSound] = useRecoilState(toggleSoundState);\n  const classSound = sound.music ? \"icono-blue\" : \"icono-black\";\n\n  return (\n    <div\n      className=\"toggle-music-effect\"\n      onClick={() => {\n        toggleSound((prevValue) => ({\n          ...prevValue,\n          music: prevValue.music === 1 ? 0 : 1,\n        }));\n      }}\n    >\n      <i className={`icono-music ${classSound}`}></i>\n    </div>\n  );\n};\n\nexport default ToggleMusic;\n","import \"./App.css\";\nimport { Switch, Route, useHistory } from \"react-router-dom\";\nimport MainPage from \"./pages/MainPage\";\nimport { Routes } from \"./routes/CONSTANTS\";\nimport SinglePlayerPage from \"./pages/SinglePlayerPage\";\nimport MultiPlayerPage from \"./pages/MultiPlayerPage\";\nimport SpeedModePage from \"./pages/SpeedModePage\";\nimport { useRecoilState, useRecoilValue } from \"recoil\";\nimport gameSoundState from \"./recoil/atoms/gameSoundState\";\nimport { useTranslation } from \"react-i18next\";\nimport i18n from \"./services/i18n\";\nimport { useEffect } from \"react\";\nimport useLocalStorage from \"./hooks/useLocalStorage\";\nimport SurvivalModePage from \"./pages/SurvivalModePage\";\nimport playerState from \"./recoil/atoms/playerState\";\nimport PlayerPage from \"./pages/PlayerPage\";\nimport ToggleSound from \"./components/ToggleSound\";\nimport ToggleMusic from \"./components/ToggleMusic\";\n\nfunction App() {\n  const { t } = useTranslation();\n  const { soundReady } = useRecoilValue(gameSoundState);\n  const history = useHistory();\n  const [currentPlayer, setPlayer] = useRecoilState(playerState);\n  const [language] = useLocalStorage(\"language\", \"vi\");\n  const [prevPlayerName, setPlayerName] = useLocalStorage(\"playerName\", \"\");\n\n  useEffect(() => {\n    i18n.changeLanguage(language);\n  }, [language]);\n\n  useEffect(() => {\n    if (\n      prevPlayerName &&\n      prevPlayerName !== \"\" &&\n      prevPlayerName.match(/^[a-zA-Z0-9 ]*$/gim)\n    ) {\n      if (\n        currentPlayer.playerName.trim() !== \"\" &&\n        currentPlayer.playerName.match(/^[a-zA-Z0-9 ]*$/gim)\n      ) {\n        setPlayer({ playerName: currentPlayer.playerName, playerTiming: 0 });\n      } else {\n        setPlayer({ playerName: prevPlayerName, playerTiming: 0 });\n      }\n    } else {\n      setPlayerName(\"\");\n      history.push(Routes.PLAYER_PAGE);\n    }\n  }, [prevPlayerName]);\n\n  return (\n    <div className=\"app\">\n      {soundReady && (\n        <>\n          <ToggleMusic />\n          <ToggleSound />\n        </>\n      )}\n      {!soundReady && <h1>{t(\"Preparing resource...\")}</h1>}\n      {soundReady && (\n        <Switch>\n          <Route path={Routes.MAIN_PAGE} exact>\n            <MainPage />\n          </Route>\n          <Route path={Routes.SINGLE_PLAYER_PAGE} exact>\n            <SinglePlayerPage />\n          </Route>\n          <Route path={Routes.MULTI_PLAYER_PAGE} exact>\n            <MultiPlayerPage />\n          </Route>\n          <Route path={Routes.SPEED_MODE_PAGE} exact>\n            <SpeedModePage />\n          </Route>\n          <Route path={Routes.SURVIVAL_MODE_PAGE} exact>\n            <SurvivalModePage />\n          </Route>\n          <Route path={Routes.PLAYER_PAGE} exact>\n            <PlayerPage />\n          </Route>\n          <Route path=\"*\">\n            <MainPage />\n          </Route>\n        </Switch>\n      )}\n    </div>\n  );\n}\n\nexport default App;\n","import useSound from \"use-sound\";\nimport { SpriteMap } from \"use-sound/dist/types\";\n\nimport menuOpenSound from \"../assets/sound/menu-open.mp3\";\nimport disableSound from \"../assets/sound/disable-sound.mp3\";\nimport enableSound from \"../assets/sound/enable-sound.mp3\";\nimport onSound from \"../assets/sound/switch-on.mp3\";\nimport offSound from \"../assets/sound/switch-off.mp3\";\nimport biteSound from \"../assets/sound/bite.mp3\";\nimport fanfareSound from \"../assets/sound/fanfare.mp3\";\nimport glugSound from \"../assets/sound/glug-a.mp3\";\nimport risingPopSound from \"../assets/sound/rising-pops.mp3\";\nimport completeGameSound from \"../assets/sound/game-completion.wav\";\nimport failedGameSound from \"../assets/sound/gamers-fail-game.mp3\";\nimport nearlyEndTimeSound from \"../assets/sound/time-limited.wav\";\nimport levelUpSound from \"../assets/sound/levelup.mp3\";\nimport popDownSound from \"../assets/sound/pop-down.mp3\";\nimport popUpOnSound from \"../assets/sound/pop-up-on.mp3\";\nimport popUpOffSound from \"../assets/sound/pop-up-off.mp3\";\nimport youWinSound from \"../assets/sound/you-win.mp3\";\nimport gameSongSound from \"../assets/sound/game-song.mp3\";\nimport { useRecoilValue } from \"recoil\";\nimport toggleSoundState from \"../recoil/atoms/toggleSoundState\";\n\nexport enum Sound {\n  MENU_OPEN = \"MENU_OPEN\",\n  BITE = \"BITE\",\n  DISABLE = \"DISABLE\",\n  ENABLE = \"ENABLE\",\n  ON = \"ON\",\n  OFF = \"OFF\",\n  FANFARE = \"FANFARE\",\n  GLUG = \"GLUG\",\n  RISING_POP = \"RISING_POP\",\n  COMPLETE_GAME = \"COMPLETE_GAME\",\n  FAIL_GAME = \"FAIL_GAME\",\n  NEARLY_END_TIME = \"NEARLY_END_TIME\",\n  LEVEL_UP = \"LEVEL_UP\",\n  POP_DOWN = \"POP_DOWN\",\n  POP_UP_ON = \"POP_UP_ON\",\n  POP_UP_OFF = \"POP_UP_OFF\",\n  YOU_WIN = \"YOU_WIN\",\n  GAME_SONG = \"GAME_SONG\",\n}\n\ninterface SoundOptions {\n  id?: string;\n  volume?: number;\n  playbackRate?: number;\n  interrupt?: boolean;\n  soundEnabled?: boolean;\n  sprite?: SpriteMap;\n  onload?: () => void;\n}\n\nexport default function usePlaySound(sound?: Sound) {\n  const { music, effect } = useRecoilValue(toggleSoundState);\n  const defaultConfigSound: SoundOptions = {\n    interrupt: true,\n    volume: effect,\n  };\n  let soundPath = menuOpenSound;\n  if (sound) {\n    switch (sound) {\n      case Sound.BITE:\n        soundPath = biteSound;\n        break;\n      case Sound.COMPLETE_GAME:\n        soundPath = completeGameSound;\n        break;\n      case Sound.DISABLE:\n        soundPath = disableSound;\n        break;\n      case Sound.ENABLE:\n        soundPath = enableSound;\n        break;\n      case Sound.ON:\n        soundPath = onSound;\n        break;\n      case Sound.OFF:\n        soundPath = offSound;\n        break;\n      case Sound.FAIL_GAME:\n        soundPath = failedGameSound;\n        break;\n      case Sound.GLUG:\n        soundPath = glugSound;\n        break;\n      case Sound.FANFARE:\n        soundPath = fanfareSound;\n        break;\n      case Sound.RISING_POP:\n        soundPath = risingPopSound;\n        break;\n      case Sound.NEARLY_END_TIME:\n        soundPath = nearlyEndTimeSound;\n        break;\n      case Sound.LEVEL_UP:\n        soundPath = levelUpSound;\n        break;\n      case Sound.POP_DOWN:\n        soundPath = popDownSound;\n        break;\n      case Sound.POP_UP_ON:\n        soundPath = popUpOnSound;\n        break;\n      case Sound.POP_UP_OFF:\n        soundPath = popUpOffSound;\n        break;\n      case Sound.YOU_WIN:\n        soundPath = youWinSound;\n        break;\n      case Sound.GAME_SONG:\n        soundPath = gameSongSound;\n        // defaultConfigSound.volume = music;\n        break;\n      default:\n        soundPath = menuOpenSound;\n        break;\n    }\n  }\n\n  const [\n    play,\n    { sound: loadedSound, stop: stopSound, pause: pauseSound, duration },\n  ] = useSound(soundPath, defaultConfigSound);\n\n  return {\n    playSound: play,\n    loadedSound,\n    stopSound,\n    pauseSound,\n    duration,\n    music,\n    effect,\n  };\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","export default __webpack_public_path__ + \"static/media/menu-open.019cf647.mp3\";","export default __webpack_public_path__ + \"static/media/disable-sound.477d0574.mp3\";","export default __webpack_public_path__ + \"static/media/enable-sound.00d0be95.mp3\";","export default __webpack_public_path__ + \"static/media/switch-on.88d10ee7.mp3\";","export default __webpack_public_path__ + \"static/media/switch-off.e5ebe933.mp3\";","export default __webpack_public_path__ + \"static/media/bite.aea7caff.mp3\";","export default __webpack_public_path__ + \"static/media/fanfare.8807360a.mp3\";","export default __webpack_public_path__ + \"static/media/glug-a.b9f1fa99.mp3\";","export default __webpack_public_path__ + \"static/media/rising-pops.7eda816b.mp3\";","export default __webpack_public_path__ + \"static/media/game-completion.a7022fca.wav\";","export default __webpack_public_path__ + \"static/media/gamers-fail-game.1bab0c1d.mp3\";","export default __webpack_public_path__ + \"static/media/time-limited.3894918f.wav\";","export default __webpack_public_path__ + \"static/media/levelup.3dc0430f.mp3\";","export default __webpack_public_path__ + \"static/media/pop-down.cc0a5518.mp3\";","export default __webpack_public_path__ + \"static/media/pop-up-on.b776a1ef.mp3\";","export default __webpack_public_path__ + \"static/media/pop-up-off.83c6ba5b.mp3\";","export default __webpack_public_path__ + \"static/media/you-win.70d95733.mp3\";","export default __webpack_public_path__ + \"static/media/game-song.c7ee5596.mp3\";","import { memo, useEffect } from \"react\";\nimport { useSetRecoilState } from \"recoil\";\nimport usePlaySound, { Sound } from \"../../hooks/usePlaySound\";\nimport gameSoundState from \"../../recoil/atoms/gameSoundState\";\n\nconst BiteSound = () => {\n  const { playSound: playBiteSound, loadedSound } = usePlaySound(Sound.BITE);\n  const setSounds = useSetRecoilState(gameSoundState);\n  useEffect(() => {\n    if (loadedSound !== null) {\n      setSounds((sounds) => ({ ...sounds, playBiteSound }));\n    }\n  }, [loadedSound, playBiteSound, setSounds]);\n  return null;\n};\n\nfunction areLoaded() {\n  return true;\n}\n\nexport default memo(BiteSound, areLoaded);\n","import { useEffect } from \"react\";\nimport { useSetRecoilState } from \"recoil\";\nimport usePlaySound, { Sound } from \"../../hooks/usePlaySound\";\nimport gameSoundState from \"../../recoil/atoms/gameSoundState\";\n\nconst CompletedGameSound = () => {\n  const { playSound: playCompletedGameSound, loadedSound } = usePlaySound(\n    Sound.COMPLETE_GAME\n  );\n  const setSounds = useSetRecoilState(gameSoundState);\n  useEffect(() => {\n    if (loadedSound !== null) {\n      setSounds((sounds) => ({ ...sounds, playCompletedGameSound }));\n    }\n  }, [loadedSound, setSounds, playCompletedGameSound]);\n  return null;\n};\n\nexport default CompletedGameSound;\n","import { useEffect } from \"react\";\nimport { useSetRecoilState } from \"recoil\";\nimport usePlaySound, { Sound } from \"../../hooks/usePlaySound\";\nimport gameSoundState from \"../../recoil/atoms/gameSoundState\";\n\nconst OpenMenuSound = () => {\n  const { playSound: playOpenMenuSound, loadedSound } = usePlaySound(\n    Sound.MENU_OPEN\n  );\n  const setSounds = useSetRecoilState(gameSoundState);\n  useEffect(() => {\n    if (loadedSound !== null) {\n      setSounds((sounds) => ({ ...sounds, playOpenMenuSound }));\n    }\n  }, [loadedSound, setSounds, playOpenMenuSound]);\n  return null;\n};\n\nexport default OpenMenuSound;\n","import { useEffect } from \"react\";\nimport { useSetRecoilState } from \"recoil\";\nimport usePlaySound, { Sound } from \"../../hooks/usePlaySound\";\nimport gameSoundState from \"../../recoil/atoms/gameSoundState\";\n\nconst DisableSound = () => {\n  const { playSound: playDisableSound, loadedSound } = usePlaySound(\n    Sound.DISABLE\n  );\n  const setSounds = useSetRecoilState(gameSoundState);\n  useEffect(() => {\n    if (loadedSound !== null) {\n      setSounds((sounds) => ({ ...sounds, playDisableSound }));\n    }\n  }, [loadedSound, playDisableSound, setSounds]);\n  return null;\n};\n\nexport default DisableSound;\n","import { useEffect } from \"react\";\nimport { useSetRecoilState } from \"recoil\";\nimport usePlaySound, { Sound } from \"../../hooks/usePlaySound\";\nimport gameSoundState from \"../../recoil/atoms/gameSoundState\";\n\nconst EnableSound = () => {\n  const { playSound: playEnableSound, loadedSound } = usePlaySound(\n    Sound.ENABLE\n  );\n  const setSounds = useSetRecoilState(gameSoundState);\n  useEffect(() => {\n    if (loadedSound !== null) {\n      setSounds((sounds) => ({ ...sounds, playEnableSound }));\n    }\n  }, [loadedSound, playEnableSound, setSounds]);\n  return null;\n};\n\nexport default EnableSound;\n","import { useEffect } from \"react\";\nimport { useSetRecoilState } from \"recoil\";\nimport usePlaySound, { Sound } from \"../../hooks/usePlaySound\";\nimport gameSoundState from \"../../recoil/atoms/gameSoundState\";\n\nconst FanfareSound = () => {\n  const { playSound: playFanfareSound, loadedSound } = usePlaySound(\n    Sound.FANFARE\n  );\n  const setSounds = useSetRecoilState(gameSoundState);\n  useEffect(() => {\n    if (loadedSound !== null) {\n      setSounds((sounds) => ({ ...sounds, playFanfareSound }));\n    }\n  }, [loadedSound, setSounds, playFanfareSound]);\n  return null;\n};\n\nexport default FanfareSound;\n","import { useEffect } from \"react\";\nimport { useSetRecoilState } from \"recoil\";\nimport usePlaySound, { Sound } from \"../../hooks/usePlaySound\";\nimport gameSoundState from \"../../recoil/atoms/gameSoundState\";\n\nconst FailedGameSound = () => {\n  const { playSound: playFailedGameSound, loadedSound } = usePlaySound(\n    Sound.FAIL_GAME\n  );\n  const setSounds = useSetRecoilState(gameSoundState);\n  useEffect(() => {\n    if (loadedSound !== null) {\n      setSounds((sounds) => ({ ...sounds, playFailedGameSound }));\n    }\n  }, [loadedSound, setSounds, playFailedGameSound]);\n  return null;\n};\n\nexport default FailedGameSound;\n","import { useEffect } from \"react\";\nimport { useSetRecoilState } from \"recoil\";\nimport usePlaySound, { Sound } from \"../../hooks/usePlaySound\";\nimport gameSoundState from \"../../recoil/atoms/gameSoundState\";\n\nconst GameSongSound = () => {\n  const {\n    playSound: playGameSong,\n    loadedSound,\n    duration,\n  } = usePlaySound(Sound.GAME_SONG);\n  const setSounds = useSetRecoilState(gameSoundState);\n\n  useEffect(() => {\n    if (loadedSound !== null) {\n      setSounds((sounds) => ({\n        ...sounds,\n        soundReady: true,\n        gameSongDuration: duration ?? 0,\n        playGameSong,\n      }));\n    }\n  }, [loadedSound]);\n\n  return null;\n};\n\nexport default GameSongSound;\n","import { useEffect } from \"react\";\nimport { useSetRecoilState } from \"recoil\";\nimport usePlaySound, { Sound } from \"../../hooks/usePlaySound\";\nimport gameSoundState from \"../../recoil/atoms/gameSoundState\";\n\nconst LevelUpSound = () => {\n  const { playSound: playLevelUpSound, loadedSound } = usePlaySound(\n    Sound.LEVEL_UP\n  );\n  const setSounds = useSetRecoilState(gameSoundState);\n  useEffect(() => {\n    if (loadedSound !== null) {\n      setSounds((sounds) => ({ ...sounds, playLevelUpSound }));\n    }\n  }, [loadedSound, setSounds, playLevelUpSound]);\n  return null;\n};\n\nexport default LevelUpSound;\n","import { useEffect } from \"react\";\nimport { useSetRecoilState } from \"recoil\";\nimport usePlaySound, { Sound } from \"../../hooks/usePlaySound\";\nimport gameSoundState from \"../../recoil/atoms/gameSoundState\";\n\nconst NearlyEndTimeSound = () => {\n  const { playSound: playNearlyEndTimeSound, loadedSound } = usePlaySound(\n    Sound.NEARLY_END_TIME\n  );\n  const setSounds = useSetRecoilState(gameSoundState);\n  useEffect(() => {\n    if (loadedSound !== null) {\n      setSounds((sounds) => ({ ...sounds, playNearlyEndTimeSound }));\n    }\n  }, [loadedSound, setSounds, playNearlyEndTimeSound]);\n  return null;\n};\n\nexport default NearlyEndTimeSound;\n","import { useEffect } from \"react\";\nimport { useSetRecoilState } from \"recoil\";\nimport usePlaySound, { Sound } from \"../../hooks/usePlaySound\";\nimport gameSoundState from \"../../recoil/atoms/gameSoundState\";\n\nconst OffSound = () => {\n  const { playSound: playOffSound, loadedSound } = usePlaySound(Sound.OFF);\n  const setSounds = useSetRecoilState(gameSoundState);\n  useEffect(() => {\n    if (loadedSound !== null) {\n      setSounds((sounds) => ({ ...sounds, playOffSound }));\n    }\n  }, [loadedSound, playOffSound, setSounds]);\n  return null;\n};\n\nexport default OffSound;\n","import { useEffect } from \"react\";\nimport { useSetRecoilState } from \"recoil\";\nimport usePlaySound, { Sound } from \"../../hooks/usePlaySound\";\nimport gameSoundState from \"../../recoil/atoms/gameSoundState\";\n\nconst OnSound = () => {\n  const { playSound: playOnSound, loadedSound } = usePlaySound(Sound.ON);\n  const setSounds = useSetRecoilState(gameSoundState);\n  useEffect(() => {\n    if (loadedSound !== null) {\n      setSounds((sounds) => ({ ...sounds, playOnSound }));\n    }\n  }, [loadedSound, playOnSound, setSounds]);\n  return null;\n};\n\nexport default OnSound;\n","import { useEffect } from \"react\";\nimport { useSetRecoilState } from \"recoil\";\nimport usePlaySound, { Sound } from \"../../hooks/usePlaySound\";\nimport gameSoundState from \"../../recoil/atoms/gameSoundState\";\n\nconst PopDownSound = () => {\n  const { playSound: playPopDownSound, loadedSound } = usePlaySound(\n    Sound.POP_DOWN\n  );\n  const setSounds = useSetRecoilState(gameSoundState);\n  useEffect(() => {\n    if (loadedSound !== null) {\n      setSounds((sounds) => ({ ...sounds, playPopDownSound }));\n    }\n  }, [loadedSound, setSounds, playPopDownSound]);\n  return null;\n};\n\nexport default PopDownSound;\n","import { useEffect } from \"react\";\nimport { useSetRecoilState } from \"recoil\";\nimport usePlaySound, { Sound } from \"../../hooks/usePlaySound\";\nimport gameSoundState from \"../../recoil/atoms/gameSoundState\";\n\nconst PopUpOffSound = () => {\n  const { playSound: playPopUpOffSound, loadedSound } = usePlaySound(\n    Sound.POP_UP_OFF\n  );\n  const setSounds = useSetRecoilState(gameSoundState);\n  useEffect(() => {\n    if (loadedSound !== null) {\n      setSounds((sounds) => ({ ...sounds, playPopUpOffSound }));\n    }\n  }, [loadedSound, setSounds, playPopUpOffSound]);\n  return null;\n};\n\nexport default PopUpOffSound;\n","import { useEffect } from \"react\";\nimport { useSetRecoilState } from \"recoil\";\nimport usePlaySound, { Sound } from \"../../hooks/usePlaySound\";\nimport gameSoundState from \"../../recoil/atoms/gameSoundState\";\n\nconst PopUpOnSound = () => {\n  const { playSound: playPopUpOnSound, loadedSound } = usePlaySound(\n    Sound.POP_UP_ON\n  );\n  const setSounds = useSetRecoilState(gameSoundState);\n  useEffect(() => {\n    if (loadedSound !== null) {\n      setSounds((sounds) => ({ ...sounds, playPopUpOnSound }));\n    }\n  }, [loadedSound, setSounds, playPopUpOnSound]);\n  return null;\n};\n\nexport default PopUpOnSound;\n","import { useEffect } from \"react\";\nimport { useSetRecoilState } from \"recoil\";\nimport usePlaySound, { Sound } from \"../../hooks/usePlaySound\";\nimport gameSoundState from \"../../recoil/atoms/gameSoundState\";\n\nconst YouWinSound = () => {\n  const { playSound: playYouWinSound, loadedSound } = usePlaySound(\n    Sound.YOU_WIN\n  );\n  const setSounds = useSetRecoilState(gameSoundState);\n  useEffect(() => {\n    if (loadedSound !== null) {\n      setSounds((sounds) => ({ ...sounds, playYouWinSound }));\n    }\n  }, [loadedSound, playYouWinSound, setSounds]);\n  return null;\n};\n\nexport default YouWinSound;\n","import { useEffect } from \"react\";\nimport { useSetRecoilState } from \"recoil\";\nimport usePlaySound, { Sound } from \"../../hooks/usePlaySound\";\nimport gameSoundState from \"../../recoil/atoms/gameSoundState\";\n\nconst RisingPopSound = () => {\n  const { playSound: playRisingPopSound, loadedSound } = usePlaySound(\n    Sound.RISING_POP\n  );\n  const setSounds = useSetRecoilState(gameSoundState);\n  useEffect(() => {\n    if (loadedSound !== null) {\n      setSounds((sounds) => ({ ...sounds, playRisingPopSound }));\n    }\n  }, [loadedSound, playRisingPopSound, setSounds]);\n  return null;\n};\n\nexport default RisingPopSound;\n","import ReactPlayer from \"react-player/youtube\";\nimport { useRecoilValue } from \"recoil\";\nimport toggleSoundState from \"../../recoil/atoms/toggleSoundState\";\n\nconst YoutubeThemeSong = () => {\n  const { music } = useRecoilValue(toggleSoundState);\n  return (\n    <div className=\"game-theme\">\n      <ReactPlayer\n        url=\"https://www.youtube.com/watch?v=6ZUDiC6TB-k\"\n        playing={music ? true : false}\n        loop\n      />\n    </div>\n  );\n};\n\nexport default YoutubeThemeSong;\n","import { FC, useEffect } from \"react\";\nimport BiteSound from \"./Sound/BiteSound\";\nimport CompletedGameSound from \"./Sound/CompletedGameSound\";\nimport OpenMenuSound from \"./Sound/OpenMenuSound\";\nimport DisableSound from \"./Sound/DisableSound\";\nimport EnableSound from \"./Sound/EnableSound\";\nimport FanfareSound from \"./Sound/FanfareSound\";\nimport FailedGameSound from \"./Sound/FailedGameSound\";\nimport GameSongSound from \"./Sound/GameSongSound\";\nimport LevelUpSound from \"./Sound/LevelUpSound\";\nimport NearlyEndTimeSound from \"./Sound/NearlyEndTimeSound\";\nimport OffSound from \"./Sound/OffSound\";\nimport OnSound from \"./Sound/OnSound\";\nimport PopDownSound from \"./Sound/PopDownSound\";\nimport PopUpOffSound from \"./Sound/PopUpOffSound\";\nimport PopUpOnSound from \"./Sound/PopUpOnSound\";\nimport YouWinSound from \"./Sound/YouWinSound\";\nimport RisingPopSound from \"./Sound/RisingPopSound\";\nimport YoutubeThemeSong from \"./Sound/YoutubeThemeSong\";\n\nconst SoundProvider: FC = ({ children }) => {\n  return (\n    <>\n      <YoutubeThemeSong />\n      <BiteSound />\n      <CompletedGameSound />\n      <DisableSound />\n      <EnableSound />\n      <FailedGameSound />\n      <FanfareSound />\n      <GameSongSound />\n      <LevelUpSound />\n      <NearlyEndTimeSound />\n      <OffSound />\n      <OnSound />\n      <OpenMenuSound />\n      <PopDownSound />\n      <PopUpOffSound />\n      <PopUpOnSound />\n      <RisingPopSound />\n      <YouWinSound />\n      {children}\n    </>\n  );\n};\n\nexport default SoundProvider;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { HashRouter as Router } from \"react-router-dom\";\nimport { RecoilRoot } from \"recoil\";\nimport SoundProvider from \"./components/SoundProvider\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <RecoilRoot>\n      <SoundProvider>\n        <Router>\n          <App />\n        </Router>\n      </SoundProvider>\n    </RecoilRoot>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}