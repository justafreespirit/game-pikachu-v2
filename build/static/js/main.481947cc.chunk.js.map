{"version":3,"sources":["routes/CONSTANTS.ts","types/game.ts","recoil/atoms/gameSoundState.ts","hooks/useLocalStorage.ts","services/i18n.ts","components/SwitchLanguage.tsx","recoil/atoms/playerState.ts","utils/game.ts","components/Welcome.tsx","hooks/useAsync.ts","pages/MainPage.tsx","api/CONSTANTS.ts","api/ranking.ts","utils/time.ts","components/Rank/TopList.tsx","components/RankBoard.tsx","recoil/atoms/gameState.ts","recoil/atoms/gameOverlayState.ts","recoil/atoms/selectedPokemonsState.ts","recoil/selectors/selectedPokemonsSelector.ts","hooks/useGameActions.ts","pages/SinglePlayerPage.tsx","types/chat.ts","recoil/atoms/messagesState.ts","components/Chat/ChatBox.tsx","components/Chat/Message.tsx","components/Chat/MessagesBox.tsx","api/user.ts","utils/memo.ts","components/Chat/ActivePlayer.tsx","components/Chat/ListActivePlayers.tsx","recoil/atoms/gameSupportState.ts","recoil/atoms/chatSocketState.ts","api/game.ts","components/Chat/ActiveGame.tsx","components/Chat/ListActiveGames.tsx","components/ChatRoom.tsx","hooks/useChatSocket.ts","recoil/atoms/gameBattleState.ts","pages/MultiPlayerPage.tsx","components/Game/PokemonCard.tsx","components/Game/PokemonRow.tsx","hooks/useGameEngine.ts","components/GameBoard.tsx","components/Game/LineCard.tsx","components/Game/LineRow.tsx","components/GameOverlay.tsx","hooks/useGameOverlayEngine.ts","components/Game/GameLevel.tsx","components/Game/GameTiming.tsx","components/Game/GameTitle.tsx","components/Game/GameReplay.tsx","components/Game/GameSpeedInfo.tsx","pages/SpeedModePage.tsx","components/Game/GameSurvivalTiming.tsx","components/Game/GameSurvivalInfo.tsx","pages/SurvivalModePage.tsx","pages/PlayerPage.tsx","recoil/atoms/toggleSoundState.ts","components/ToggleSound.tsx","components/ToggleMusic.tsx","components/Game/CompetitorReadyGameButton.tsx","recoil/atoms/gameBattlePointsState.ts","hooks/useGameBattleActions.ts","components/Game/GameBattleBar.tsx","components/Game/PokemonBattleCard.tsx","components/Game/PokemonBattleRow.tsx","hooks/useGameBattleEngine.ts","components/GameBattleBoard.tsx","components/Game/GameBattleSocket.tsx","hooks/useGameBattleSocket.ts","components/Game/GamePendingTiming.tsx","components/Game/GameBoardContainer.tsx","components/Game/ReadyGameButton.tsx","components/Game/GameBattleContainner.tsx","pages/BattleModePage.tsx","App.tsx","hooks/usePlaySound.ts","reportWebVitals.ts","assets/sound/menu-open.mp3","assets/sound/disable-sound.mp3","assets/sound/enable-sound.mp3","assets/sound/switch-on.mp3","assets/sound/switch-off.mp3","assets/sound/bite.mp3","assets/sound/fanfare.mp3","assets/sound/glug-a.mp3","assets/sound/rising-pops.mp3","assets/sound/game-completion.wav","assets/sound/gamers-fail-game.mp3","assets/sound/time-limited.wav","assets/sound/levelup.mp3","assets/sound/pop-down.mp3","assets/sound/pop-up-on.mp3","assets/sound/pop-up-off.mp3","assets/sound/you-win.mp3","assets/sound/game-song.mp3","components/Sound/BiteSound.tsx","components/Sound/CompletedGameSound.tsx","components/Sound/OpenMenuSound.tsx","components/Sound/DisableSound.tsx","components/Sound/EnableSound.tsx","components/Sound/FanfareSound.tsx","components/Sound/FailedGameSound.tsx","components/Sound/GameSongSound.tsx","components/Sound/LevelUpSound.tsx","components/Sound/NearlyEndTimeSound.tsx","components/Sound/OffSound.tsx","components/Sound/OnSound.tsx","components/Sound/PopDownSound.tsx","components/Sound/PopUpOffSound.tsx","components/Sound/PopUpOnSound.tsx","components/Sound/YouWinSound.tsx","components/Sound/RisingPopSound.tsx","components/Sound/YoutubeThemeSong.tsx","components/Sound/GlugSound.tsx","components/SoundProvider.tsx","index.tsx"],"names":["Routes","GameSelector","GameMode","GameTypeState","GameStatus","SocketCommand","GameBattleStatus","GameSocketEvents","ChatSocketEvents","Direction","PointType","GameLevel","GameBattleEffect","gameOptions","LEVEL_1","row","col","LEVEL_2","LEVEL_3","LEVEL_4","LEVEL_5","LEVEL_6","LEVEL_7","LEVEL_8","LEVEL_9","LEVEL_10","LEVEL_11","LEVEL_12","LEVEL_13","LEVEL_14","nextLevel","gameBattleEffect","LEVEL_UP","FREEZE","LEVEL_MAX","LEVEL_BATTLE_MAX","gameSoundState","atom","key","GAME_SOUND_STATE","default","soundReady","gameSongDuration","playOpenMenuSound","undefined","playEnableSound","playDisableSound","playCompletedGameSound","playFailedGameSound","playBiteSound","playRisingPopSound","playFanfareSound","playGlugSound","playNearlyEndTimeSound","playOffSound","playOnSound","playLevelUpSound","playPopDownSound","playPopUpOnSound","playPopUpOffSound","playYouWinSound","playGameSong","useLocalStorage","initialValue","useState","item","window","localStorage","getItem","JSON","parse","error","console","log","storedValue","setStoredValue","value","valueToStore","Function","setItem","stringify","i18n","use","initReactI18next","init","resources","en","translation","English","Vietnamese","Back","Replay","Language","Level","Welcome","Congratulations","Submit","Out","Quit","Ready","Stop","You","Competitor","Join","vi","lng","fallbackLng","interpolation","escapeValue","SwitchLanguage","t","useTranslation","useRecoilValue","setStorageValue","changeLanguage","className","onClick","playerState","PLAYER_STATE","rankingId","player","playerTiming","BASE_URL","pokemonList","id","matched","image","shufflePokemonList","nonShuffleList","shuffledPokemonList","sort","Math","random","shuffledlistPokemon","map","pokemon","nid","nanoid","reShufflePokemonList","arrayPokemons","objectList","arrayList","Object","keys","push","convertObjectToArrayList","makeListPokemons","total","slicePokemonList","slice","nonShufflePokemonList","generatePokemonMatrix","pokemons","rowSetting","colSetting","newPokemons","totalCol","totalRow","pokemonKeys","pokemonMatrix","borderPoint","pokemonKey","pop","rowIndex","colIndex","hasConnectLine","point1","point2","matrix","pathPoints","fromPoint","toPoint","matrixTotalRow","matrixTotalCol","tempMatrix","newMatrix","length","i","cloneMatrix","matrixPoints","matrixTrackingPoints","dRow","dCol","queue","currentPoint","shift","index","trackedPoints","trackPoint","findPath","connected","checkPointInLine","connectingLinePoints","currentPosition","find","matchingLinePoint","checkConnectionSelectedPokemons","selectedPokemons","newSelectedPokemons","selectedPokemon1","selectedPokemon2","limitRow","limitCol","reduce","newPathPoints","arrayPoints","type","LINE","direction","prevIndex","END","prevPoint","TOP","BOTTOM","LEFT","RIGHT","extraPoint","START","newCurrentPoint","drawPath","checkCompletedLevel","entries","findIndex","hasAnyConnectLine","foundConnectLine","entriesPokemons","entryPokemon","currentPokemon","some","getPlayerName","replace","getPlayerID","ResponseStatus","MainPage","Helmet","charSet","to","SINGLE_PLAYER_PAGE","MULTI_PLAYER_PAGE","BASE_API","defaultFetchOptions","method","mode","cache","credentials","headers","redirect","referrerPolicy","getTopRanking","fetch","then","res","json","response","useAsync","asyncFunction","immediate","IDLE","status","setStatus","setValue","setError","execute","useCallback","PENDING","SUCCESS","catch","ERROR","useEffect","timeConvert","num","minutes","floor","toString","padStart","dateTimeFromTimestamp","timestamp","Date","toLocaleString","TopList","topPlayersResponse","data","SPEED_MODE","SPEED_MODE_PAGE","style","width","margin","SURVIVAL_MODE_PAGE","topPlayer","timing","RankBoard","SURVIVAL_MODE","memo","gameState","GAME_STATE","level","gameOverlayState","GAME_OVERLAY_STATE","suggestPoints","freezing","selectedPokemonsState","SELECTED_POKEMONS","selectedPokemonsSelector","selector","SELECTED_POKEMONS_SELECTOR","get","set","newValue","cloneSelectedPokemons","useGameActions","setGame","useSetRecoilState","setPlayer","setSelectedPokemons","resetGameState","useResetRecoilState","resetGameOverlayState","resetSelectedPokemonsState","initGame","replayGame","startGame","prevGame","RUNNING","endGame","COMPLETED","selectPokemon","pokemonId","resetGame","addNewRankingScore","fetchOptions","body","addNewRanking","now","prevPlayer","updateNewRankingScore","updateNewRanking","ChatTypeState","SinglePlayerPage","MAIN_PAGE","DEFAULT_CHANNEL","BASE_WS_URL","messagesState","MESSAGES_STATE","messages","ChatBox","handleSubmit","throttle","setThrottle","onSubmit","event","setTimeout","alert","name","placeholder","autoFocus","autoComplete","Message","message","history","useHistory","gameId","content","match","selfClass","BATTLE_MODE_PAGE","isOldMessage","prevProps","nextProps","MessagesBox","useRecoilState","setMessages","messagesBox","document","getElementById","scrollTo","behavior","top","scrollHeight","getActivePlayers","preventReRender","ActivePlayer","areSameProps","ListActivePlayers","activePlayersResponse","timeoutId","clearTimeout","activePlayer","gameSupportState","GAME_SUPPORT_STATE","supported","tutorial","chatSocketState","CHAT_SOCKET_STATE","sendMakeGame","getActiveGames","getPlayersInGame","ActiveGame","fetchPlayersInGame","fetchStatus","playersInGameResponse","fullGameClass","ListActiveGames","activeGamesResponse","ChatRoom","room","setGameSupport","setMessagesState","setChatSocketState","socketUrl","useWebSocket","reconnectAttempts","reconnectInterval","retryOnError","shouldReconnect","queryParams","username","onOpen","helpMessage","command","channel","sendJsonMessage","gameSupport","onMessage","onClose","closeMessage","onError","readyState","lastJsonMessage","lastMessage","baseMessageJson","SEND_MESSAGE","messageJson","useChatSocket","handleClickSendMessage","ReadyState","OPEN","preventDefault","inputMessage","currentTarget","setAttribute","trim","replaceAll","removeAttribute","focus","CLOSED","CLOSING","CONNECTING","includes","location","reload","areEqualProps","gameBattleState","GAME_BATTLE_STATE","allReady","competitor","winner","socketStatus","UNINSTANTIATED","sendSelectedPokemon","sendReadyGame","sendUnReadyGame","sendQuitGame","sendJoinedGame","sendDecreasePoints","sendIncreasePoints","sendGameEffect","sendGameWinner","MultiPlayerPage","resetGameBattle","matchId","maxLength","PokemonCard","isSelected","selected","hidden","backgroundImage","propsAreEquals","PokemonRow","useGameEngine","useLocation","currentPlayer","levelUp","newShufflePokemons","shuffleMatrix","GameBoard","LineCard","point","suggested","pointClass","suggestedClass","lineRef","useRef","current","classList","remove","ref","LineRow","cards","_","suggestPoint","GameOverlay","setGameOverlayState","useGameOverlayEngine","columnCards","Array","fill","freezingClass","FREEZING_TIME","GameTiming","hasTiming","setGameOverlay","timingState","setTimingState","suggestTiming","pendingTiming","gameOverlay","intervalId","countdownEl","innerText","setInterval","clearInterval","GameTitle","title","GameReplay","action","GameSpeedInfo","SpeedModePage","GameSurvivalTiming","remainTiming","GameSurvivalInfo","SurvivalModePage","PlayerPage","saveLocalPlayerName","playerName","newPlayer","toggleSoundState","music","effect","ToggleSound","sound","toggleSound","classSound","prevValue","ToggleMusic","CompetitorReadyGameButton","classReady","gameBattlePointsState","GAME_BATTLE_POINTS_STATE","competitorPoint","yourPoint","useGameBattleActions","setGameBattle","setGameBattlePoints","resetGameBattlePoints","gameBattle","reSetupGame","onReadyGame","READY","selectBattlePokemon","pendingGame","increaseYourPoints","gameBattlePoints","decreaseYourPoints","levelUpYourPoints","handleSocketEvents","UNREADY","filter","playerReady","JOINED","QUIT","INCREASE_COMPETITOR_POINTS","DECREASE_COMPETITOR_POINTS","FREEZE_COMPETITOR_BOARD","LEVEL_UP_POINTS","GAME_WINNER","GameBattleBar","yourWidth","PokemonBattleRow","PokemonBattleCard","useGameBattleEngine","competitorRef","useLayoutEffect","sendQuitBeforeOut","addEventListener","removeEventListener","newLevel","effectEvent","randomEffectEvent","GameBattleBoard","GameBattleSocket","setGameBattleState","joinMessage","messageData","freeJson","levelUpJson","useGameBattleSocket","areEqualGame","GamePendingTiming","winnerPlayerName","second","GameBoardContainer","ReadyGameButton","GameBattleContainer","BattleModePage","useParams","playersInGame","App","Sound","language","localPlayer","PLAYER_PAGE","path","exact","reportWebVitals","onPerfEntry","getCLS","getFID","getFCP","getLCP","getTTFB","usePlaySound","defaultConfigSound","interrupt","volume","soundPath","menuOpenSound","BITE","biteSound","COMPLETE_GAME","completeGameSound","DISABLE","disableSound","ENABLE","enableSound","ON","onSound","OFF","offSound","FAIL_GAME","failedGameSound","GLUG","glugSound","FANFARE","fanfareSound","RISING_POP","risingPopSound","NEARLY_END_TIME","nearlyEndTimeSound","levelUpSound","POP_DOWN","popDownSound","POP_UP_ON","popUpOnSound","POP_UP_OFF","popUpOffSound","YOU_WIN","youWinSound","GAME_SONG","gameSongSound","useSound","play","playSound","loadedSound","stopSound","stop","pauseSound","pause","duration","BiteSound","setSounds","sounds","areLoaded","CompletedGameSound","OpenMenuSound","MENU_OPEN","DisableSound","EnableSound","FanfareSound","FailedGameSound","GameSongSound","LevelUpSound","NearlyEndTimeSound","OffSound","OnSound","PopDownSound","PopUpOffSound","PopUpOnSound","YouWinSound","RisingPopSound","YoutubeThemeSong","url","playing","loop","GlugSound","SoundProvider","children","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.481947cc.chunk.js","sourcesContent":["export enum Routes {\n  MAIN_PAGE = \"/\",\n  PLAYER_PAGE = \"/player\",\n  SINGLE_PLAYER_PAGE = \"/single-player\",\n  MULTI_PLAYER_PAGE = \"/multi-player\",\n  SURVIVAL_MODE_PAGE = \"/survival-mode\",\n  SPEED_MODE_PAGE = \"/speed-mode\",\n  BATTLE_MODE_PAGE = \"/battle-mode/:gameId\",\n}\n","import { ReadyState } from \"react-use-websocket\";\nimport { PlayFunction } from \"use-sound/dist/types\";\n\nexport enum GameSelector {\n  SELECTED_POKEMONS_SELECTOR = \"SELECTED_POKEMONS_SELECTOR\",\n}\n\nexport interface PlayerState {\n  rankingId?: string;\n  player: string;\n  playerTiming: number;\n}\n\nexport interface Pokemon {\n  id: string;\n  matched: boolean;\n  nid?: string;\n  image?: string;\n  rowIndex?: number;\n  colIndex?: number;\n}\n\nexport enum GameMode {\n  SURVIVAL_MODE = \"survival\",\n  SPEED_MODE = \"speed\",\n}\n\nexport interface GameSound {\n  soundReady: boolean;\n  gameSongDuration: number;\n  playOpenMenuSound?: PlayFunction;\n  playDisableSound?: PlayFunction;\n  playEnableSound?: PlayFunction;\n  playCompletedGameSound?: PlayFunction;\n  playFailedGameSound?: PlayFunction;\n  playBiteSound?: PlayFunction;\n  playOnSound?: PlayFunction;\n  playOffSound?: PlayFunction;\n  playGlugSound?: PlayFunction;\n  playFanfareSound?: PlayFunction;\n  playRisingPopSound?: PlayFunction;\n  playNearlyEndTimeSound?: PlayFunction;\n  playLevelUpSound?: PlayFunction;\n  playPopUpOnSound?: PlayFunction;\n  playPopUpOffSound?: PlayFunction;\n  playPopDownSound?: PlayFunction;\n  playYouWinSound?: PlayFunction;\n  playGameSong?: PlayFunction;\n}\n\nexport enum GameTypeState {\n  PLAYER_STATE = \"PLAYER_STATE\",\n  GAME_STATE = \"GAME_STATE\",\n  GAME_SOUND_STATE = \"GAME_SOUND_STATE\",\n  GAME_OVERLAY_STATE = \"GAME_OVERLAY_STATE\",\n  GAME_BATTLE_STATE = \"GAME_BATTLE_STATE\",\n  SELECTED_POKEMONS = \"SELECTED_POKEMONS\",\n  CHAT_SOCKET_STATE = \"CHAT_SOCKET_STATE\",\n  GAME_SUPPORT_STATE = \"GAME_SUPPORT_STATE\",\n  GAME_BATTLE_POINTS_STATE = \"GAME_BATTLE_POINTS_STATE\",\n}\n\nexport enum GameStatus {\n  RUNNING = \"running\",\n  PENDING = \"pending\",\n  READY = \"ready\",\n  COMPLETED = \"completed\",\n  FAILED = \"failed\",\n}\n\nexport interface GameState {\n  status: GameStatus;\n  row: number;\n  col: number;\n  pokemons: Record<string, Pokemon>;\n  matrix: Pokemon[][];\n  level: GameLevel;\n}\n\nexport interface GameOverlayState {\n  connectingLinePoints: PointCoords[];\n  suggestPoints: [PointCoords | undefined, PointCoords | undefined];\n  freezing?: boolean;\n}\n\nexport interface ChatSocketState {\n  sendMakeGame?: (gameId: string) => void;\n}\nexport interface GameBattleState {\n  gameId?: string;\n  allReady: string[];\n  competitor?: string;\n  winner?: string;\n  socketStatus: ReadyState;\n  selectPokemon?: (rowIndex: number, colIndex: number) => void;\n  sendReadyGame?: () => void;\n  sendUnReadyGame?: () => void;\n  sendQuitGame?: () => void;\n  sendJoinedGame?: () => void;\n  sendDecreasePoints?: () => void;\n  sendIncreasePoints?: () => void;\n  sendGameWinner?: (winner: string) => void;\n  sendGameEffect?: (effect: GameBattleEffect) => void;\n  sendSelectedPokemon?: (rowIndex: number, colInddex: number) => void;\n}\n\nexport interface GameBattlePointsState {\n  competitorPoint: number;\n  yourPoint: number;\n}\n\nexport enum SocketCommand {\n  SUBSCRIBE = 0,\n  UNSUBSCRIBE = 1,\n  SEND_MESSAGE = 2,\n}\nexport interface GameSocketMessage {\n  command: SocketCommand;\n  event: GameSocketEvents;\n  player: string;\n  content?: string;\n  match?: string;\n  currentPlayer?: string;\n}\n\nexport interface ChatSocketMessage {\n  command: SocketCommand;\n  channel: string;\n  name: string;\n  content?: string;\n  timestamp?: number;\n}\n\nexport enum GameBattleStatus {\n  READY = \"ready\",\n  END = \"end\",\n}\n\nexport enum GameSocketEvents {\n  READY = \"READY\",\n  UNREADY = \"UNREADY\",\n  QUIT = \"QUIT\",\n  JOINED = \"JOINED\",\n  SELECTED_POKEMON = \"SELECTED_POKEMON\",\n  INCREASE_COMPETITOR_POINTS = \"INCREASE_COMPETITOR_POINTS\",\n  DECREASE_COMPETITOR_POINTS = \"DECREASE_COMPETITOR_POINTS\",\n  FREEZE_COMPETITOR_BOARD = \"FREEZE_COMPETITOR_BOARD\",\n  LEVEL_UP_POINTS = \"LEVEL_UP_POINTS\",\n  GAME_WINNER = \"GAME_WINNER\",\n}\n\nexport enum ChatSocketEvents {\n  MAKE_GAME = \"MAKE_GAME\",\n}\n\nexport enum Direction {\n  LEFT = \"left\",\n  RIGHT = \"right\",\n  TOP = \"top\",\n  BOTTOM = \"bottom\",\n}\n\nexport enum PointType {\n  START = \"start\",\n  END = \"end\",\n  LINE = \"line\",\n}\n\nexport interface PointCoords {\n  rowIndex: number;\n  colIndex: number;\n  direction?: Direction;\n  type?: PointType;\n}\n\nexport interface PokemonCoords extends PointCoords {\n  nid?: string;\n}\n\nexport enum GameLevel {\n  LEVEL_1 = \"1\",\n  LEVEL_2 = \"2\",\n  LEVEL_3 = \"3\",\n  LEVEL_4 = \"4\",\n  LEVEL_5 = \"5\",\n  LEVEL_6 = \"6\",\n  LEVEL_7 = \"7\",\n  LEVEL_8 = \"8\",\n  LEVEL_9 = \"9\",\n  LEVEL_10 = \"10\",\n  LEVEL_11 = \"11\",\n  LEVEL_12 = \"12\",\n  LEVEL_13 = \"13\",\n  LEVEL_14 = \"MAX\",\n}\n\nexport type GameOptions = {\n  [key in GameLevel]: {\n    row: number;\n    col: number;\n  };\n};\n\nexport const gameOptions: GameOptions = {\n  [GameLevel.LEVEL_1]: {\n    row: 3,\n    col: 4,\n  },\n  [GameLevel.LEVEL_2]: {\n    row: 4,\n    col: 4,\n  },\n  [GameLevel.LEVEL_3]: {\n    row: 4,\n    col: 5,\n  },\n  [GameLevel.LEVEL_4]: {\n    row: 4,\n    col: 6,\n  },\n  [GameLevel.LEVEL_5]: {\n    row: 4,\n    col: 7,\n  },\n  [GameLevel.LEVEL_6]: {\n    row: 6,\n    col: 8,\n  },\n  [GameLevel.LEVEL_7]: {\n    row: 7,\n    col: 8,\n  },\n  [GameLevel.LEVEL_8]: {\n    row: 8,\n    col: 8,\n  },\n  [GameLevel.LEVEL_9]: {\n    row: 8,\n    col: 9,\n  },\n  [GameLevel.LEVEL_10]: {\n    row: 8,\n    col: 10,\n  },\n  [GameLevel.LEVEL_11]: {\n    row: 8,\n    col: 11,\n  },\n  [GameLevel.LEVEL_12]: {\n    row: 8,\n    col: 12,\n  },\n  [GameLevel.LEVEL_13]: {\n    row: 9,\n    col: 12,\n  },\n  [GameLevel.LEVEL_14]: {\n    row: 10,\n    col: 12,\n  },\n};\n\nexport const nextLevel = {\n  [GameLevel.LEVEL_1]: GameLevel.LEVEL_2,\n  [GameLevel.LEVEL_2]: GameLevel.LEVEL_3,\n  [GameLevel.LEVEL_3]: GameLevel.LEVEL_4,\n  [GameLevel.LEVEL_4]: GameLevel.LEVEL_5,\n  [GameLevel.LEVEL_5]: GameLevel.LEVEL_6,\n  [GameLevel.LEVEL_6]: GameLevel.LEVEL_7,\n  [GameLevel.LEVEL_7]: GameLevel.LEVEL_8,\n  [GameLevel.LEVEL_8]: GameLevel.LEVEL_9,\n  [GameLevel.LEVEL_9]: GameLevel.LEVEL_10,\n  [GameLevel.LEVEL_10]: GameLevel.LEVEL_11,\n  [GameLevel.LEVEL_11]: GameLevel.LEVEL_12,\n  [GameLevel.LEVEL_12]: GameLevel.LEVEL_13,\n  [GameLevel.LEVEL_13]: GameLevel.LEVEL_14,\n  [GameLevel.LEVEL_14]: GameLevel.LEVEL_14,\n};\n\nexport enum GameBattleEffect {\n  LEVEL_UP = \"LEVEL_UP\",\n  FREEZE = \"FREEZE\",\n}\n\nexport const gameBattleEffect = [\n  GameBattleEffect.LEVEL_UP,\n  GameBattleEffect.FREEZE,\n];\n\nexport const LEVEL_MAX = GameLevel.LEVEL_14;\nexport const LEVEL_BATTLE_MAX = GameLevel.LEVEL_10;\nexport const BASE_START_TIME = 300;\nexport const SUGGEST_TIME = 10;\nexport const BONUS_TIME = 2;\nexport const FREEZING_TIME = 3;\nexport const PENALTY_TIME = 5;\nexport const PENDING_TIME = 3;\nexport const PENALTY_POINTS = 5;\nexport const BONUS_POINTS = 5;\nexport const LEVEL_UP_POINTS = 10;\n","import { atom } from \"recoil\";\nimport { GameSound, GameTypeState } from \"../../types/game\";\n\nconst gameSoundState = atom<GameSound>({\n  key: GameTypeState.GAME_SOUND_STATE,\n  default: {\n    soundReady: false,\n    gameSongDuration: 0,\n    playOpenMenuSound: undefined,\n    playEnableSound: undefined,\n    playDisableSound: undefined,\n    playCompletedGameSound: undefined,\n    playFailedGameSound: undefined,\n    playBiteSound: undefined,\n    playRisingPopSound: undefined,\n    playFanfareSound: undefined,\n    playGlugSound: undefined,\n    playNearlyEndTimeSound: undefined,\n    playOffSound: undefined,\n    playOnSound: undefined,\n    playLevelUpSound: undefined,\n    playPopDownSound: undefined,\n    playPopUpOnSound: undefined,\n    playPopUpOffSound: undefined,\n    playYouWinSound: undefined,\n    playGameSong: undefined,\n  },\n});\n\nexport default gameSoundState;\n","import { useState } from \"react\";\n\n// Hook\nexport default function useLocalStorage(key: string, initialValue: string) {\n  // State to store our value\n  // Pass initial state function to useState so logic is only executed once\n  const [storedValue, setStoredValue] = useState(() => {\n    try {\n      // Get from local storage by key\n      const item = window.localStorage.getItem(key);\n      // Parse stored json or if none return initialValue\n      return item ? JSON.parse(item) : initialValue;\n    } catch (error) {\n      // If error also return initialValue\n      console.log(error);\n      return initialValue;\n    }\n  });\n  // Return a wrapped version of useState's setter function that ...\n  // ... persists the new value to localStorage.\n  const setValue = (value: any) => {\n    try {\n      // Allow value to be a function so we have same API as useState\n      const valueToStore =\n        value instanceof Function ? value(storedValue) : value;\n      // Save state\n      setStoredValue(valueToStore);\n      // Save to local storage\n      window.localStorage.setItem(key, JSON.stringify(valueToStore));\n    } catch (error) {\n      // A more advanced implementation would handle the error case\n      console.log(error);\n    }\n  };\n  return [storedValue, setValue];\n}\n","import i18n from \"i18next\";\nimport { initReactI18next } from \"react-i18next\";\n\ni18n\n  .use(initReactI18next) // passes i18n down to react-i18next\n  .init({\n    // the translations\n    // (tip move them in a JSON file and import them,\n    // or even better, manage them via a UI: https://react.i18next.com/guides/multiple-translation-files#manage-your-translations-with-a-management-gui)\n    resources: {\n      en: {\n        translation: {\n          English: \"English\",\n          Vietnamese: \"Vietnamese\",\n          Back: \"Back\",\n          Replay: \"Replay\",\n          Language: \"Language\",\n          Level: \"Level\",\n          Welcome: \"Welcome\",\n          Congratulations: \"Congratulations\",\n          Submit: \"Submit\",\n          Out: \"Out\",\n          Quit: \"Quit\",\n          Ready: \"Ready\",\n          Stop: \"Stop\",\n          You: \"You\",\n          Competitor: \"Competitor\",\n          Join: \"Join\",\n          \"Battle rule\": \"Battle rule\",\n          \"Your points\": \"Your points\",\n          \"Competitor points\": \"Competitor points\",\n          \"The fastest is best\": \"The fastest is best\",\n          \"The longest is best\": \"The longest is best\",\n          \"Your score\": \"Your score\",\n          \"Your time\": \"Your time\",\n          \"Remaining time\": \"Remaining time\",\n          \"New game ID just created\": \"New game just created ID - `{{gameId}}`\",\n          \"Top players\": \"Top players\",\n          \"Single player\": \"Single player\",\n          \"Multi player\": \"Multi player\",\n          \"Main menu\": \"Main menu\",\n          \"Speed mode\": \"Speed mode\",\n          \"Survival mode\": \"Survival mode\",\n          \"Enter match ID\": \"Enter match ID\",\n          \"Click to join\": \"Click to join\",\n          \"Coming soon...\": \"Coming soon...\",\n          \"Scroll down to play\": \"Scroll down to play\",\n          \"Scroll down to chat\": \"Scroll down to chat and find match\",\n          \"Preparing resource...\": \"Preparing resource...\",\n          \"Please complete all levels as fast as you can\":\n            \"Please complete all levels as fast as you can\",\n          \"Try your best not to run out of time as long as possible.\":\n            \"Try your best not to run out of time as long as possible\",\n          \"Your time will increase when you match a pair of pokemon\":\n            \"Your time will increase when you match a pair of pokemon\",\n          \"Choosing the wrong pair will increase the time\":\n            \"Choosing the wrong pair will increase the time\",\n          \"Choosing the wrong pair will decrease the time\":\n            \"Choosing the wrong pair will decrease the time\",\n          \"Accept alphabet and digit only.\":\n            \"Accept alphabet, digits and space only.\",\n          \"Please enter your name\": \"Please enter your name\",\n          \"Enter your name here\": \"Enter your name here\",\n          \"Make your own ranking\": \"Make your own ranking\",\n          \"Make match\": \"Make match\",\n          \"Find random match\": \"Find random match\",\n          \"Enter your message here...\": \"Enter your message here...\",\n          \"Service is not available now.\": \"Service is not available now.\",\n          \"Please try again\": \"Please try again\",\n          \"Chat slowly please\": \"Chat slowly please\",\n          \"Please enter the right match ID\": \"Please enter the right match ID\",\n          \"Service is under maintenance\": \"Service is under maintenance\",\n          \"Welcome to pokemon game!\": \"Welcome {{name}} to pokemon game!\",\n          \"Have a good time playing the game.\":\n            \"Have a good time playing the game, {{name}}.\",\n          \"Sorry, I'm trying to connect our service again.\":\n            \"Sorry {{ name }}, I'm trying to connect our service again.\",\n          \"Connect to service failed. Will try again in the next 5s. Please wait for it.\":\n            \"Connect to service failed. Will try again in the next 5s. Please wait for it.\",\n          \"(Help) You can click on a `Game ID` of others to join the match.\":\n            \"(Help) Hi {{name}}, you can click on a `Game ID` of others to join the match.\",\n          \"(Help) Please click on make match to create your own match!\":\n            \"(Help) Hi {{name}}, you click on `Make match` button to create your own match!\",\n          \"If your points are over competitor points 50 points. You are the winner and vice versa.\":\n            \"If your points are over competitor points 50 points. You are the winner and vice versa.\",\n          \"Matched the wrong pair of pokemon, your points will be decreased\":\n            \"Matched the wrong pair of pokemon, your points will be decreased by {{point}} points.\",\n          \"Matched pair of pokemon, your points will be increased\":\n            \"Matched pair of pokemon, your points will be increased by {{point}} points.\",\n          \"Every time you level up, you will deal 1 of 2 effects `Freeze enemy` or `Give points to yourself`\":\n            \"Every time you level up, you will deal 1 of 2 effects `Freeze enemy {{second}} second` or `Give {{point}} points to yourself`\",\n        },\n      },\n      vi: {\n        translation: {\n          English: \"Tiếng Anh\",\n          Vietnamese: \"Tiếng Việt\",\n          Back: \"Quay về\",\n          Replay: \"Chơi lại\",\n          Language: \"Ngôn ngữ\",\n          Level: \"Cấp độ\",\n          Welcome: \"Chào bạn\",\n          Congratulations: \"Xin chúc mừng\",\n          Submit: \"Nhập\",\n          Out: \"Thoát\",\n          Quit: \"Thoát\",\n          Ready: \"Sẵn sàng\",\n          Stop: \"Dừng\",\n          You: \"Bạn\",\n          Competitor: \"Đối thủ\",\n          Join: \"Tham gia\",\n          \"Battle rule\": \"Luật chơi\",\n          \"Active players\": \"Người chơi\",\n          \"Active games\": \"Trận đấu\",\n          \"Your points\": \"Điểm của bạn\",\n          \"Competitor points\": \"Điểm đối thủ\",\n          \"The fastest is best\": \"Hoàn thành càng sớm, thứ hạng càng cao\",\n          \"The longest is best\":\n            \"Kéo dài thời gian càng lâu, thứ hạng càng cao\",\n          \"Your score\": \"Điểm số của bạn\",\n          \"Your time\": \"Thời gian của bạn\",\n          \"Remaining time\": \"Thời gian còn lại\",\n          \"Top players\": \"Danh sách người chơi hàng đầu\",\n          \"Single player\": \"Cá nhân\",\n          \"Multi player\": \"Đối kháng\",\n          \"Main menu\": \"Màn hình chính\",\n          \"Speed mode\": \"Tốc độ\",\n          \"Survival mode\": \"Sinh tồn\",\n          \"Enter match ID\": \"Nhập ID trận đấu\",\n          \"New game ID just created\":\n            \"Trận đấu mới vừa được tạo ID - `{{gameId}}`\",\n          \"Coming soon...\": \"Đang phát triển...\",\n          \"Click to join\": \"Tham gia\",\n          \"Preparing resource...\": \"Đang chuẩn bị...\",\n          \"Scroll down to play\": \"Lăn chuột xuống để chơi\",\n          \"Scroll down to chat\": \"Lăn chuột xuống để nhắn tin và tìm trận\",\n          \"Please complete all levels as fast as you can\":\n            \"Hãy hoàn thành tất cả cấp độ nhanh nhất có thể \",\n          \"Try your best not to run out of time as long as possible\":\n            \"Cố gắng hết sức để không hết thời gian lâu nhất có thể\",\n          \"Your time will increase when you match a pair of pokemon\":\n            \"Thời gian của bạn sẽ tăng thêm khi chọn khớp một cặp pokemon\",\n          \"Choosing the wrong pair will increase the time\":\n            \"Chọn sai cặp sẽ bị tăng thêm thời gian\",\n          \"Choosing the wrong pair will decrease the time\":\n            \"Chọn sai cặp sẽ bị giảm thời gian\",\n          \"Accept alphabet and digit only.\":\n            \"Chỉ chấp nhận chữ cái, chữ số và kí tự trắng.\",\n          \"Please enter your name\": \"Hãy nhập tên của bạn\",\n          \"Enter your name here\": \"Nhập tên bạn tại đây\",\n          \"Make your own ranking\": \"Tạo xếp hạng của bạn\",\n          \"Make match\": \"Tạo trận đấu\",\n          \"Find random match\": \"Tìm trận ngẫu nhiên\",\n          \"Please enter the right match ID\": \"Hãy nhập đúng mã trận đấu\",\n          \"Enter your message here...\": \"Nhập tin nhắn tại đây...\",\n          \"Service is not available now.\": \"Dịch vụ hiện tại không khả dụng.\",\n          \"Please try again\": \"Thử lại\",\n          \"Chat slowly please\": \"Chat chậm lại bạn nhé\",\n          \"Service is under maintenance\": \"Dịch vụ đang được bảo trì\",\n          \"Welcome to pokemon game!\":\n            \"Chào mừng bạn {{name}} đến với trò chơi pokemon!\",\n          \"Have a good time playing the game.\":\n            \"Chúc bạn {{name}} có một khoảng thời gian chơi thoải mái và vui vẻ.\",\n          \"Sorry, I'm trying to connect our service again.\":\n            \"Xin lỗi {{ name }}, Tôi đang cố gắng kết nối dịch vụ trở lại.\",\n          \"Connect to service failed. Will try again in the next 5s. Please wait for it.\":\n            \"Kết nối tới dịch vụ thất bại, sẽ thử lại trong 5s. Vui lòng chờ trong giây lát.\",\n          \"(Help) You can click on a `Game ID` of others to join the match.\":\n            \"(Hỗ trợ) Chào {{name}}, bạn có thể click vào `Game ID` của người khác để tham gia trận đấu.\",\n          \"(Help) Please click on make match to create your own match!\":\n            \"(Hỗ trợ) Chào {{name}}, Bạn hãy bấm nút `Tạo trận` để có thể bắt đầu trận đấu của mình!\",\n          \"If your points are over competitor points 50 points. You are the winner and vice versa.\":\n            \"Nếu điểm của bạn hơn đối thủ cạnh tranh 50 điểm. Bạn là người chiến thắng và ngược lại.\",\n          \"Matched the wrong pair of pokemon, your points will be decreased\":\n            \"Kết hợp sai cặp pokemon, điểm của bạn sẽ bị giảm {{point}} điểm.\",\n          \"Matched pair of pokemon, your points will be increased\":\n            \"Chọn cặp pokemon phù hợp, điểm của bạn sẽ được tăng lên {{point}} điểm\",\n          \"Every time you level up, you will deal 1 of 2 effects `Freeze enemy` or `Give points to yourself`\":\n            \"Mỗi khi tăng cấp bạn sẽ gây 1 trong 2 hiệu ứng `Đóng băng đối phương {{second}} giây` hoặc `Tăng {{point}} điểm cho bản thân`\",\n        },\n      },\n    },\n    lng: \"en\", // if you're using a language detector, do not define the lng option\n    fallbackLng: \"en\",\n\n    interpolation: {\n      escapeValue: false,\n    },\n  });\n\nexport default i18n;\n","import { useTranslation } from \"react-i18next\";\nimport { useRecoilValue } from \"recoil\";\nimport useLocalStorage from \"../hooks/useLocalStorage\";\nimport gameSoundState from \"../recoil/atoms/gameSoundState\";\nimport i18n from \"../services/i18n\";\n\nconst SwitchLanguage = () => {\n  const { t } = useTranslation();\n  const { playOffSound } = useRecoilValue(gameSoundState);\n  const [_, setStorageValue] = useLocalStorage(\"language\", \"vi\");\n  const changeLanguage = (lng: \"en\" | \"vi\") => {\n    i18n.changeLanguage(lng);\n    setStorageValue(lng);\n    playOffSound && playOffSound();\n  };\n\n  return (\n    <h5 className=\"select-language\">\n      {t(\"Language\")}:{\" \"}\n      <strong onClick={() => changeLanguage(\"en\")}>{t(\"English\")}</strong> -{\" \"}\n      <strong onClick={() => changeLanguage(\"vi\")}>{t(\"Vietnamese\")}</strong>\n    </h5>\n  );\n};\n\nexport default SwitchLanguage;\n","import { atom } from \"recoil\";\nimport { PlayerState, GameTypeState } from \"../../types/game\";\n\nconst playerState = atom<PlayerState>({\n  key: GameTypeState.PLAYER_STATE,\n  default: {\n    rankingId: \"\",\n    player: \"\",\n    playerTiming: 0,\n  },\n});\n\nexport default playerState;\n","import { nanoid } from \"nanoid\";\nimport {\n  PointCoords,\n  Pokemon,\n  PokemonCoords,\n  Direction,\n  PointType,\n  nextLevel,\n  GameLevel,\n  gameBattleEffect,\n} from \"../types/game\";\n\nconst BASE_URL =\n  \"https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/versions/generation-v/black-white\";\n\nexport let pokemonList: Pokemon[] = [\n  { id: \"poke-0\", matched: false, image: `${BASE_URL}/1.png` },\n  { id: \"poke-1\", matched: false, image: `${BASE_URL}/2.png` },\n  { id: \"poke-2\", matched: false, image: `${BASE_URL}/3.png` },\n  { id: \"poke-3\", matched: false, image: `${BASE_URL}/4.png` },\n  { id: \"poke-5\", matched: false, image: `${BASE_URL}/5.png` },\n  { id: \"poke-4\", matched: false, image: `${BASE_URL}/6.png` },\n  { id: \"poke-6\", matched: false, image: `${BASE_URL}/7.png` },\n  { id: \"poke-7\", matched: false, image: `${BASE_URL}/8.png` },\n  { id: \"poke-8\", matched: false, image: `${BASE_URL}/9.png` },\n  { id: \"poke-9\", matched: false, image: `${BASE_URL}/10.png` },\n  { id: \"poke-10\", matched: false, image: `${BASE_URL}/11.png` },\n  { id: \"poke-11\", matched: false, image: `${BASE_URL}/12.png` },\n  { id: \"poke-12\", matched: false, image: `${BASE_URL}/13.png` },\n  { id: \"poke-13\", matched: false, image: `${BASE_URL}/14.png` },\n  { id: \"poke-14\", matched: false, image: `${BASE_URL}/15.png` },\n  { id: \"poke-15\", matched: false, image: `${BASE_URL}/16.png` },\n  { id: \"poke-16\", matched: false, image: `${BASE_URL}/17.png` },\n  { id: \"poke-17\", matched: false, image: `${BASE_URL}/18.png` },\n  { id: \"poke-18\", matched: false, image: `${BASE_URL}/19.png` },\n  { id: \"poke-19\", matched: false, image: `${BASE_URL}/20.png` },\n  { id: \"poke-20\", matched: false, image: `${BASE_URL}/21.png` },\n  { id: \"poke-21\", matched: false, image: `${BASE_URL}/22.png` },\n  { id: \"poke-22\", matched: false, image: `${BASE_URL}/23.png` },\n  { id: \"poke-23\", matched: false, image: `${BASE_URL}/24.png` },\n  { id: \"poke-24\", matched: false, image: `${BASE_URL}/25.png` },\n  { id: \"poke-25\", matched: false, image: `${BASE_URL}/26.png` },\n  { id: \"poke-26\", matched: false, image: `${BASE_URL}/27.png` },\n  { id: \"poke-27\", matched: false, image: `${BASE_URL}/28.png` },\n  { id: \"poke-28\", matched: false, image: `${BASE_URL}/29.png` },\n  { id: \"poke-29\", matched: false, image: `${BASE_URL}/30.png` },\n  { id: \"poke-30\", matched: false, image: `${BASE_URL}/31.png` },\n  { id: \"poke-31\", matched: false, image: `${BASE_URL}/32.png` },\n  { id: \"poke-32\", matched: false, image: `${BASE_URL}/33.png` },\n  { id: \"poke-33\", matched: false, image: `${BASE_URL}/34.png` },\n  { id: \"poke-34\", matched: false, image: `${BASE_URL}/35.png` },\n  { id: \"poke-35\", matched: false, image: `${BASE_URL}/36.png` },\n  { id: \"poke-36\", matched: false, image: `${BASE_URL}/37.png` },\n  { id: \"poke-37\", matched: false, image: `${BASE_URL}/38.png` },\n  { id: \"poke-38\", matched: false, image: `${BASE_URL}/39.png` },\n  { id: \"poke-39\", matched: false, image: `${BASE_URL}/40.png` },\n];\n\nconst convertObjectToArrayList = <Model>(\n  objectList: Record<string, Model>\n): Model[] => {\n  const arrayList: Model[] = [];\n  Object.keys(objectList).map((key) => {\n    arrayList.push(objectList[key]);\n    return key;\n  });\n  return arrayList;\n};\n\nexport const shufflePokemonList = (nonShuffleList: Pokemon[]) => {\n  const shuffledPokemonList = nonShuffleList.sort(() => Math.random() - 0.5);\n  const shuffledlistPokemon: Record<string, Pokemon> = {};\n  shuffledPokemonList.map((pokemon) => {\n    const nid = nanoid();\n    shuffledlistPokemon[nid] = pokemon;\n    return pokemon;\n  });\n\n  return shuffledlistPokemon;\n};\n\nexport const reShufflePokemonList = (pokemonList: Record<string, Pokemon>) => {\n  const arrayPokemons = convertObjectToArrayList(pokemonList);\n\n  return shufflePokemonList(arrayPokemons);\n};\n\nexport const makeListPokemons = (row: number, col: number) => {\n  const clonePokemonList: Pokemon[] = pokemonList.sort(\n    () => Math.random() - 0.5\n  );\n  // pokemonList.map((pokemon) => {\n  //   clonePokemonList.push(pokemon);\n  //   return pokemon;\n  // });\n  const total = (row * col) / 4;\n  const slicePokemonList = clonePokemonList.slice(0, total);\n  const nonShufflePokemonList = [\n    ...slicePokemonList,\n    ...slicePokemonList,\n    ...slicePokemonList,\n    ...slicePokemonList,\n  ];\n\n  return shufflePokemonList(nonShufflePokemonList);\n};\n\nexport const generatePokemonMatrix = (\n  pokemons: Record<string, Pokemon>,\n  rowSetting: number = 8,\n  colSetting: number = 10\n): { pokemonMatrix: Pokemon[][]; pokemons: Record<string, Pokemon> } => {\n  const newPokemons = { ...pokemons };\n  const totalCol = colSetting + 2;\n  const totalRow = rowSetting + 2;\n  const pokemonKeys = Object.keys(pokemons);\n  const pokemonMatrix: Pokemon[][] = [];\n\n  for (let row = 0; row < totalRow; row++) {\n    if (pokemonMatrix[row] === undefined) pokemonMatrix[row] = [];\n    for (let col = 0; col < totalCol; col++) {\n      if (\n        row === 0 ||\n        row === totalRow - 1 ||\n        col === 0 ||\n        col === totalCol - 1\n      ) {\n        const id = nanoid();\n        const borderPoint = { nid: id, id, matched: true };\n        pokemonMatrix[row].push(borderPoint);\n      } else {\n        const pokemonKey = pokemonKeys.pop();\n        if (pokemonKey) {\n          const pokemon = {\n            ...newPokemons[pokemonKey],\n            nid: pokemonKey,\n            row,\n            col,\n          };\n          newPokemons[pokemonKey] = {\n            ...newPokemons[pokemonKey],\n            rowIndex: row,\n            colIndex: col,\n          };\n          pokemonMatrix[row].push(pokemon);\n        }\n      }\n    }\n  }\n\n  return { pokemonMatrix, pokemons: newPokemons };\n};\n\nconst cloneMatrix = (matrix: Pokemon[][]) => {\n  const newMatrix = [];\n  const length = matrix.length;\n\n  for (let i = 0; i < length; i++) {\n    newMatrix[i] = matrix[i].slice();\n  }\n\n  return newMatrix;\n};\n\nexport const findPath = (\n  fromPoint: PointCoords,\n  toPoint: PointCoords,\n  matrix: Pokemon[][],\n  totalRow: number,\n  totalCol: number\n) => {\n  const matrixTotalRow = totalRow + 2;\n  const matrixTotalCol = totalCol + 2;\n  const tempMatrix = cloneMatrix(matrix);\n  const matrixPoints: boolean[][] = [];\n  const matrixTrackingPoints: (PointCoords | undefined)[][] = [];\n\n  for (let rowIndex = 0; rowIndex < matrixTotalRow; ++rowIndex) {\n    matrixPoints.push([]);\n    matrixTrackingPoints.push([]);\n    for (let colIndex = 0; colIndex < matrixTotalCol; ++colIndex) {\n      const pokemon = { ...tempMatrix[rowIndex][colIndex] };\n      matrixPoints[rowIndex].push(pokemon.matched);\n      matrixTrackingPoints[rowIndex].push(undefined);\n    }\n  }\n  const dRow: number[] = [-1, 0, 1, 0];\n  const dCol: number[] = [0, 1, 0, -1];\n  const queue = [];\n  queue.push(toPoint);\n  matrixTrackingPoints[toPoint.rowIndex][toPoint.colIndex] = {\n    rowIndex: -2,\n    colIndex: -2,\n  };\n\n  matrixPoints[fromPoint.rowIndex][fromPoint.colIndex] = true;\n  matrixPoints[toPoint.rowIndex][toPoint.colIndex] = true;\n\n  while (queue.length) {\n    const currentPoint = queue.shift();\n\n    if (currentPoint) {\n      if (\n        currentPoint?.rowIndex === fromPoint.rowIndex &&\n        currentPoint?.colIndex === fromPoint.colIndex\n      ) {\n        break;\n      }\n      for (let index = 0; index < 4; index++) {\n        let rowIndex: number = currentPoint.rowIndex + dRow[index];\n        let colIndex: number = currentPoint.colIndex + dCol[index];\n        while (\n          rowIndex >= 0 &&\n          rowIndex < matrixTotalRow &&\n          colIndex >= 0 &&\n          colIndex < matrixTotalCol &&\n          matrixPoints[rowIndex][colIndex] === true\n        ) {\n          if (matrixTrackingPoints[rowIndex][colIndex] === undefined) {\n            matrixTrackingPoints[rowIndex][colIndex] = currentPoint;\n            queue.push({ rowIndex, colIndex });\n          }\n          rowIndex += dRow[index];\n          colIndex += dCol[index];\n        }\n      }\n    }\n  }\n\n  const trackedPoints: PointCoords[] = [];\n  let trackPoint: PointCoords = { ...fromPoint };\n\n  if (matrixTrackingPoints[trackPoint.rowIndex][trackPoint.colIndex]) {\n    while (trackPoint.rowIndex !== -2 && trackPoint.colIndex !== -2) {\n      trackedPoints.push({\n        rowIndex: trackPoint.rowIndex,\n        colIndex: trackPoint.colIndex,\n      });\n      trackPoint = {\n        ...(matrixTrackingPoints[trackPoint.rowIndex][\n          trackPoint.colIndex\n        ] as PointCoords),\n      };\n    }\n  }\n\n  return trackedPoints;\n};\n\nexport const hasConnectLine = (\n  point1: PokemonCoords,\n  point2: PokemonCoords,\n  matrix: Pokemon[][],\n  totalRow: number,\n  totalCol: number\n) => {\n  const pathPoints = findPath(point1, point2, matrix, totalRow, totalCol);\n\n  return {\n    connected: pathPoints.length >= 2 && pathPoints.length <= 4,\n    pathPoints,\n  };\n};\n\nexport const checkPointInLine = (\n  connectingLinePoints: PointCoords[],\n  currentPosition: PointCoords\n) => {\n  const { rowIndex, colIndex } = currentPosition;\n\n  return connectingLinePoints.find(\n    (matchingLinePoint) =>\n      matchingLinePoint.rowIndex === rowIndex &&\n      matchingLinePoint.colIndex === colIndex\n  );\n};\n\nexport const drawPath = (\n  pathPoints: PointCoords[],\n  totalRow: number,\n  totalCol: number\n) => {\n  const limitRow = totalRow + 2;\n  const limitCol = totalCol + 2;\n  // console.log(pathPoints);\n  return pathPoints.reduce(\n    (newPathPoints, currentPoint, index, arrayPoints) => {\n      let type: PointType = PointType.LINE;\n      let direction: Direction | undefined = undefined;\n      const nextIndex = index + 1;\n      const prevIndex = index - 1;\n\n      if (arrayPoints[nextIndex] === undefined) {\n        type = PointType.END;\n      }\n\n      if (arrayPoints[prevIndex]) {\n        const prevPoint = arrayPoints[prevIndex];\n        if (prevPoint.rowIndex > currentPoint.rowIndex) {\n          direction = Direction.TOP;\n        } else if (prevPoint.rowIndex < currentPoint.rowIndex) {\n          direction = Direction.BOTTOM;\n        } else {\n          if (prevPoint.colIndex > currentPoint.colIndex) {\n            direction = Direction.LEFT;\n          } else if (prevPoint.colIndex < currentPoint.colIndex) {\n            direction = Direction.RIGHT;\n          } else {\n            if (prevPoint.rowIndex > currentPoint.rowIndex) {\n              direction = Direction.TOP;\n            } else if (prevPoint.rowIndex < currentPoint.rowIndex) {\n              direction = Direction.BOTTOM;\n            }\n          }\n        }\n\n        let extraPoint: PointCoords | undefined = {\n          ...currentPoint,\n          direction,\n          type: PointType.LINE,\n        };\n\n        // console.log(extraPoint);\n\n        do {\n          switch (extraPoint.direction) {\n            case Direction.BOTTOM:\n              extraPoint.rowIndex--;\n              if (extraPoint.rowIndex < 0) {\n                extraPoint = undefined;\n              }\n\n              break;\n\n            case Direction.TOP:\n              extraPoint.rowIndex++;\n              if (extraPoint.rowIndex >= limitRow) {\n                extraPoint = undefined;\n              }\n              break;\n\n            case Direction.LEFT:\n              extraPoint.colIndex++;\n              if (extraPoint.colIndex >= limitCol) {\n                extraPoint = undefined;\n              }\n              break;\n\n            case Direction.RIGHT:\n              extraPoint.colIndex--;\n              if (extraPoint.colIndex < 0) {\n                extraPoint = undefined;\n              }\n              break;\n\n            default:\n              break;\n          }\n          if (extraPoint === undefined) {\n            break;\n          }\n          if (\n            extraPoint.rowIndex === prevPoint.rowIndex &&\n            extraPoint.colIndex === prevPoint.colIndex\n          ) {\n            break;\n          }\n\n          newPathPoints.push({ ...extraPoint });\n        } while (extraPoint !== undefined);\n      } else {\n        type = PointType.START;\n      }\n      const newCurrentPoint = { ...currentPoint, direction, type };\n\n      newPathPoints.push(newCurrentPoint);\n\n      return newPathPoints;\n    },\n    [] as PointCoords[]\n  );\n};\n\nexport const checkConnectionSelectedPokemons = (\n  selectedPokemons: PokemonCoords[],\n  pokemons: Record<string, Pokemon>,\n  matrix: Pokemon[][],\n  rowSetting: number,\n  colSetting: number\n) => {\n  const newPokemons = { ...pokemons };\n  const newSelectedPokemons = [...selectedPokemons];\n  const [selectedPokemon1, selectedPokemon2] = newSelectedPokemons;\n  let connectingLinePoints: PointCoords[] = [];\n  let newMatrix = [...matrix];\n\n  if (\n    selectedPokemon1?.nid &&\n    selectedPokemon2?.nid &&\n    pokemons[selectedPokemon1.nid].id === pokemons[selectedPokemon2.nid].id\n  ) {\n    const { connected, pathPoints } = hasConnectLine(\n      selectedPokemon1,\n      selectedPokemon2,\n      matrix,\n      rowSetting,\n      colSetting\n    );\n\n    if (connected) {\n      connectingLinePoints = drawPath(pathPoints, rowSetting, colSetting);\n\n      newPokemons[selectedPokemon1.nid] = {\n        ...newPokemons[selectedPokemon1.nid],\n        matched: true,\n      };\n      newPokemons[selectedPokemon2.nid] = {\n        ...newPokemons[selectedPokemon2.nid],\n        matched: true,\n      };\n      const { pokemonMatrix } = generatePokemonMatrix(\n        newPokemons,\n        rowSetting,\n        colSetting\n      );\n      newMatrix = pokemonMatrix;\n    } else {\n      connectingLinePoints = [{ rowIndex: -1, colIndex: -1 }];\n    }\n\n    newSelectedPokemons.length = 0;\n  } else {\n    if (selectedPokemons.length === 2) {\n      newSelectedPokemons.length = 0;\n      connectingLinePoints = [{ rowIndex: -1, colIndex: -1 }];\n    }\n  }\n\n  return {\n    newSelectedPokemons,\n    newMatrix,\n    newPokemons,\n    connectingLinePoints,\n  };\n};\n\nexport const checkCompletedLevel = (pokemons: Record<string, Pokemon>) => {\n  return (\n    Object.keys(pokemons).length &&\n    Object.entries(pokemons).findIndex(\n      ([_, pokemon]) => pokemon.matched === false\n    ) === -1\n  );\n};\n\nexport const hasAnyConnectLine = (\n  pokemons: Record<string, Pokemon>,\n  matrix: Pokemon[][],\n  totalRow: number,\n  totalCol: number\n) => {\n  let foundConnectLine = false;\n  let fromPoint: PointCoords | undefined = undefined;\n  let toPoint: PointCoords | undefined = undefined;\n  const entriesPokemons = Object.entries(pokemons);\n\n  while (entriesPokemons.length) {\n    const entryPokemon = entriesPokemons.pop();\n\n    if (entryPokemon === undefined) {\n      break;\n    }\n    const [nid, currentPokemon] = entryPokemon;\n\n    if (currentPokemon.matched === false) {\n      foundConnectLine = entriesPokemons.some(([nid, pokemon]) => {\n        if (currentPokemon.id === pokemon.id && pokemon.matched === false) {\n          const { connected } = hasConnectLine(\n            currentPokemon as PointCoords,\n            pokemon as PointCoords,\n            matrix,\n            totalRow,\n            totalCol\n          );\n\n          if (connected) {\n            if (currentPokemon.rowIndex && currentPokemon.colIndex) {\n              fromPoint = {\n                rowIndex: currentPokemon.rowIndex,\n                colIndex: currentPokemon.colIndex,\n              };\n            }\n            if (pokemon.rowIndex && pokemon.colIndex) {\n              toPoint = {\n                rowIndex: pokemon.rowIndex,\n                colIndex: pokemon.colIndex,\n              };\n            }\n          }\n\n          return connected;\n        }\n\n        return false;\n      });\n      if (foundConnectLine) {\n        break;\n      }\n    }\n  }\n\n  return { foundConnectLine, fromPoint, toPoint };\n};\n\nexport function getPlayerName(player: string) {\n  return player.replace(/-.*$/g, \"\");\n}\n\nexport function getPlayerID(player: string) {\n  return player.replace(/^.*-/g, \"\");\n}\n\nexport function randomLevel() {\n  const index = Math.floor(Math.random() * Object.keys(nextLevel).length) + 1;\n  const level = `LEVEL_${index}` as GameLevel;\n  return nextLevel[level];\n}\n\nexport function randomEffectEvent() {\n  const index = Math.floor(Math.random() * gameBattleEffect.length);\n  return gameBattleEffect[index];\n}\n","import { useTranslation } from \"react-i18next\";\nimport { useRecoilValue } from \"recoil\";\nimport playerState from \"../recoil/atoms/playerState\";\nimport { getPlayerID, getPlayerName } from \"../utils/game\";\n\nconst Welcome = () => {\n  const { t } = useTranslation();\n\n  const { player } = useRecoilValue(playerState);\n  return (\n    <>\n      <h2 className=\"text-center\">\n        {t(\"Welcome\")},{getPlayerName(player)}\n      </h2>\n      <p className=\"text-center\">ID: {getPlayerID(player)}</p>\n    </>\n  );\n};\n\nexport default Welcome;\n","import { useState, useEffect, useCallback } from \"react\";\n\nexport type ResponseData = Record<string, any> | null;\n\nexport interface Response {\n  success: boolean;\n  message: string;\n  data?: ResponseData;\n  error?: string;\n}\n\nexport interface ResponseError extends Response {\n  error?: string;\n}\n\nexport enum ResponseStatus {\n  SUCCESS = \"success\",\n  ERROR = \"error\",\n  IDLE = \"idle\",\n  PENDING = \"pending\",\n}\n\n// Hook\nconst useAsync = <T extends Response, E = string>(\n  asyncFunction: () => Promise<T>,\n  immediate = true\n) => {\n  const [status, setStatus] = useState<ResponseStatus>(ResponseStatus.IDLE);\n  const [value, setValue] = useState<T | ResponseData>(null);\n  const [error, setError] = useState<E | ResponseError | null>(null);\n  // The execute function wraps asyncFunction and\n  // handles setting state for pending, value, and error.\n  // useCallback ensures the below useEffect is not called\n  // on every render, but only if asyncFunction changes.\n  const execute = useCallback(() => {\n    setStatus(ResponseStatus.PENDING);\n    setValue(null);\n    setError(null);\n    return asyncFunction()\n      .then((response: T) => {\n        if (response) {\n          setValue(response);\n        }\n        setStatus(ResponseStatus.SUCCESS);\n      })\n      .catch((error: ResponseError) => {\n        if (error) {\n          setError(error);\n        }\n        setStatus(ResponseStatus.ERROR);\n      });\n  }, [asyncFunction]);\n  // Call execute if we want to fire it right away.\n  // Otherwise execute can be called later, such as\n  // in an onClick handler.\n  useEffect(() => {\n    if (immediate) {\n      execute();\n    }\n  }, [execute, immediate]);\n  return { execute, status, value, error };\n};\n\nexport default useAsync;\n","import { useTranslation } from \"react-i18next\";\nimport { Link } from \"react-router-dom\";\nimport { Routes } from \"../routes/CONSTANTS\";\nimport { useRecoilValue } from \"recoil\";\nimport gameSoundState from \"../recoil/atoms/gameSoundState\";\nimport SwitchLanguage from \"../components/SwitchLanguage\";\nimport { Helmet } from \"react-helmet\";\nimport playerState from \"../recoil/atoms/playerState\";\nimport Welcome from \"../components/Welcome\";\n\nconst MainPage = () => {\n  const { t } = useTranslation();\n  const { playPopUpOnSound } = useRecoilValue(gameSoundState);\n\n  return (\n    <div className=\"main-board\">\n      <Helmet>\n        <meta charSet=\"utf-8\" />\n        <title>Pika pika! - Main board</title>\n      </Helmet>\n      <nav className=\"navigation\">\n        <Welcome />\n        <Link to={Routes.SINGLE_PLAYER_PAGE}>\n          <button onClick={() => playPopUpOnSound && playPopUpOnSound()}>\n            {t(\"Single player\")}\n          </button>\n        </Link>\n        <Link to={Routes.MULTI_PLAYER_PAGE}>\n          <button onClick={() => playPopUpOnSound && playPopUpOnSound()}>\n            {t(\"Multi player\")}\n          </button>\n        </Link>\n        <SwitchLanguage />\n      </nav>\n    </div>\n  );\n};\n\nexport default MainPage;\n","const BASE_API = \"https://pokemon-game.ldktech.com/websocket\";\n// const BASE_API = \"http://localhost:8080\";\n\nexport default BASE_API;\n","import { Response } from \"../hooks/useAsync\";\nimport { GameMode } from \"../types/game\";\nimport BASE_API from \"./CONSTANTS\";\n\nexport type TopPlayer = {\n  _id?: string;\n  timing?: number;\n  player: string;\n  mode: GameMode;\n  timestamp: number;\n};\n\nexport interface TopPlayersResponse extends Response {\n  data: TopPlayer[];\n}\n\nexport interface InsertedTopPlayerResponse extends Response {\n  data?: {\n    InsertedID: string;\n  };\n  id: string;\n}\n\nconst defaultFetchOptions: RequestInit = {\n  method: \"POST\", // *GET, POST, PUT, DELETE, etc.\n  mode: \"cors\", // no-cors, *cors, same-origin\n  cache: \"no-cache\", // *default, no-cache, reload, force-cache, only-if-cached\n  credentials: \"same-origin\", // include, *same-origin, omit\n  headers: {\n    \"Content-Type\": \"application/json\",\n    // 'Content-Type': 'application/x-www-form-urlencoded',\n  },\n  redirect: \"follow\", // manual, *follow, error\n  referrerPolicy: \"no-referrer\", // no-referrer, *no-referrer-when-downgrade, origin, origin-when-cross-origin, same-origin, strict-origin, strict-origin-when-cross-origin, unsafe-url\n};\n\nconst getTopRanking = (mode: GameMode): Promise<TopPlayersResponse> => {\n  return fetch(`${BASE_API}/rankings?mode=${mode}`)\n    .then((res) => res.json())\n    .then(\n      (response) => response,\n      // Note: it's important to handle errors here\n      // instead of a catch() block so that we don't swallow\n      // exceptions from actual bugs in components.\n      (error) => error\n    );\n};\n\nconst addNewRanking = (data: TopPlayer): Promise<InsertedTopPlayerResponse> => {\n  const fetchOptions = { ...defaultFetchOptions, body: JSON.stringify(data) };\n  return fetch(`${BASE_API}/rankings`, fetchOptions)\n    .then((res) => res.json())\n    .then(\n      (response) => response,\n      // Note: it's important to handle errors here\n      // instead of a catch() block so that we don't swallow\n      // exceptions from actual bugs in components.\n      (error) => error\n    );\n};\n\nconst updateNewRanking = (\n  id: string,\n  data: TopPlayer\n): Promise<InsertedTopPlayerResponse> => {\n  const fetchOptions = {\n    ...defaultFetchOptions,\n    method: \"PUT\",\n    body: JSON.stringify(data),\n  };\n  return fetch(`${BASE_API}/rankings/${id}`, fetchOptions)\n    .then((res) => res.json())\n    .then(\n      (response) => response,\n      // Note: it's important to handle errors here\n      // instead of a catch() block so that we don't swallow\n      // exceptions from actual bugs in components.\n      (error) => error\n    );\n};\n\nexport { getTopRanking, addNewRanking, updateNewRanking };\n","export function timeConvert(num: number) {\n  if (num <= 0) {\n    return \"00:00\";\n  }\n  const hours = Math.floor(num / 60);\n  const minutes = num % 60;\n  return (\n    hours.toString().padStart(2, \"0\") +\n    \":\" +\n    minutes.toString().padStart(2, \"0\")\n  );\n}\n\nexport function dateTimeFromTimestamp(timestamp: number) {\n  const dateObject = new Date(timestamp);\n\n  return dateObject.toLocaleString();\n}\n","import { FC } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { TopPlayer, TopPlayersResponse } from \"../../api/ranking\";\nimport useAsync, { ResponseStatus } from \"../../hooks/useAsync\";\nimport { Routes } from \"../../routes/CONSTANTS\";\nimport { dateTimeFromTimestamp, timeConvert } from \"../../utils/time\";\nimport { useRecoilValue } from \"recoil\";\nimport gameSoundState from \"../../recoil/atoms/gameSoundState\";\nimport { useTranslation } from \"react-i18next\";\nimport { GameMode } from \"../../types/game\";\n\ntype TopListProps = {\n  fetch: () => Promise<TopPlayersResponse>;\n  mode: GameMode;\n};\n\nconst TopList: FC<TopListProps> = ({ fetch, mode }) => {\n  const { t } = useTranslation();\n  const { playPopUpOnSound } = useRecoilValue(gameSoundState);\n  const { status, value: topPlayersResponse, error } = useAsync(fetch);\n\n  return (\n    <>\n      {topPlayersResponse &&\n        topPlayersResponse.data === null &&\n        (mode === GameMode.SPEED_MODE ? (\n          <Link to={Routes.SPEED_MODE_PAGE}>\n            <button\n              onClick={() => playPopUpOnSound && playPopUpOnSound()}\n              style={{ width: \"calc(100% - 32px)\", margin: 16 }}\n            >\n              {t(\"Make your own ranking\")}\n            </button>\n          </Link>\n        ) : (\n          <Link to={Routes.SURVIVAL_MODE_PAGE}>\n            <button\n              onClick={() => playPopUpOnSound && playPopUpOnSound()}\n              style={{ width: \"calc(100% - 32px)\", margin: 16 }}\n            >\n              {t(\"Make your own ranking\")}\n            </button>\n          </Link>\n        ))}\n      <ol className=\"rank-list\">\n        {status === ResponseStatus.SUCCESS && topPlayersResponse?.data ? (\n          topPlayersResponse?.data?.map(\n            (topPlayer: TopPlayer, index: number) =>\n              topPlayer.timing && (\n                <li key={`id-${index}`}>\n                  {topPlayer.player} - {timeConvert(topPlayer.timing)} -{\" \"}\n                  {dateTimeFromTimestamp(topPlayer.timestamp)}\n                </li>\n              )\n          )\n        ) : (\n          <li>{t(\"Service is under maintenance\")}</li>\n        )}\n        {status === ResponseStatus.ERROR && error && (\n          <p className=\"has-error\">{error}</p>\n        )}\n      </ol>\n    </>\n  );\n};\n\nexport default TopList;\n","import { memo } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { getTopRanking } from \"../api/ranking\";\nimport { GameMode } from \"../types/game\";\nimport TopList from \"./Rank/TopList\";\n\nconst RankBoard = () => {\n  const { t } = useTranslation();\n\n  return (\n    <div className=\"max-screen-container rank-board\">\n      <h1>{t(\"Top players\")}</h1>\n      <div className=\"row\">\n        <div className=\"col\">\n          <h4>\n            <em>{t(\"The longest is best\")}</em>\n          </h4>\n          <TopList\n            fetch={() => getTopRanking(GameMode.SURVIVAL_MODE)}\n            mode={GameMode.SURVIVAL_MODE}\n          />\n        </div>\n        <div className=\"col\">\n          <h4>\n            <em>{t(\"The fastest is best\")}</em>\n          </h4>\n          <TopList\n            fetch={() => getTopRanking(GameMode.SPEED_MODE)}\n            mode={GameMode.SPEED_MODE}\n          />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(RankBoard, () => true);\n","import { atom } from \"recoil\";\nimport {\n  GameStatus,\n  GameState,\n  GameTypeState,\n  GameLevel,\n} from \"../../types/game\";\n\nconst gameState = atom<GameState>({\n  key: GameTypeState.GAME_STATE,\n  default: {\n    status: GameStatus.PENDING,\n    row: 3,\n    col: 4,\n    pokemons: {},\n    matrix: [],\n    level: GameLevel.LEVEL_1,\n  },\n});\n\nexport default gameState;\n","import { atom } from \"recoil\";\nimport { GameOverlayState, GameTypeState } from \"../../types/game\";\n\nconst gameOverlayState = atom<GameOverlayState>({\n  key: GameTypeState.GAME_OVERLAY_STATE,\n  default: {\n    connectingLinePoints: [],\n    suggestPoints: [undefined, undefined],\n    freezing: false,\n  },\n});\n\nexport default gameOverlayState;\n","import { atom } from \"recoil\";\nimport { GameTypeState, PokemonCoords } from \"../../types/game\";\n\nconst selectedPokemonsState = atom<PokemonCoords[]>({\n  key: GameTypeState.SELECTED_POKEMONS,\n  default: [],\n});\n\nexport default selectedPokemonsState;\n","import { selector } from \"recoil\";\nimport { GameSelector, PokemonCoords } from \"../../types/game\";\nimport { checkConnectionSelectedPokemons } from \"../../utils/game\";\nimport gameState from \"../atoms/gameState\";\nimport gameOverlayState from \"../atoms/gameOverlayState\";\nimport selectedPokemonsState from \"../atoms/selectedPokemonsState\";\n\nconst selectedPokemonsSelector = selector({\n  key: GameSelector.SELECTED_POKEMONS_SELECTOR,\n  get: ({ get }) => {\n    const selectedPokemons = get(selectedPokemonsState);\n    return selectedPokemons;\n  },\n  set: ({ set, get }, newValue) => {\n    const { row, col, status, matrix, pokemons, level } = get(gameState);\n    const selectedPokemons = get(selectedPokemonsState);\n\n    const cloneSelectedPokemons = [...selectedPokemons];\n    cloneSelectedPokemons.push(newValue as PokemonCoords);\n\n    const {\n      connectingLinePoints,\n      newMatrix,\n      newPokemons,\n      newSelectedPokemons,\n    } = checkConnectionSelectedPokemons(\n      cloneSelectedPokemons,\n      pokemons,\n      matrix,\n      row,\n      col\n    );\n\n    if (connectingLinePoints.length >= 1) {\n      if (connectingLinePoints.length > 1) {\n        set(gameState, {\n          row,\n          col,\n          status,\n          level,\n          matrix: newMatrix,\n          pokemons: newPokemons,\n        });\n      }\n      set(gameOverlayState, {\n        suggestPoints: [undefined, undefined],\n        connectingLinePoints,\n      });\n    }\n\n    set(selectedPokemonsState, newSelectedPokemons);\n  },\n});\n\nexport default selectedPokemonsSelector;\n","import { useRecoilValue, useResetRecoilState, useSetRecoilState } from \"recoil\";\nimport gameState from \"../recoil/atoms/gameState\";\nimport selectedPokemonsSelector from \"../recoil/selectors/selectedPokemonsSelector\";\nimport selectedPokemonsState from \"../recoil/atoms/selectedPokemonsState\";\nimport gameOverlayState from \"../recoil/atoms/gameOverlayState\";\nimport gameSoundState from \"../recoil/atoms/gameSoundState\";\nimport { useCallback } from \"react\";\nimport { GameLevel, GameMode, gameOptions, GameStatus } from \"../types/game\";\nimport { generatePokemonMatrix, makeListPokemons } from \"../utils/game\";\nimport { addNewRanking, TopPlayer, updateNewRanking } from \"../api/ranking\";\nimport playerState from \"../recoil/atoms/playerState\";\nimport { nanoid } from \"nanoid\";\n\nexport function useGameActions(mode: GameMode) {\n  const setGame = useSetRecoilState(gameState);\n  const setPlayer = useSetRecoilState(playerState);\n  const setSelectedPokemons = useSetRecoilState(selectedPokemonsSelector);\n  const resetGameState = useResetRecoilState(gameState);\n  const resetGameOverlayState = useResetRecoilState(gameOverlayState);\n  const resetSelectedPokemonsState = useResetRecoilState(selectedPokemonsState);\n  const { playBiteSound, playFanfareSound, playNearlyEndTimeSound } =\n    useRecoilValue(gameSoundState);\n\n  const selectPokemon = (\n    pokemonId: string,\n    rowIndex: number,\n    colIndex: number\n  ) => {\n    playBiteSound && playBiteSound();\n    setSelectedPokemons({ nid: pokemonId, rowIndex, colIndex });\n  };\n\n  const resetGame = () => {\n    resetGameState();\n    resetGameOverlayState();\n    resetSelectedPokemonsState();\n  };\n\n  const initGame = useCallback(\n    (level: GameLevel, status: GameStatus = GameStatus.PENDING) => {\n      const { row, col } = gameOptions[level];\n      const pokemons = makeListPokemons(row, col);\n      const { pokemonMatrix, pokemons: newPokemons } = generatePokemonMatrix(\n        pokemons,\n        row,\n        col\n      );\n      setGame({\n        pokemons: newPokemons,\n        matrix: pokemonMatrix,\n        level,\n        row,\n        col,\n        status,\n      });\n      // setPlayer((currentPlayer) => ({ ...currentPlayer, playerTiming: 0 }));\n    },\n    [setGame]\n  );\n\n  const replayGame = (player: string) => {\n    // playFanfareSound && playFanfareSound();\n    initGame(GameLevel.LEVEL_1);\n    // addNewRankingScore(mode, player);\n  };\n\n  const endGame = () => {\n    if (mode === GameMode.SURVIVAL_MODE) {\n      playNearlyEndTimeSound && playNearlyEndTimeSound();\n      setGame((prevGame) => ({\n        ...prevGame,\n        status: GameStatus.COMPLETED,\n      }));\n    }\n  };\n\n  const addNewRankingScore = (mode: GameMode, player: string) => {\n    const playerScore: TopPlayer = {\n      mode,\n      player,\n      timestamp: Date.now(),\n    };\n    addNewRanking(playerScore).then((response) => {\n      setPlayer((prevPlayer) => ({\n        ...prevPlayer,\n        rankingId: response.id ?? nanoid(),\n      }));\n    });\n  };\n\n  const updateNewRankingScore = (\n    id: string,\n    mode: GameMode,\n    player: string,\n    timing: number\n  ) => {\n    const playerScore: TopPlayer = {\n      mode,\n      player,\n      timing,\n      timestamp: Date.now(),\n    };\n    updateNewRanking(id, playerScore);\n  };\n\n  const startGame = () => {\n    setGame((prevGame) => ({\n      ...prevGame,\n      status: GameStatus.RUNNING,\n    }));\n  };\n\n  return {\n    initGame,\n    replayGame,\n    startGame,\n    endGame,\n    selectPokemon,\n    resetGame,\n    addNewRankingScore,\n    updateNewRankingScore,\n  };\n}\n","import { useTranslation } from \"react-i18next\";\nimport { Link } from \"react-router-dom\";\nimport RankBoard from \"../components/RankBoard\";\nimport { Routes } from \"../routes/CONSTANTS\";\nimport { useGameActions } from \"../hooks/useGameActions\";\nimport { useEffect } from \"react\";\nimport gameSoundState from \"../recoil/atoms/gameSoundState\";\nimport { useRecoilValue } from \"recoil\";\nimport SwitchLanguage from \"../components/SwitchLanguage\";\nimport { Helmet } from \"react-helmet\";\nimport { GameMode } from \"../types/game\";\nimport Welcome from \"../components/Welcome\";\n\nconst SinglePlayerPage = () => {\n  const { t } = useTranslation();\n  const { playPopUpOnSound } = useRecoilValue(gameSoundState);\n  const { resetGame } = useGameActions(GameMode.SURVIVAL_MODE);\n\n  useEffect(() => {\n    resetGame();\n  }, [resetGame]);\n\n  return (\n    <div className=\"game-container\">\n      <Helmet>\n        <meta charSet=\"utf-8\" />\n        <title>Pika pika! - Single player</title>\n      </Helmet>\n      <div className=\"game-board\">\n        <RankBoard />\n      </div>\n      <div className=\"sidebar\">\n        <div className=\"game-info\">\n          <h1 className=\"game-title\">{t(\"Single player\")}</h1>\n          <Welcome />\n        </div>\n        <div>\n          <Link to={Routes.SURVIVAL_MODE_PAGE}>\n            <button onClick={() => playPopUpOnSound && playPopUpOnSound()}>\n              {t(\"Survival mode\")}\n            </button>\n          </Link>\n          <Link to={Routes.SPEED_MODE_PAGE}>\n            <button onClick={() => playPopUpOnSound && playPopUpOnSound()}>\n              {t(\"Speed mode\")}\n            </button>\n          </Link>\n          <Link to={Routes.MAIN_PAGE}>\n            <button onClick={() => playPopUpOnSound && playPopUpOnSound()}>\n              {t(\"Back\")}\n            </button>\n          </Link>\n        </div>\n        <SwitchLanguage />\n      </div>\n    </div>\n  );\n};\n\nexport default SinglePlayerPage;\n","export enum ChatTypeState {\n  MESSAGES_STATE = \"MESSAGES_STATE\",\n}\n\nexport type Message = {\n  channel: string;\n  content: string;\n};\n\nexport interface MessagesState {\n  messages: Message[];\n}\n\nexport const DEFAULT_CHANNEL = \"general\";\n\nexport const BASE_WS_URL = \"wss://pokemon-game.ldktech.com/websocket\";\n// export const BASE_WS_URL = \"ws://localhost:8080\";\n","import { atom } from \"recoil\";\nimport { ChatTypeState, MessagesState } from \"../../types/chat\";\n\nconst messagesState = atom<MessagesState>({\n  key: ChatTypeState.MESSAGES_STATE,\n  default: {\n    messages: [],\n  },\n});\n\nexport default messagesState;\n","import { FC, FormEventHandler, useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\n\ninterface ChatBoxProps {\n  handleSubmit: FormEventHandler<HTMLFormElement>;\n}\n\nconst ChatBox: FC<ChatBoxProps> = ({ handleSubmit }) => {\n  const { t } = useTranslation();\n  const [throttle, setThrottle] = useState(1);\n\n  const onSubmit: FormEventHandler<HTMLFormElement> = (event) => {\n    if (throttle) {\n      setThrottle(0);\n      handleSubmit(event);\n      setTimeout(() => {\n        setThrottle(1);\n      }, 300);\n    } else {\n      alert(t(\"Chat slowly please\"));\n    }\n  };\n\n  return (\n    <div className=\"chat-box\">\n      <form onSubmit={onSubmit}>\n        <input\n          name=\"message\"\n          placeholder={t(\"Enter your message here...\")}\n          autoFocus\n          autoComplete=\"off\"\n        />\n      </form>\n    </div>\n  );\n};\n\nexport default ChatBox;\n","import { FC, memo } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { useHistory } from \"react-router-dom\";\nimport { useRecoilValue } from \"recoil\";\nimport playerState from \"../../recoil/atoms/playerState\";\nimport { Routes } from \"../../routes/CONSTANTS\";\nimport { getPlayerID, getPlayerName } from \"../../utils/game\";\nimport { dateTimeFromTimestamp } from \"../../utils/time\";\n\ninterface MessageProps {\n  message: string;\n}\n\nconst Message: FC<MessageProps> = ({ message }) => {\n  const { player } = useRecoilValue(playerState);\n  const { t } = useTranslation();\n  const history = useHistory();\n\n  let gameId: string | undefined = undefined;\n  try {\n    const { name, content, timestamp } = JSON.parse(message);\n    const matched = content.match(/ID - `([^`]{8})`$/);\n    if (matched && matched[1]) {\n      gameId = matched[1];\n    }\n    const selfClass = player === name ? \"self\" : \"\";\n    const joinGame = () => {\n      if (gameId) {\n        history.push(Routes.BATTLE_MODE_PAGE.replace(\":gameId\", gameId));\n      }\n    };\n\n    return (\n      <div className={`message ${selfClass}`}>\n        <small className=\"message-name\">\n          {getPlayerName(name)} <em>(ID: {getPlayerID(name)})</em>\n        </small>\n        <strong className=\"message-content\">\n          {content.replace(/ID - `([^`]{8})`$/, \"\")}{\" \"}\n          {gameId && (\n            <em onClick={joinGame} className=\"button button-join-game\">\n              <span className=\"hidden-mobile\">{t(\"Join\")}:</span> {gameId}\n            </em>\n          )}\n        </strong>\n        <small className=\"message-date\">\n          <em>{dateTimeFromTimestamp(timestamp)}</em>\n        </small>\n      </div>\n    );\n  } catch (error) {\n    console.log(error);\n    return null;\n  }\n};\n\nfunction isOldMessage(prevProps: MessageProps, nextProps: MessageProps) {\n  return prevProps.message === nextProps.message;\n}\n\nexport default memo(Message, isOldMessage);\n","import { FC, useEffect } from \"react\";\nimport Message from \"./Message\";\nimport { useRecoilState } from \"recoil\";\nimport messagesState from \"../../recoil/atoms/messagesState\";\nimport { nanoid } from \"nanoid\";\n\nconst MessagesBox: FC = () => {\n  const [{ messages }, setMessages] = useRecoilState(messagesState);\n\n  useEffect(() => {\n    const messagesBox = document.getElementById(\"messages-box\");\n    if (messagesBox) {\n      messagesBox.scrollTo({\n        behavior: \"smooth\",\n        top: messagesBox.scrollHeight,\n      });\n    }\n    if (messages.length > 500) {\n      setMessages({ messages: messages.slice(-400) });\n    }\n  }, [messages.length]);\n\n  return (\n    <div id=\"messages-box\" className=\"messages-box\">\n      {messages.map((message, index) => {\n        const nid = nanoid();\n        return message && <Message key={nid} message={message.content} />;\n      })}\n    </div>\n  );\n};\n\nexport default MessagesBox;\n","import { Response } from \"../hooks/useAsync\";\nimport BASE_API from \"./CONSTANTS\";\n\nexport interface ActivePlayersResponse extends Response {\n  data: string[];\n}\n\nconst getActivePlayers = (): Promise<ActivePlayersResponse> => {\n  return fetch(`${BASE_API}/users`)\n    .then((res) => res.json())\n    .then(\n      (response) => response,\n      // Note: it's important to handle errors here\n      // instead of a catch() block so that we don't swallow\n      // exceptions from actual bugs in components.\n      (error) => error\n    );\n};\n\nexport { getActivePlayers };\n","export function preventReRender() {\n  return true;\n}\n","import { FC, memo } from \"react\";\nimport { getPlayerID, getPlayerName } from \"../../utils/game\";\n\ninterface ActivePlayer {\n  player: string;\n}\n\nconst ActivePlayer: FC<ActivePlayer> = ({ player }) => {\n  return (\n    <li className=\"active-player\">\n      <strong>{getPlayerName(player)}</strong>\n      <small>\n        <em>ID: {getPlayerID(player)}</em>\n      </small>\n    </li>\n  );\n};\n\nfunction areSameProps(prevProps: ActivePlayer, nextProps: ActivePlayer) {\n  return prevProps.player === nextProps.player;\n}\n\nexport default memo(ActivePlayer, areSameProps);\n","import { memo, useEffect } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { ActivePlayersResponse, getActivePlayers } from \"../../api/user\";\nimport useAsync, { ResponseStatus } from \"../../hooks/useAsync\";\nimport { getPlayerID } from \"../../utils/game\";\nimport { preventReRender } from \"../../utils/memo\";\nimport ActivePlayer from \"./ActivePlayer\";\n\nconst ListActivePlayers = () => {\n  const {\n    status,\n    value: activePlayersResponse,\n    error,\n    execute,\n  } = useAsync<ActivePlayersResponse>(getActivePlayers, true);\n\n  const { t } = useTranslation();\n\n  useEffect(() => {\n    const timeoutId = setTimeout(() => {\n      execute();\n    }, 10000);\n\n    return () => {\n      timeoutId && clearTimeout(timeoutId);\n    };\n  }, [status]);\n\n  return (\n    <div className=\"active-players-box\">\n      <h3>{t(\"Active players\")}</h3>\n      <ul>\n        {status === ResponseStatus.SUCCESS &&\n          activePlayersResponse?.data?.map(\n            (activePlayer: string, index: number) => (\n              <ActivePlayer\n                player={activePlayer}\n                key={getPlayerID(activePlayer)}\n              />\n            )\n          )}\n      </ul>\n    </div>\n  );\n};\n\nexport default memo(ListActivePlayers, preventReRender);\n","import { atom } from \"recoil\";\nimport { GameTypeState } from \"../../types/game\";\n\nconst gameSupportState = atom<{ supported: boolean; tutorial: boolean }>({\n  key: GameTypeState.GAME_SUPPORT_STATE,\n  default: {\n    supported: false,\n    tutorial: false,\n  },\n});\n\nexport default gameSupportState;\n","import { atom } from \"recoil\";\nimport { ChatSocketState, GameTypeState } from \"../../types/game\";\n\nconst chatSocketState = atom<ChatSocketState>({\n  key: GameTypeState.CHAT_SOCKET_STATE,\n  default: {\n    sendMakeGame: undefined,\n  },\n});\n\nexport default chatSocketState;\n","import { Response } from \"../hooks/useAsync\";\nimport BASE_API from \"./CONSTANTS\";\nimport { ActivePlayersResponse } from \"./user\";\n\nexport interface ActiveGamesResponse extends Response {\n  data: string[];\n}\n\nconst getActiveGames = (): Promise<ActiveGamesResponse> => {\n  return fetch(`${BASE_API}/games`)\n    .then((res) => res.json())\n    .then(\n      (response) => response,\n      // Note: it's important to handle errors here\n      // instead of a catch() block so that we don't swallow\n      // exceptions from actual bugs in components.\n      (error) => error\n    );\n};\n\nconst getPlayersInGame = (gameId: string): Promise<ActivePlayersResponse> => {\n  return fetch(`${BASE_API}/game/${gameId}`)\n    .then((res) => res.json())\n    .then(\n      (response) => response,\n      // Note: it's important to handle errors here\n      // instead of a catch() block so that we don't swallow\n      // exceptions from actual bugs in components.\n      (error) => error\n    );\n};\n\nexport { getActiveGames, getPlayersInGame };\n","import { FC, memo, useCallback } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { Link } from \"react-router-dom\";\nimport { getPlayersInGame } from \"../../api/game\";\nimport useAsync, { ResponseStatus } from \"../../hooks/useAsync\";\nimport { Routes } from \"../../routes/CONSTANTS\";\n\ninterface ActiveGame {\n  gameId: string;\n}\n\nconst ActiveGame: FC<ActiveGame> = ({ gameId }) => {\n  const { t } = useTranslation();\n  const fetchPlayersInGame = useCallback(\n    () => getPlayersInGame(gameId),\n    [gameId]\n  );\n  const { status: fetchStatus, value: playersInGameResponse } =\n    useAsync(fetchPlayersInGame);\n\n  const fullGameClass =\n    playersInGameResponse?.data?.length >= 2 ? \"full-slot\" : \"\";\n  return (\n    <>\n      {fetchStatus === ResponseStatus.SUCCESS && (\n        <li className={`active-player ${fullGameClass}`}>\n          <Link to={Routes.BATTLE_MODE_PAGE.replace(\":gameId\", gameId)}>\n            <button className=\"button-join-game\">\n              <span className=\"hidden-mobile\">{t(\"Join\")}:</span>\n              {gameId}\n            </button>\n          </Link>\n        </li>\n      )}\n    </>\n  );\n};\n\nfunction areSameProps(prevProps: ActiveGame, nextProps: ActiveGame) {\n  return prevProps.gameId === nextProps.gameId;\n}\n\nexport default ActiveGame;\n","import { memo, useEffect } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { ActiveGamesResponse, getActiveGames } from \"../../api/game\";\nimport useAsync, { ResponseStatus } from \"../../hooks/useAsync\";\nimport { preventReRender } from \"../../utils/memo\";\nimport ActiveGame from \"./ActiveGame\";\n\nconst ListActiveGames = () => {\n  const {\n    status,\n    value: activeGamesResponse,\n    error,\n    execute,\n  } = useAsync<ActiveGamesResponse>(getActiveGames, true);\n\n  const { t } = useTranslation();\n\n  useEffect(() => {\n    const timeoutId = setTimeout(() => {\n      execute();\n    }, 10000);\n\n    return () => {\n      timeoutId && clearTimeout(timeoutId);\n    };\n  }, [status]);\n\n  return (\n    <div className=\"active-players-box\">\n      <h3>{t(\"Active games\")}</h3>\n      <ul>\n        {status === ResponseStatus.SUCCESS &&\n          activeGamesResponse?.data?.map((gameId: string, index: number) => (\n            <ActiveGame gameId={gameId} key={gameId} />\n          ))}\n      </ul>\n    </div>\n  );\n};\n\nexport default memo(ListActiveGames, preventReRender);\n","import {\n  FC,\n  FormEventHandler,\n  memo,\n  useCallback,\n  useEffect,\n  useState,\n} from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport useWebSocket, { ReadyState } from \"react-use-websocket\";\nimport { useRecoilState, useRecoilValue, useSetRecoilState } from \"recoil\";\nimport gameSoundState from \"../recoil/atoms/gameSoundState\";\nimport messagesState from \"../recoil/atoms/messagesState\";\nimport playerState from \"../recoil/atoms/playerState\";\nimport ChatBox from \"./Chat/ChatBox\";\nimport MessagesBox from \"./Chat/MessagesBox\";\nimport ListActivePlayers from \"./Chat/ListActivePlayers\";\nimport { BASE_WS_URL, DEFAULT_CHANNEL } from \"../types/chat\";\nimport gameSupportState from \"../recoil/atoms/gameSupportState\";\nimport chatSocketState from \"../recoil/atoms/chatSocketState\";\nimport useChatSocket from \"../hooks/useChatSocket\";\nimport ListActiveGames from \"./Chat/ListActiveGames\";\n\ninterface ChatRoomProps {\n  room: string;\n}\n\nconst ChatRoom: FC<ChatRoomProps> = ({ room }) => {\n  const { t } = useTranslation();\n  const { player } = useRecoilValue(playerState);\n  const [{ supported }, setGameSupport] = useRecoilState(gameSupportState);\n  const { playPopUpOnSound } = useRecoilValue(gameSoundState);\n  const setMessagesState = useSetRecoilState(messagesState);\n  const setChatSocketState = useSetRecoilState(chatSocketState);\n  const [socketUrl] = useState(`${BASE_WS_URL}/chat`);\n  const { sendJsonMessage, readyState, lastJsonMessage, lastMessage } =\n    useWebSocket(socketUrl, {\n      reconnectAttempts: 30,\n      reconnectInterval: 5000,\n      retryOnError: true,\n      shouldReconnect: () => true,\n      queryParams: {\n        username: player,\n      },\n      onOpen: () => {\n        setTimeout(() => {\n          const helpMessage = {\n            command: 2,\n            channel: DEFAULT_CHANNEL,\n            name: \"PokeBot\",\n            content: t(\"Welcome to pokemon game!\", { name: player }),\n            timestamp: Date.now(),\n          };\n          sendJsonMessage(helpMessage);\n          if (supported === false) {\n            setTimeout(() => {\n              const helpMessage = {\n                command: 2,\n                channel: DEFAULT_CHANNEL,\n                name: \"PokeBot\",\n                content: t(\n                  \"(Help) Please click on make match to create your own match!\",\n                  {\n                    name: player,\n                  }\n                ),\n                timestamp: Date.now(),\n              };\n              setMessagesState(({ messages }) => ({\n                messages: [\n                  ...messages,\n                  {\n                    content: JSON.stringify(helpMessage),\n                    channel: DEFAULT_CHANNEL,\n                  },\n                ],\n              }));\n              setTimeout(() => {\n                const helpMessage = {\n                  command: 2,\n                  channel: DEFAULT_CHANNEL,\n                  name: \"PokeBot\",\n                  content: t(\n                    \"(Help) You can click on a `Game ID` of others to join the match.\",\n                    {\n                      name: player,\n                    }\n                  ),\n                  timestamp: Date.now(),\n                };\n                setMessagesState(({ messages }) => ({\n                  messages: [\n                    ...messages,\n                    {\n                      content: JSON.stringify(helpMessage),\n                      channel: DEFAULT_CHANNEL,\n                    },\n                  ],\n                }));\n                setGameSupport((gameSupport) => ({\n                  ...gameSupport,\n                  supported: true,\n                }));\n              }, 5000);\n            }, 5000);\n          }\n        }, 5000);\n      },\n      onMessage: (event) => {\n        playPopUpOnSound && playPopUpOnSound();\n      },\n      onClose: () => {\n        const closeMessage = {\n          command: 2,\n          channel: DEFAULT_CHANNEL,\n          name: \"PokeBot\",\n          content: t(\"Sorry, I'm trying to connect our service again.\", {\n            name: player,\n          }),\n          timestamp: Date.now(),\n        };\n        setMessagesState(({ messages }) => ({\n          messages: [\n            ...messages,\n            { content: JSON.stringify(closeMessage), channel: DEFAULT_CHANNEL },\n          ],\n        }));\n      },\n      onError: () => {\n        const closeMessage = {\n          command: 2,\n          channel: DEFAULT_CHANNEL,\n          name: \"PokeBot\",\n          content: t(\n            \"Connect to service failed. Will try again in the next 5s. Please wait for it.\"\n          ),\n          timestamp: Date.now(),\n        };\n        setMessagesState(({ messages }) => ({\n          messages: [\n            ...messages,\n            { content: JSON.stringify(closeMessage), channel: DEFAULT_CHANNEL },\n          ],\n        }));\n      },\n    });\n\n  const reTryConnectSocket = () => {\n    window.location.reload();\n  };\n\n  const { sendMakeGame } = useChatSocket({\n    sendJsonMessage,\n    player,\n  });\n\n  useEffect(() => {\n    setChatSocketState((chatSocketState) => ({\n      ...chatSocketState,\n      sendMakeGame,\n    }));\n  }, [sendMakeGame]);\n\n  useEffect(() => {\n    lastJsonMessage &&\n      setMessagesState(({ messages }) => ({\n        messages: [...messages, lastJsonMessage],\n      }));\n  }, [lastMessage]);\n\n  const handleClickSendMessage = useCallback((message) => {\n    const messageJson = {\n      command: 2,\n      channel: DEFAULT_CHANNEL,\n      name: player,\n      content: message,\n      timestamp: Date.now(),\n    };\n    // playPopUpOnSound();\n    sendJsonMessage(messageJson);\n  }, []);\n\n  const handleSubmit: FormEventHandler<HTMLFormElement> = (event) => {\n    event.preventDefault();\n    const inputMessage = event.currentTarget.message;\n    inputMessage.setAttribute(\"disabled\", \"true\");\n    const message = inputMessage.value.replace(\n      /\\b(dit|du|fuck|cu|dcm|dm|dcm|cat)\\b/g,\n      \"*\"\n    );\n    if (message && message.trim() !== \"\") {\n      handleClickSendMessage(message.replaceAll(\"`\", \"\"));\n      inputMessage.value = \"\";\n    } else {\n      alert(t(\"Please enter your message\"));\n    }\n    inputMessage.removeAttribute(\"disabled\");\n    inputMessage.focus();\n  };\n\n  return (\n    <div className=\"chat-room\">\n      <div className=\"chat-container\">\n        <div className=\"chat-box-container\">\n          <MessagesBox />\n          {readyState === ReadyState.OPEN && (\n            <ChatBox handleSubmit={handleSubmit} />\n          )}\n          {[\n            ReadyState.CLOSED,\n            ReadyState.CLOSING,\n            ReadyState.CONNECTING,\n          ].includes(readyState) && (\n            <div className=\"service-status\">\n              {t(\"Service is not available now.\")}\n              <strong className=\"clickable\" onClick={reTryConnectSocket}>\n                {t(\"Please try again\")}\n              </strong>\n            </div>\n          )}\n        </div>\n        <div className=\"active-boxes\">\n          <ListActivePlayers />\n          <ListActiveGames />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nfunction areEqualProps(prevProps: ChatRoomProps, nextProps: ChatRoomProps) {\n  return prevProps.room === nextProps.room;\n}\n\nexport default memo(ChatRoom, areEqualProps);\n","import { SendJsonMessage } from \"react-use-websocket/dist/lib/types\";\nimport { DEFAULT_CHANNEL } from \"../types/chat\";\nimport { ChatSocketMessage, SocketCommand } from \"../types/game\";\n\ninterface UseGameBattleSocketProps {\n  sendJsonMessage: SendJsonMessage;\n  player: string;\n}\n\nexport default function useChatSocket({\n  sendJsonMessage,\n  player,\n}: UseGameBattleSocketProps) {\n  const baseMessageJson: ChatSocketMessage = {\n    command: SocketCommand.SEND_MESSAGE,\n    channel: DEFAULT_CHANNEL,\n    name: player,\n  };\n  const sendMakeGame = (message: string) => {\n    const messageJson = {\n      ...baseMessageJson,\n      content: message,\n      timestamp: Date.now(),\n    };\n    sendJsonMessage(messageJson);\n  };\n\n  return {\n    sendMakeGame,\n  };\n}\n","import { ReadyState } from \"react-use-websocket\";\nimport { atom } from \"recoil\";\nimport { GameBattleState, GameTypeState } from \"../../types/game\";\n\nconst gameBattleState = atom<GameBattleState>({\n  key: GameTypeState.GAME_BATTLE_STATE,\n  default: {\n    gameId: undefined,\n    allReady: [],\n    competitor: undefined,\n    winner: undefined,\n    socketStatus: ReadyState.UNINSTANTIATED,\n    sendSelectedPokemon: undefined,\n    sendReadyGame: undefined,\n    sendUnReadyGame: undefined,\n    sendQuitGame: undefined,\n    sendJoinedGame: undefined,\n    sendDecreasePoints: undefined,\n    sendIncreasePoints: undefined,\n    sendGameEffect: undefined,\n    sendGameWinner: undefined,\n  },\n});\n\nexport default gameBattleState;\n","import { nanoid } from \"nanoid\";\nimport { FormEventHandler, KeyboardEventHandler, useEffect } from \"react\";\nimport { Helmet } from \"react-helmet\";\nimport { useTranslation } from \"react-i18next\";\nimport { Link, useHistory } from \"react-router-dom\";\nimport { useRecoilValue, useResetRecoilState, useSetRecoilState } from \"recoil\";\nimport ChatRoom from \"../components/ChatRoom\";\nimport SwitchLanguage from \"../components/SwitchLanguage\";\nimport Welcome from \"../components/Welcome\";\nimport chatSocketState from \"../recoil/atoms/chatSocketState\";\nimport gameBattleState from \"../recoil/atoms/gameBattleState\";\nimport gameSoundState from \"../recoil/atoms/gameSoundState\";\nimport { Routes } from \"../routes/CONSTANTS\";\nimport { DEFAULT_CHANNEL } from \"../types/chat\";\n\nconst MultiPlayerPage = () => {\n  const { t } = useTranslation();\n  const history = useHistory();\n  const { playPopUpOnSound, playGlugSound } = useRecoilValue(gameSoundState);\n  const resetGameBattle = useResetRecoilState(gameBattleState);\n  const { sendMakeGame } = useRecoilValue(chatSocketState);\n\n  useEffect(() => {\n    resetGameBattle();\n  }, []);\n\n  const findRandomMatch = () => {\n    playGlugSound && playGlugSound();\n    alert(t(\"In development\"));\n  };\n\n  const goToGameMatch = () => {\n    playPopUpOnSound && playPopUpOnSound();\n    const gameId = nanoid(8);\n    const message = t(\"New game ID just created\", { gameId });\n    sendMakeGame && sendMakeGame(message);\n\n    setTimeout(() => {\n      history.push(Routes.BATTLE_MODE_PAGE.replace(\":gameId\", gameId));\n    }, 200);\n  };\n\n  const enterMatchID: FormEventHandler<HTMLFormElement> = (event) => {\n    event.preventDefault();\n    const gameId = event.currentTarget.matchId.value;\n    if (\n      !event.currentTarget.matchId.value ||\n      event.currentTarget.matchId.value.trim() === \"\"\n    ) {\n      playGlugSound && playGlugSound();\n      alert(t(\"Please enter the right match ID\"));\n      return;\n    }\n    history.push(Routes.BATTLE_MODE_PAGE.replace(\":gameId\", gameId));\n  };\n\n  return (\n    <div className=\"chat-board\">\n      <Helmet>\n        <meta charSet=\"utf-8\" />\n        <title>Pika pika! - Multi player</title>\n      </Helmet>\n      <div className=\"game-board\">\n        <ChatRoom room={DEFAULT_CHANNEL} />\n      </div>\n      <div className=\"sidebar\">\n        <div className=\"game-info\">\n          <h1 className=\"game-title\">{t(\"Multi player\")}</h1>\n          <p className=\"mobile-helper\">{t(\"Scroll down to chat\")}</p>\n          <Welcome />\n        </div>\n        <div>\n          <div className=\"text-center\">\n            <button onClick={goToGameMatch}>{t(\"Make match\")}</button>\n            {/* <button onClick={findRandomMatch}>{t(\"Find random match\")}</button> */}\n            <div className=\"inline-button\">\n              <form onSubmit={enterMatchID}>\n                <input\n                  name=\"matchId\"\n                  maxLength={8}\n                  placeholder={t(\"Enter match ID\")}\n                />\n                <button>{t(\"Join\")}</button>\n              </form>\n            </div>\n            <Link to={Routes.MAIN_PAGE}>\n              <button onClick={() => playPopUpOnSound && playPopUpOnSound()}>\n                {t(\"Main menu\")}\n              </button>\n            </Link>\n          </div>\n        </div>\n        <SwitchLanguage />\n      </div>\n    </div>\n  );\n};\n\nexport default MultiPlayerPage;\n","import { FC, memo } from \"react\";\nimport { GameStatus, Pokemon } from \"../../types/game\";\n\ntype PokemonCardProps = {\n  pokemon: Pokemon;\n  rowIndex: number;\n  colIndex: number;\n  isSelected: number | boolean;\n  status: GameStatus;\n  selectPokemon: (\n    pokemonId: string,\n    rowIndex: number,\n    colIndex: number\n  ) => void;\n};\n\nconst PokemonCard: FC<PokemonCardProps> = ({\n  pokemon,\n  rowIndex,\n  colIndex,\n  isSelected,\n  status,\n  selectPokemon,\n}) => {\n  const selected = isSelected ? \"selected\" : \"\";\n  const hidden = pokemon.matched ? \"hidden\" : \"\";\n  return (\n    <div\n      style={{\n        backgroundImage: `url(${pokemon.image ?? \"\"})`,\n      }}\n      className={`pokemon-card ${selected} ${hidden}`}\n      onClick={() => {\n        if (\n          !isSelected &&\n          !pokemon.matched &&\n          status === GameStatus.RUNNING &&\n          pokemon.nid\n        ) {\n          selectPokemon(pokemon.nid, rowIndex, colIndex);\n        }\n      }}\n    />\n  );\n};\n\nfunction propsAreEquals(\n  prevProps: PokemonCardProps,\n  nextProps: PokemonCardProps\n) {\n  return (\n    prevProps.pokemon.nid === nextProps.pokemon.nid &&\n    prevProps.pokemon.image === nextProps.pokemon.image &&\n    prevProps.pokemon.matched === nextProps.pokemon.matched &&\n    prevProps.isSelected === nextProps.isSelected &&\n    prevProps.status === nextProps.status\n  );\n}\n\nexport default memo(PokemonCard, propsAreEquals);\n","import { FC } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { useRecoilValue } from \"recoil\";\nimport { useGameActions } from \"../../hooks/useGameActions\";\nimport selectedPokemonsState from \"../../recoil/atoms/selectedPokemonsState\";\n\nimport { GameMode, GameStatus, Pokemon } from \"../../types/game\";\nimport PokemonCard from \"./PokemonCard\";\n\ntype PokemonRowProps = {\n  pokemons: Pokemon[];\n  rowIndex: number;\n  mode: GameMode;\n  status: GameStatus;\n};\n\nconst PokemonRow: FC<PokemonRowProps> = ({\n  pokemons,\n  rowIndex,\n  mode,\n  status,\n}) => {\n  const selectedPokemons = useRecoilValue(selectedPokemonsState);\n  const { selectPokemon } = useGameActions(mode);\n  return (\n    <>\n      {pokemons.map((pokemon, index) => (\n        <PokemonCard\n          key={`card-${index}`}\n          pokemon={pokemon}\n          rowIndex={rowIndex}\n          colIndex={index}\n          isSelected={\n            pokemon.nid !== undefined &&\n            selectedPokemons.findIndex(({ nid }) => nid === pokemon.nid) >= 0\n          }\n          selectPokemon={selectPokemon}\n          status={status}\n        />\n      ))}\n    </>\n  );\n};\n\nexport default PokemonRow;\n","import { useEffect } from \"react\";\nimport { useLocation } from \"react-router-dom\";\nimport { useRecoilValue, useSetRecoilState } from \"recoil\";\nimport gameSoundState from \"../recoil/atoms/gameSoundState\";\nimport gameState from \"../recoil/atoms/gameState\";\nimport playerState from \"../recoil/atoms/playerState\";\nimport {\n  GameLevel,\n  GameMode,\n  GameStatus,\n  LEVEL_MAX,\n  nextLevel,\n  Pokemon,\n} from \"../types/game\";\nimport {\n  generatePokemonMatrix,\n  checkCompletedLevel,\n  hasAnyConnectLine,\n  reShufflePokemonList,\n} from \"../utils/game\";\nimport { useGameActions } from \"./useGameActions\";\n\nexport default function useGameEngine(mode: GameMode) {\n  const location = useLocation();\n  const {\n    playFanfareSound,\n    playLevelUpSound,\n    playCompletedGameSound,\n    playYouWinSound,\n  } = useRecoilValue(gameSoundState);\n  const {\n    initGame,\n    replayGame,\n    endGame,\n    addNewRankingScore,\n    updateNewRankingScore,\n  } = useGameActions(mode);\n  const setGame = useSetRecoilState(gameState);\n  const currentPlayer = useRecoilValue(playerState);\n  const { matrix, row, col, status, pokemons, level } =\n    useRecoilValue(gameState);\n  const shuffleMatrix = (pokemons: Record<string, Pokemon>) => {\n    const newShufflePokemons = reShufflePokemonList(pokemons);\n    const { pokemonMatrix, pokemons: newPokemons } = generatePokemonMatrix(\n      newShufflePokemons,\n      row,\n      col\n    );\n    setGame({\n      pokemons: newPokemons,\n      matrix: pokemonMatrix,\n      level,\n      row,\n      col,\n      status: GameStatus.RUNNING,\n    });\n  };\n\n  // Setup game\n  useEffect(() => {\n    if (status === GameStatus.PENDING) {\n      // playFanfareSound && playFanfareSound();\n      initGame(level);\n      addNewRankingScore(mode, currentPlayer.player);\n    }\n    return () => {\n      // cleanup\n    };\n  }, [status, initGame]);\n\n  // Check game completed and post result\n  useEffect(() => {\n    if (status === GameStatus.COMPLETED) {\n      if (currentPlayer.rankingId) {\n        updateNewRankingScore(\n          currentPlayer.rankingId,\n          mode,\n          currentPlayer.player,\n          currentPlayer.playerTiming\n        );\n      }\n    }\n  }, [currentPlayer.rankingId, currentPlayer.playerTiming]);\n\n  // Check completed one level and re-start new one higher level\n  useEffect(() => {\n    if (checkCompletedLevel(pokemons)) {\n      const levelUp: GameLevel = nextLevel[level];\n      if (levelUp !== LEVEL_MAX || mode === GameMode.SURVIVAL_MODE) {\n        initGame(levelUp, GameStatus.RUNNING);\n        playCompletedGameSound && playCompletedGameSound();\n      } else {\n        if (mode === GameMode.SPEED_MODE) {\n          playYouWinSound && playYouWinSound();\n          setGame({\n            matrix,\n            row,\n            col,\n            pokemons,\n            level,\n            status: GameStatus.COMPLETED,\n          });\n        }\n      }\n    } else {\n      const { foundConnectLine } = hasAnyConnectLine(\n        pokemons,\n        matrix,\n        row,\n        col\n      );\n      if (Object.keys(pokemons).length && foundConnectLine === false) {\n        shuffleMatrix(pokemons);\n        playLevelUpSound && playLevelUpSound();\n      }\n    }\n  }, [pokemons]);\n\n  // Setup new game if access directly from browser\n  useEffect(() => {\n    if (status === GameStatus.RUNNING) {\n      // playFanfareSound && playFanfareSound();\n      initGame(GameLevel.LEVEL_1);\n    }\n  }, [location]);\n\n  return {\n    initGame,\n    replayGame,\n    endGame,\n    matrix,\n    row,\n    col,\n    status,\n    level,\n  };\n}\n","import PokemonRow from \"./Game/PokemonRow\";\nimport useGameEngine from \"../hooks/useGameEngine\";\nimport { GameMode } from \"../types/game\";\nimport { FC } from \"react\";\n\nconst GameBoard: FC<{ mode: GameMode }> = ({ mode }) => {\n  const { matrix, row, col, status } = useGameEngine(mode);\n\n  return (\n    <div className={`game-pokemon board-${row}x${col}`}>\n      {matrix &&\n        matrix.map((pokemons, index) => (\n          <PokemonRow\n            mode={mode}\n            key={`row-${index}`}\n            rowIndex={index}\n            pokemons={pokemons}\n            status={status}\n          />\n        ))}\n    </div>\n  );\n};\n\nexport default GameBoard;\n","import { FC, memo, useEffect, useRef } from \"react\";\nimport { PointCoords } from \"../../types/game\";\n\ntype LineCardProps = {\n  point?: PointCoords;\n  suggested: boolean;\n  rowIndex: number;\n  colIndex: number;\n};\n\nconst LineCard: FC<LineCardProps> = ({\n  point,\n  suggested,\n  rowIndex,\n  colIndex,\n}) => {\n  const type = point && point.type ? `${point.type}-point` : \"\";\n  const direction =\n    point && point.direction ? `${point.direction}-direction` : \"\";\n  const pointClass = point ? `in-line ${direction} ${type}` : \"\";\n  const suggestedClass = suggested ? `suggested` : pointClass;\n  const lineRef = useRef<HTMLDivElement>(null);\n  useEffect(() => {\n    setTimeout(() => {\n      if (lineRef.current) {\n        direction && lineRef.current.classList.remove(direction);\n        type && lineRef.current.classList.remove(type);\n      }\n    }, 300);\n    return () => {};\n  }, [lineRef, direction, type]);\n\n  return (\n    <div ref={lineRef} className={`line-card ${suggestedClass}`}>\n      <strong>\n        {rowIndex},{colIndex}\n      </strong>\n    </div>\n  );\n};\n\nfunction propsAreEquals(prevProps: LineCardProps, nextProps: LineCardProps) {\n  if (prevProps.point === undefined && nextProps.point === undefined) {\n    return prevProps.suggested === nextProps.suggested;\n  }\n\n  return (\n    prevProps.suggested === nextProps.suggested &&\n    prevProps.point?.direction === nextProps.point?.direction &&\n    prevProps.point?.type === nextProps.point?.type\n  );\n}\n\nexport default memo(LineCard, propsAreEquals);\n","import { FC } from \"react\";\nimport { PointCoords, Pokemon } from \"../../types/game\";\nimport { checkPointInLine } from \"../../utils/game\";\nimport LineCard from \"./LineCard\";\n\ntype LineRowProps = {\n  cards: Pokemon[] | number[];\n  rowIndex: number;\n  connectingLinePoints: PointCoords[];\n  suggestPoints: [PointCoords | undefined, PointCoords | undefined];\n};\n\nconst LineRow: FC<LineRowProps> = ({\n  cards,\n  rowIndex,\n  connectingLinePoints,\n  suggestPoints,\n}) => {\n  return (\n    <>\n      {cards.map((_, colIndex) => (\n        <LineCard\n          key={`card-${colIndex}`}\n          rowIndex={rowIndex}\n          colIndex={colIndex}\n          point={checkPointInLine(connectingLinePoints, { rowIndex, colIndex })}\n          suggested={\n            suggestPoints &&\n            suggestPoints.findIndex(\n              (suggestPoint) =>\n                suggestPoint?.rowIndex === rowIndex &&\n                suggestPoint?.colIndex === colIndex\n            ) >= 0\n          }\n        />\n      ))}\n    </>\n  );\n};\n\nexport default LineRow;\n","import LineRow from \"./Game/LineRow\";\nimport useGameOverlayEngine from \"../hooks/useGameOverlayEngine\";\nimport { useEffect } from \"react\";\nimport { FREEZING_TIME } from \"../types/game\";\n\nconst GameOverlay = () => {\n  const {\n    connectingLinePoints,\n    suggestPoints,\n    matrix,\n    row,\n    col,\n    freezing,\n    setGameOverlayState,\n  } = useGameOverlayEngine();\n\n  const columnCards = new Array(col + 2).fill(false);\n  const freezingClass = freezing ? \"freezing-board\" : \"\";\n\n  useEffect(() => {\n    if (freezing) {\n      setTimeout(() => {\n        setGameOverlayState((gameOverlayState) => ({\n          ...gameOverlayState,\n          freezing: false,\n        }));\n      }, FREEZING_TIME * 1000);\n    }\n  }, [freezing]);\n\n  return (\n    <div className={`game-overlay board-${row}x${col} ${freezingClass}`}>\n      {matrix &&\n        matrix.map((_, index) => (\n          <LineRow\n            key={`row-${index}`}\n            cards={columnCards}\n            rowIndex={index}\n            connectingLinePoints={connectingLinePoints}\n            suggestPoints={suggestPoints}\n          />\n        ))}\n    </div>\n  );\n};\n\nexport default GameOverlay;\n","import { useRecoilState, useRecoilValue } from \"recoil\";\nimport gameState from \"../recoil/atoms/gameState\";\nimport gameOverlayState from \"../recoil/atoms/gameOverlayState\";\n\nexport default function useGameOverlayEngine() {\n  const [\n    { connectingLinePoints, suggestPoints, freezing },\n    setGameOverlayState,\n  ] = useRecoilState(gameOverlayState);\n  const { matrix, row, col, status } = useRecoilValue(gameState);\n\n  return {\n    connectingLinePoints,\n    suggestPoints,\n    matrix,\n    row,\n    col,\n    status,\n    freezing,\n    setGameOverlayState,\n  };\n}\n","import { useTranslation } from \"react-i18next\";\nimport { useRecoilValue } from \"recoil\";\nimport gameState from \"../../recoil/atoms/gameState\";\n\nconst GameLevel = () => {\n  const { t } = useTranslation();\n  const { level } = useRecoilValue(gameState);\n  return (\n    <h3 className=\"game-title\">\n      {t(\"Level\")} {level} / 14\n    </h3>\n  );\n};\n\nexport default GameLevel;\n","import { FC, useEffect, useRef, useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { useRecoilState, useRecoilValue } from \"recoil\";\nimport gameState from \"../../recoil/atoms/gameState\";\nimport playerState from \"../../recoil/atoms/playerState\";\nimport {\n  GameMode,\n  GameStatus,\n  PENALTY_TIME,\n  PENDING_TIME,\n  SUGGEST_TIME,\n} from \"../../types/game\";\nimport { timeConvert } from \"../../utils/time\";\nimport gameOverlayState from \"../../recoil/atoms/gameOverlayState\";\nimport gameSoundState from \"../../recoil/atoms/gameSoundState\";\nimport { useGameActions } from \"../../hooks/useGameActions\";\nimport { hasAnyConnectLine } from \"../../utils/game\";\n\nconst GameTiming: FC<{ hasTiming: boolean }> = ({ hasTiming = false }) => {\n  const { t } = useTranslation();\n  const { status, pokemons, matrix, row, col } = useRecoilValue(gameState);\n  const { playRisingPopSound, playGlugSound } = useRecoilValue(gameSoundState);\n  const [currentPlayer, setPlayer] = useRecoilState(playerState);\n  const [{ connectingLinePoints }, setGameOverlay] =\n    useRecoilState(gameOverlayState);\n  const [timingState, setTimingState] = useState(0);\n  const timing = useRef(0);\n  const suggestTiming = useRef(0);\n  const pendingTiming = useRef(PENDING_TIME);\n  const { startGame } = useGameActions(GameMode.SPEED_MODE);\n\n  // count timing when running, stop when completed\n  useEffect(() => {\n    let timeoutId: NodeJS.Timeout | undefined = undefined;\n\n    if (status === GameStatus.PENDING && hasTiming) {\n      timing.current = 0;\n    }\n\n    if (status === GameStatus.RUNNING) {\n      if (hasTiming) {\n        if (suggestTiming.current >= SUGGEST_TIME) {\n          const { foundConnectLine, fromPoint, toPoint } = hasAnyConnectLine(\n            pokemons,\n            matrix,\n            row,\n            col\n          );\n          if (foundConnectLine) {\n            setGameOverlay((gameOverlay) => ({\n              ...gameOverlay,\n              suggestPoints: [fromPoint, toPoint],\n            }));\n          }\n          suggestTiming.current = 0;\n        }\n      }\n      timeoutId = setTimeout(() => {\n        timing.current++;\n        suggestTiming.current++;\n        setTimingState(timingState + 1);\n      }, 1000);\n    }\n\n    // update timing to make score\n    if (status === GameStatus.COMPLETED) {\n      if (timeoutId) {\n        clearTimeout(timeoutId);\n      }\n    }\n\n    return () => {\n      timeoutId && clearTimeout(timeoutId);\n    };\n  }, [status, timingState]);\n\n  useEffect(() => {\n    let intervalId: NodeJS.Timeout | undefined = undefined;\n    if (status === GameStatus.PENDING) {\n      if (hasTiming) {\n        setGameOverlay((gameOverlay) => ({\n          ...gameOverlay,\n          suggestPoints: [undefined, undefined],\n        }));\n      }\n\n      timing.current = 0;\n      pendingTiming.current = PENDING_TIME;\n      const countdownEl = document.getElementById(\"count-down-pending-timing\");\n      if (countdownEl) countdownEl.innerText = pendingTiming.current.toString();\n      intervalId = setInterval(() => {\n        if (pendingTiming.current <= 1) {\n          intervalId && clearInterval(intervalId);\n          pendingTiming.current = PENDING_TIME;\n          startGame();\n        } else {\n          pendingTiming.current--;\n        }\n        const countdownEl = document.getElementById(\n          \"count-down-pending-timing\"\n        );\n        if (countdownEl)\n          countdownEl.innerText = pendingTiming.current.toString();\n      }, 1000);\n    }\n\n    if (status === GameStatus.COMPLETED) {\n      intervalId && clearInterval(intervalId);\n      if (hasTiming) {\n        suggestTiming.current = 0;\n        setPlayer({ ...currentPlayer, playerTiming: timing.current });\n      }\n    }\n    return () => {\n      suggestTiming.current = 0;\n      pendingTiming.current = PENDING_TIME;\n      intervalId && clearInterval(intervalId);\n    };\n  }, [status]);\n\n  // check rule time\n  useEffect(() => {\n    if (connectingLinePoints.length === 1) {\n      playGlugSound && playGlugSound();\n      timing.current += PENALTY_TIME;\n    }\n    if (connectingLinePoints.length > 1) {\n      suggestTiming.current = 0;\n      playRisingPopSound && playRisingPopSound();\n    }\n  }, [connectingLinePoints]);\n\n  return (\n    <>\n      {!hasTiming && (\n        <div\n          key=\"count-down\"\n          id=\"count-down-pending-timing\"\n          className=\"overlay-pending-timing\"\n        >\n          {pendingTiming.current}\n        </div>\n      )}\n      <p className=\"text-center\">\n        {t(\"Your time\")}: {timeConvert(timing.current)}\n      </p>\n    </>\n  );\n};\n\nexport default GameTiming;\n","import { FC } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { useRecoilValue } from \"recoil\";\nimport gameState from \"../../recoil/atoms/gameState\";\nimport playerState from \"../../recoil/atoms/playerState\";\nimport { GameStatus } from \"../../types/game\";\nimport { getPlayerName } from \"../../utils/game\";\n\nconst GameTitle: FC<{ title: string }> = ({ title }) => {\n  const { t } = useTranslation();\n  const { player } = useRecoilValue(playerState);\n  const { status } = useRecoilValue(gameState);\n\n  return (\n    <h1 className=\"game-title\">\n      {status === GameStatus.COMPLETED\n        ? t(\"Congratulations\") + \" \" + getPlayerName(player)\n        : title}\n    </h1>\n  );\n};\n\nexport default GameTitle;\n","import { FC } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { useRecoilValue } from \"recoil\";\nimport playerState from \"../../recoil/atoms/playerState\";\n\nconst GameReplay: FC<{ action: Function }> = ({ action }) => {\n  const { t } = useTranslation();\n  const { player } = useRecoilValue(playerState);\n  return (\n    <p>\n      <button onClick={() => action(player)}>{t(\"Replay\")}</button>\n    </p>\n  );\n};\n\nexport default GameReplay;\n","import { FC } from \"react\";\n\nimport { GameMode } from \"../../types/game\";\nimport { useGameActions } from \"../../hooks/useGameActions\";\nimport GameLevel from \"./GameLevel\";\nimport GameTiming from \"./GameTiming\";\nimport GameTitle from \"./GameTitle\";\nimport GameReplay from \"./GameReplay\";\nimport { useTranslation } from \"react-i18next\";\n\nconst GameSpeedInfo: FC<{ hasTiming?: boolean }> = ({ hasTiming = false }) => {\n  const { t } = useTranslation();\n  const { replayGame } = useGameActions(GameMode.SPEED_MODE);\n\n  return (\n    <div className=\"game-info\">\n      <GameTitle title={t(\"Speed mode\")} />\n      <GameLevel />\n      <GameTiming hasTiming={hasTiming} />\n      <GameReplay action={replayGame} />\n    </div>\n  );\n};\n\nexport default GameSpeedInfo;\n","import { useTranslation } from \"react-i18next\";\nimport { Link } from \"react-router-dom\";\nimport { Routes } from \"../routes/CONSTANTS\";\nimport GameBoard from \"../components/GameBoard\";\nimport GameOverlay from \"../components/GameOverlay\";\nimport { useRecoilValue } from \"recoil\";\nimport gameSoundState from \"../recoil/atoms/gameSoundState\";\nimport gameState from \"../recoil/atoms/gameState\";\nimport GameSpeedInfo from \"../components/Game/GameSpeedInfo\";\nimport SwitchLanguage from \"../components/SwitchLanguage\";\nimport { GameMode } from \"../types/game\";\nimport { Helmet } from \"react-helmet\";\n\nconst SpeedModePage = () => {\n  const { t } = useTranslation();\n  const { status } = useRecoilValue(gameState);\n  const { playPopUpOnSound } = useRecoilValue(gameSoundState);\n\n  return (\n    <div className=\"game-container\">\n      <Helmet>\n        <meta charSet=\"utf-8\" />\n        <title>Pika pika! - Speed mode board</title>\n      </Helmet>\n      <div className={`game-board game-${status}`}>\n        <GameSpeedInfo />\n        <GameOverlay />\n        <GameBoard mode={GameMode.SPEED_MODE} />\n      </div>\n      <div className=\"sidebar\">\n        <GameSpeedInfo hasTiming />\n        <div>\n          <blockquote className=\"game-helper\">\n            {t(\"Please complete all levels as fast as you can\")}\n          </blockquote>\n          <blockquote className=\"game-helper\">\n            {t(\"Choosing the wrong pair will increase the time\")}\n          </blockquote>\n        </div>\n        <Link to={Routes.SINGLE_PLAYER_PAGE}>\n          <button onClick={() => playPopUpOnSound && playPopUpOnSound()}>\n            {t(\"Back\")}\n          </button>\n        </Link>\n        <p className=\"mobile-helper\">{t(\"Scroll down to play\")}</p>\n        <SwitchLanguage />\n      </div>\n    </div>\n  );\n};\n\nexport default SpeedModePage;\n","import { FC, useEffect, useRef, useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { useRecoilState, useRecoilValue } from \"recoil\";\nimport { useGameActions } from \"../../hooks/useGameActions\";\nimport gameOverlayState from \"../../recoil/atoms/gameOverlayState\";\nimport gameSoundState from \"../../recoil/atoms/gameSoundState\";\nimport gameState from \"../../recoil/atoms/gameState\";\nimport playerState from \"../../recoil/atoms/playerState\";\nimport {\n  BASE_START_TIME,\n  BONUS_TIME,\n  GameMode,\n  GameStatus,\n  PENALTY_TIME,\n  PENDING_TIME,\n  SUGGEST_TIME,\n} from \"../../types/game\";\nimport { hasAnyConnectLine } from \"../../utils/game\";\nimport { timeConvert } from \"../../utils/time\";\n\nconst GameSurvivalTiming: FC<{ hasTiming: boolean }> = ({\n  hasTiming = false,\n}) => {\n  const { t } = useTranslation();\n  const { status, pokemons, matrix, row, col } = useRecoilValue(gameState);\n  const { playRisingPopSound, playGlugSound } = useRecoilValue(gameSoundState);\n  const [timingState, setTimingState] = useState(0);\n  const timing = useRef(0);\n  const remainTiming = useRef(BASE_START_TIME);\n  const pendingTiming = useRef(PENDING_TIME);\n  const suggestTiming = useRef(0);\n  const [currentPlayer, setPlayer] = useRecoilState(playerState);\n  const { endGame, startGame } = useGameActions(GameMode.SURVIVAL_MODE);\n  const [{ connectingLinePoints }, setGameOverlay] =\n    useRecoilState(gameOverlayState);\n\n  // count timing when running, stop when completed\n  useEffect(() => {\n    let timeoutId: NodeJS.Timeout | undefined = undefined;\n\n    if (status === GameStatus.PENDING && hasTiming) {\n      timing.current = 0;\n      remainTiming.current = BASE_START_TIME;\n    }\n\n    if (status === GameStatus.RUNNING) {\n      if (hasTiming) {\n        if (suggestTiming.current >= SUGGEST_TIME) {\n          const { foundConnectLine, fromPoint, toPoint } = hasAnyConnectLine(\n            pokemons,\n            matrix,\n            row,\n            col\n          );\n          if (foundConnectLine) {\n            setGameOverlay((gameOverlay) => ({\n              ...gameOverlay,\n              suggestPoints: [fromPoint, toPoint],\n            }));\n          }\n          suggestTiming.current = 0;\n        }\n      }\n      if (remainTiming.current <= 0) {\n        if (hasTiming) {\n          endGame();\n        }\n      } else {\n        timeoutId = setTimeout(() => {\n          timing.current++;\n          suggestTiming.current++;\n          remainTiming.current--;\n          setTimingState(timingState + 1);\n        }, 1000);\n      }\n    }\n\n    // update timing to make score\n    if (status === GameStatus.COMPLETED) {\n      if (timeoutId) clearTimeout(timeoutId);\n    }\n    return () => {\n      timeoutId && clearTimeout(timeoutId);\n    };\n  }, [status, timingState]);\n\n  useEffect(() => {\n    let intervalId: NodeJS.Timeout | undefined = undefined;\n    if (status === GameStatus.PENDING) {\n      if (hasTiming) {\n        setGameOverlay((gameOverlay) => ({\n          ...gameOverlay,\n          suggestPoints: [undefined, undefined],\n        }));\n      }\n      timing.current = 0;\n      pendingTiming.current = PENDING_TIME;\n      const countdownEl = document.getElementById(\"count-down-pending-timing\");\n      if (countdownEl) countdownEl.innerText = pendingTiming.current.toString();\n      intervalId = setInterval(() => {\n        if (pendingTiming.current <= 1) {\n          intervalId && clearInterval(intervalId);\n          pendingTiming.current = PENDING_TIME;\n          startGame();\n        } else {\n          pendingTiming.current--;\n        }\n        const countdownEl = document.getElementById(\n          \"count-down-pending-timing\"\n        );\n        if (countdownEl)\n          countdownEl.innerText = pendingTiming.current.toString();\n      }, 1000);\n    }\n\n    if (status === GameStatus.COMPLETED) {\n      intervalId && clearInterval(intervalId);\n      if (hasTiming) {\n        setPlayer({ ...currentPlayer, playerTiming: timing.current });\n      }\n    }\n    return () => {\n      pendingTiming.current = PENDING_TIME;\n      intervalId && clearInterval(intervalId);\n    };\n  }, [status]);\n\n  // check rule time\n  useEffect(() => {\n    if (connectingLinePoints.length === 1) {\n      playGlugSound && playGlugSound();\n      remainTiming.current -= PENALTY_TIME;\n    }\n    if (connectingLinePoints.length > 1) {\n      playRisingPopSound && playRisingPopSound();\n      remainTiming.current += BONUS_TIME;\n      suggestTiming.current = 0;\n    }\n  }, [connectingLinePoints]);\n\n  return (\n    <>\n      {!hasTiming && (\n        <div id=\"count-down-pending-timing\" className=\"overlay-pending-timing\">\n          {pendingTiming.current}\n        </div>\n      )}\n      <p className=\"text-center\">\n        {t(\"Your time\")}: {timeConvert(timing.current)}\n      </p>\n      <p className=\"text-center\">\n        {t(\"Remaining time\")}: {timeConvert(remainTiming.current)}\n      </p>\n    </>\n  );\n};\n\nexport default GameSurvivalTiming;\n","import { FC } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { useGameActions } from \"../../hooks/useGameActions\";\nimport { GameMode } from \"../../types/game\";\nimport GameLevel from \"./GameLevel\";\nimport GameReplay from \"./GameReplay\";\nimport GameSurvivalTiming from \"./GameSurvivalTiming\";\nimport GameTitle from \"./GameTitle\";\n\nconst GameSurvivalInfo: FC<{ hasTiming?: boolean }> = ({\n  hasTiming = false,\n}) => {\n  const { t } = useTranslation();\n  const { replayGame } = useGameActions(GameMode.SURVIVAL_MODE);\n\n  return (\n    <div className=\"game-info\">\n      <GameTitle title={t(\"Survival mode\")} />\n      <GameLevel />\n      <GameSurvivalTiming hasTiming={hasTiming} />\n      <GameReplay action={replayGame} />\n    </div>\n  );\n};\n\nexport default GameSurvivalInfo;\n","import { useTranslation } from \"react-i18next\";\nimport { Link } from \"react-router-dom\";\nimport { Routes } from \"../routes/CONSTANTS\";\nimport GameBoard from \"../components/GameBoard\";\nimport GameOverlay from \"../components/GameOverlay\";\nimport { useRecoilValue } from \"recoil\";\nimport gameSoundState from \"../recoil/atoms/gameSoundState\";\nimport gameState from \"../recoil/atoms/gameState\";\nimport SwitchLanguage from \"../components/SwitchLanguage\";\nimport GameSurvivalInfo from \"../components/Game/GameSurvivalInfo\";\nimport { GameMode } from \"../types/game\";\nimport { Helmet } from \"react-helmet\";\n\nconst SurvivalModePage = () => {\n  const { t } = useTranslation();\n  const { status } = useRecoilValue(gameState);\n  const { playPopUpOnSound } = useRecoilValue(gameSoundState);\n\n  return (\n    <div className=\"game-container\">\n      <Helmet>\n        <meta charSet=\"utf-8\" />\n        <title>Pika pika! - Survival mode board</title>\n      </Helmet>\n      <div className={`game-board game-${status}`}>\n        <GameSurvivalInfo />\n        <GameOverlay />\n        <GameBoard mode={GameMode.SURVIVAL_MODE} />\n      </div>\n      <div className=\"sidebar\">\n        <GameSurvivalInfo hasTiming />\n        <div>\n          <blockquote className=\"game-helper\">\n            {t(\"Try your best not to run out of time as long as possible\")}\n          </blockquote>\n          <blockquote className=\"game-helper\">\n            {t(\"Your time will increase when you match a pair of pokemon\")}\n          </blockquote>\n          <blockquote className=\"game-helper\">\n            {t(\"Choosing the wrong pair will decrease the time\")}\n          </blockquote>\n        </div>\n        <Link to={Routes.SINGLE_PLAYER_PAGE}>\n          <button onClick={() => playPopUpOnSound && playPopUpOnSound()}>\n            {t(\"Back\")}\n          </button>\n        </Link>\n        <p className=\"mobile-helper\">{t(\"Scroll down to play\")}</p>\n        <SwitchLanguage />\n      </div>\n    </div>\n  );\n};\n\nexport default SurvivalModePage;\n","import { useTranslation } from \"react-i18next\";\nimport { Helmet } from \"react-helmet\";\nimport useLocalStorage from \"../hooks/useLocalStorage\";\nimport { useSetRecoilState } from \"recoil\";\nimport playerState from \"../recoil/atoms/playerState\";\nimport { FormEventHandler } from \"react\";\nimport SwitchLanguage from \"../components/SwitchLanguage\";\nimport { useHistory } from \"react-router-dom\";\nimport { Routes } from \"../routes/CONSTANTS\";\nimport { nanoid } from \"nanoid\";\n\nconst PlayerPage = () => {\n  const { t } = useTranslation();\n  const history = useHistory();\n  const setPlayer = useSetRecoilState(playerState);\n  const [_, saveLocalPlayerName] = useLocalStorage(\"player\", \"\");\n\n  const handleSubmit: FormEventHandler<HTMLFormElement> = (event) => {\n    event.preventDefault();\n    const playerName = event.currentTarget.playerName.value;\n    if (playerName && playerName.trim() !== \"\") {\n      if (playerName.match(/^[a-zA-Z0-9 ]*$/gim)) {\n        const newPlayer = playerName + \"-\" + nanoid(6);\n        saveLocalPlayerName(newPlayer);\n        setPlayer({ player: newPlayer, playerTiming: 0 });\n        history.push(Routes.MAIN_PAGE);\n      } else {\n        alert(t(\"Accept alphabet and digit only.\"));\n      }\n    } else {\n      alert(t(\"Please enter your name\"));\n    }\n  };\n\n  return (\n    <div className=\"main-board\">\n      <Helmet>\n        <meta charSet=\"utf-8\" />\n        <title>Pika pika! - Player board</title>\n      </Helmet>\n      <div>\n        <form onSubmit={handleSubmit}>\n          <input\n            name=\"playerName\"\n            autoFocus\n            placeholder={t(\"Enter your name here\")}\n            maxLength={20}\n            autoComplete=\"off\"\n          />\n          <button>{t(\"Submit\")}</button>\n        </form>\n        <SwitchLanguage />\n      </div>\n    </div>\n  );\n};\n\nexport default PlayerPage;\n","import { atom } from \"recoil\";\n\nconst toggleSoundState = atom<{ music: number; effect: number }>({\n  key: \"TOGGLE_SOUND\",\n  default: {\n    music: 0,\n    effect: 1,\n  },\n});\n\nexport default toggleSoundState;\n","import { useRecoilState, useRecoilValue } from \"recoil\";\nimport gameSoundState from \"../recoil/atoms/gameSoundState\";\nimport toggleSoundState from \"../recoil/atoms/toggleSoundState\";\n\nconst ToggleSound = () => {\n  const [sound, toggleSound] = useRecoilState(toggleSoundState);\n  const { playDisableSound } = useRecoilValue(gameSoundState);\n  const classSound = sound.effect ? \"icono-volumeMedium\" : \"icono-volumeMute\";\n\n  return (\n    <div\n      className=\"toggle-sound-effect\"\n      onClick={() => {\n        toggleSound((prevValue) => ({\n          ...prevValue,\n          effect: prevValue.effect === 1 ? 0 : 1,\n        }));\n        if (sound) {\n          playDisableSound && playDisableSound();\n        }\n      }}\n    >\n      <i className={classSound}></i>\n    </div>\n  );\n};\n\nexport default ToggleSound;\n","import { useRecoilState } from \"recoil\";\nimport toggleSoundState from \"../recoil/atoms/toggleSoundState\";\n\nconst ToggleMusic = () => {\n  const [sound, toggleSound] = useRecoilState(toggleSoundState);\n  const classSound = sound.music ? \"icono-blue\" : \"icono-black\";\n\n  return (\n    <div\n      className=\"toggle-music-effect\"\n      onClick={() => {\n        toggleSound((prevValue) => ({\n          ...prevValue,\n          music: prevValue.music === 1 ? 0 : 1,\n        }));\n      }}\n    >\n      <i className={`icono-music ${classSound}`}></i>\n    </div>\n  );\n};\n\nexport default ToggleMusic;\n","import { FC, MouseEventHandler, useCallback, useEffect, useRef } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { useRecoilValue } from \"recoil\";\nimport gameBattleState from \"../../recoil/atoms/gameBattleState\";\nimport gameSoundState from \"../../recoil/atoms/gameSoundState\";\nimport { GameStatus } from \"../../types/game\";\nimport { getPlayerID, getPlayerName } from \"../../utils/game\";\n\ninterface CompetitorReadyGameButtonProps {\n  status: GameStatus;\n  player: string;\n}\n\nconst CompetitorReadyGameButton: FC<CompetitorReadyGameButtonProps> = ({\n  status,\n  player,\n}) => {\n  const { t } = useTranslation();\n  const { allReady, competitor } = useRecoilValue(gameBattleState);\n  const classReady = allReady.includes(competitor ?? \"\") ? \"ready\" : \"\";\n\n  return (\n    <>\n      <button className={`button-${status} ${classReady}`}>{t(\"Ready\")}</button>\n      <div>\n        {competitor && (\n          <span>\n            <em>(ID: {getPlayerID(competitor)})</em> {getPlayerName(competitor)}{\" \"}\n          </span>\n        )}\n        <strong>:{t(\"Competitor\")}</strong>\n      </div>\n    </>\n  );\n};\n\nexport default CompetitorReadyGameButton;\n","import { atom } from \"recoil\";\nimport { GameBattlePointsState, GameTypeState } from \"../../types/game\";\n\nconst gameBattlePointsState = atom<GameBattlePointsState>({\n  key: GameTypeState.GAME_BATTLE_POINTS_STATE,\n  default: {\n    competitorPoint: 0,\n    yourPoint: 0,\n  },\n});\n\nexport default gameBattlePointsState;\n","import { useRecoilValue, useResetRecoilState, useSetRecoilState } from \"recoil\";\nimport gameState from \"../recoil/atoms/gameState\";\nimport selectedPokemonsSelector from \"../recoil/selectors/selectedPokemonsSelector\";\nimport selectedPokemonsState from \"../recoil/atoms/selectedPokemonsState\";\nimport gameOverlayState from \"../recoil/atoms/gameOverlayState\";\nimport gameSoundState from \"../recoil/atoms/gameSoundState\";\nimport { useCallback } from \"react\";\nimport {\n  BONUS_POINTS,\n  GameLevel,\n  gameOptions,\n  GameSocketEvents,\n  GameSocketMessage,\n  GameStatus,\n  LEVEL_UP_POINTS,\n  PENALTY_POINTS,\n} from \"../types/game\";\nimport { generatePokemonMatrix, makeListPokemons } from \"../utils/game\";\nimport gameBattleState from \"../recoil/atoms/gameBattleState\";\nimport gameBattlePointsState from \"../recoil/atoms/gameBattlePointsState\";\n\nexport function useGameBattleActions() {\n  const setGame = useSetRecoilState(gameState);\n  const resetGameState = useResetRecoilState(gameState);\n  const setSelectedPokemons = useSetRecoilState(selectedPokemonsSelector);\n  const resetSelectedPokemonsState = useResetRecoilState(selectedPokemonsState);\n  const setGameBattle = useSetRecoilState(gameBattleState);\n  const setGameOverlay = useSetRecoilState(gameOverlayState);\n  const resetGameOverlayState = useResetRecoilState(gameOverlayState);\n  const setGameBattlePoints = useSetRecoilState(gameBattlePointsState);\n  const resetGameBattlePoints = useResetRecoilState(gameBattlePointsState);\n  const {\n    playBiteSound,\n    playYouWinSound,\n    playDisableSound,\n    playOpenMenuSound,\n    playRisingPopSound,\n    playGlugSound,\n  } = useRecoilValue(gameSoundState);\n\n  const selectBattlePokemon = (\n    pokemonId: string,\n    rowIndex: number,\n    colIndex: number\n  ) => {\n    playBiteSound && playBiteSound();\n    setSelectedPokemons({ nid: pokemonId, rowIndex, colIndex });\n  };\n\n  const resetGame = () => {\n    resetGameState();\n    resetGameOverlayState();\n    resetSelectedPokemonsState();\n    setGameBattle((gameBattle) => ({ ...gameBattle, allReady: [] }));\n    reSetupGame();\n  };\n\n  const pendingGame = () => {\n    setGame((prevGame) => ({\n      ...prevGame,\n      status: GameStatus.PENDING,\n    }));\n  };\n\n  const initGame = useCallback(\n    (level: GameLevel, status: GameStatus = GameStatus.PENDING) => {\n      const { row, col } = gameOptions[level];\n      const pokemons = makeListPokemons(row, col);\n      const { pokemonMatrix, pokemons: newPokemons } = generatePokemonMatrix(\n        pokemons,\n        row,\n        col\n      );\n      setGame({\n        pokemons: newPokemons,\n        matrix: pokemonMatrix,\n        level,\n        row,\n        col,\n        status,\n      });\n    },\n    [setGame]\n  );\n\n  const reSetupGame = () => {\n    initGame(GameLevel.LEVEL_1);\n  };\n\n  const endGame = (winner: string) => {\n    playYouWinSound && playYouWinSound();\n    setGame((prevGame) => ({\n      ...prevGame,\n      status: GameStatus.COMPLETED,\n    }));\n    setGameBattle((prevGame) => ({\n      ...prevGame,\n      winner,\n      allReady: [],\n    }));\n  };\n\n  const startGame = () => {\n    setGame((prevGame) => ({\n      ...prevGame,\n      status: GameStatus.RUNNING,\n    }));\n  };\n\n  const onReadyGame = () => {\n    setGame((prevGame) => ({\n      ...prevGame,\n      status: GameStatus.READY,\n    }));\n    setGameBattle((prevGame) => ({\n      ...prevGame,\n      winner: undefined,\n    }));\n    resetGameBattlePoints();\n  };\n\n  const increaseYourPoints = () => {\n    playRisingPopSound && playRisingPopSound();\n    setGameBattlePoints((gameBattlePoints) => ({\n      ...gameBattlePoints,\n      yourPoint: gameBattlePoints.yourPoint + BONUS_POINTS,\n    }));\n  };\n\n  const decreaseYourPoints = () => {\n    playGlugSound && playGlugSound();\n    setGameBattlePoints((gameBattlePoints) => ({\n      ...gameBattlePoints,\n      yourPoint: gameBattlePoints.yourPoint - PENALTY_POINTS,\n    }));\n  };\n\n  const levelUpYourPoints = () => {\n    playGlugSound && playGlugSound();\n    setGameBattlePoints((gameBattlePoints) => ({\n      ...gameBattlePoints,\n      yourPoint: gameBattlePoints.yourPoint + LEVEL_UP_POINTS,\n    }));\n  };\n\n  const handleSocketEvents = ({\n    event,\n    content,\n    player,\n    command,\n    match,\n    currentPlayer,\n  }: GameSocketMessage) => {\n    // console.log(\"handleSocketEvents\", {\n    //   event,\n    //   content,\n    //   player,\n    //   command,\n    //   match,\n    //   currentPlayer,\n    // });\n    switch (event) {\n      case GameSocketEvents.READY:\n        playOpenMenuSound && playOpenMenuSound();\n        setGameBattle((gameBattle) => ({\n          ...gameBattle,\n          allReady: gameBattle.allReady.includes(player)\n            ? gameBattle.allReady\n            : [...gameBattle.allReady, player],\n        }));\n        break;\n      case GameSocketEvents.UNREADY:\n        playDisableSound && playDisableSound();\n        setGameBattle((gameBattle) => ({\n          ...gameBattle,\n          allReady: gameBattle.allReady.filter(\n            (playerReady) => playerReady !== player\n          ),\n        }));\n        break;\n      case GameSocketEvents.JOINED:\n        if (player !== currentPlayer)\n          playRisingPopSound && playRisingPopSound();\n        setGameBattle((gameBattle) => ({\n          ...gameBattle,\n          competitor:\n            player === currentPlayer\n              ? gameBattle.competitor\n              : player === gameBattle.competitor\n              ? gameBattle.competitor\n              : player,\n        }));\n        resetGame();\n        break;\n      case GameSocketEvents.QUIT:\n        setGameBattle((gameBattle) => ({\n          ...gameBattle,\n          competitor: undefined,\n          allReady:\n            player === currentPlayer\n              ? []\n              : gameBattle.allReady.filter(\n                  (playerReady) => playerReady === currentPlayer\n                ),\n        }));\n        break;\n      case GameSocketEvents.INCREASE_COMPETITOR_POINTS:\n        if (player !== currentPlayer) {\n          setGameBattlePoints((gameBattlePoints) => ({\n            ...gameBattlePoints,\n            competitorPoint: gameBattlePoints.competitorPoint + BONUS_POINTS,\n          }));\n        }\n        break;\n      case GameSocketEvents.DECREASE_COMPETITOR_POINTS:\n        if (player !== currentPlayer) {\n          setGameBattlePoints((gameBattlePoints) => ({\n            ...gameBattlePoints,\n            competitorPoint: gameBattlePoints.competitorPoint - BONUS_POINTS,\n          }));\n        }\n        break;\n      case GameSocketEvents.FREEZE_COMPETITOR_BOARD:\n        if (player !== currentPlayer) {\n          setGameOverlay((gameOverlayState) => ({\n            ...gameOverlayState,\n            freezing: true,\n          }));\n        }\n        break;\n      case GameSocketEvents.LEVEL_UP_POINTS:\n        if (player !== currentPlayer) {\n          setGameBattlePoints((gameBattlePoints) => ({\n            ...gameBattlePoints,\n            competitorPoint: gameBattlePoints.competitorPoint + LEVEL_UP_POINTS,\n          }));\n        }\n        break;\n      case GameSocketEvents.GAME_WINNER:\n        break;\n      default:\n        break;\n    }\n  };\n\n  return {\n    initGame,\n    reSetupGame,\n    startGame,\n    onReadyGame,\n    endGame,\n    selectBattlePokemon,\n    resetGame,\n    pendingGame,\n    increaseYourPoints,\n    decreaseYourPoints,\n    levelUpYourPoints,\n    handleSocketEvents,\n  };\n}\n","import { useTranslation } from \"react-i18next\";\nimport { useRecoilValue } from \"recoil\";\nimport gameBattlePointsState from \"../../recoil/atoms/gameBattlePointsState\";\nimport { useGameBattleActions } from \"../../hooks/useGameBattleActions\";\nimport { useEffect } from \"react\";\nimport gameBattleState from \"../../recoil/atoms/gameBattleState\";\nimport playerState from \"../../recoil/atoms/playerState\";\nimport gameState from \"../../recoil/atoms/gameState\";\nimport { GameStatus } from \"../../types/game\";\n\nconst GameBattleBar = () => {\n  const { t } = useTranslation();\n  const { endGame } = useGameBattleActions();\n  const { yourPoint, competitorPoint } = useRecoilValue(gameBattlePointsState);\n  const { competitor } = useRecoilValue(gameBattleState);\n  const { status } = useRecoilValue(gameState);\n  const { player } = useRecoilValue(playerState);\n  const yourWidth = 50 + yourPoint - competitorPoint;\n\n  // useEffect(() => {\n  //   if (yourWidth >= 100) {\n  //     endGame(player);\n  //   } else if (yourWidth <= 0) {\n  //     endGame(competitor ?? player);\n  //   }\n  // }, [yourWidth]);\n\n  if (status === GameStatus.RUNNING) {\n    if (yourWidth >= 100) {\n      endGame(player);\n    } else if (yourWidth <= 0) {\n      endGame(competitor ?? player);\n    }\n  }\n\n  return (\n    <div className=\"battle-bar animated-red-gradient\">\n      <div\n        className=\"your-bar animated-blue-gradient\"\n        style={{ width: yourWidth + \"%\" }}\n      >\n        <span className=\"point\">\n          {t(\"Your points\")} {yourPoint ?? 0}\n        </span>\n      </div>\n      <span className=\"point\">\n        {competitorPoint ?? 0} {t(\"Competitor points\")}\n      </span>\n    </div>\n  );\n};\n\nexport default GameBattleBar;\n","import { FC, memo } from \"react\";\nimport { GameStatus, Pokemon } from \"../../types/game\";\n\ntype PokemonCardProps = {\n  pokemon: Pokemon;\n  rowIndex: number;\n  colIndex: number;\n  isSelected: number | boolean;\n  status: GameStatus;\n  selectPokemon: (\n    pokemonId: string,\n    rowIndex: number,\n    colIndex: number\n  ) => void;\n};\n\nconst PokemonCard: FC<PokemonCardProps> = ({\n  pokemon,\n  rowIndex,\n  colIndex,\n  isSelected,\n  status,\n  selectPokemon,\n}) => {\n  const selected = isSelected ? \"selected\" : \"\";\n  const hidden = pokemon.matched ? \"hidden\" : \"\";\n  return (\n    <div\n      style={{\n        backgroundImage: `url(${pokemon.image ?? \"\"})`,\n      }}\n      className={`pokemon-card ${selected} ${hidden}`}\n      onClick={() => {\n        if (\n          !isSelected &&\n          !pokemon.matched &&\n          status === GameStatus.RUNNING &&\n          pokemon.nid\n        ) {\n          selectPokemon(pokemon.nid, rowIndex, colIndex);\n        }\n      }}\n    />\n  );\n};\n\nfunction propsAreEquals(\n  prevProps: PokemonCardProps,\n  nextProps: PokemonCardProps\n) {\n  return (\n    prevProps.pokemon.nid === nextProps.pokemon.nid &&\n    prevProps.pokemon.image === nextProps.pokemon.image &&\n    prevProps.pokemon.matched === nextProps.pokemon.matched &&\n    prevProps.isSelected === nextProps.isSelected &&\n    prevProps.status === nextProps.status\n  );\n}\n\nexport default memo(PokemonCard, propsAreEquals);\n","import { FC } from \"react\";\nimport { useRecoilValue } from \"recoil\";\nimport { useGameBattleActions } from \"../../hooks/useGameBattleActions\";\nimport selectedPokemonsState from \"../../recoil/atoms/selectedPokemonsState\";\nimport { GameStatus, Pokemon } from \"../../types/game\";\nimport PokemonBattleCard from \"./PokemonBattleCard\";\n\ntype PokemonBattleRowProps = {\n  pokemons: Pokemon[];\n  rowIndex: number;\n  status: GameStatus;\n};\n\nconst PokemonBattleRow: FC<PokemonBattleRowProps> = ({\n  pokemons,\n  rowIndex,\n  status,\n}) => {\n  const selectedPokemons = useRecoilValue(selectedPokemonsState);\n  const { selectBattlePokemon } = useGameBattleActions();\n  return (\n    <>\n      {pokemons.map((pokemon, index) => (\n        <PokemonBattleCard\n          key={`card-${index}`}\n          pokemon={pokemon}\n          rowIndex={rowIndex}\n          colIndex={index}\n          isSelected={\n            pokemon.nid !== undefined &&\n            selectedPokemons.findIndex(({ nid }) => nid === pokemon.nid) >= 0\n          }\n          selectPokemon={selectBattlePokemon}\n          status={status}\n        />\n      ))}\n    </>\n  );\n};\n\nexport default PokemonBattleRow;\n","import { useEffect, useLayoutEffect, useRef } from \"react\";\nimport { useRecoilValue, useSetRecoilState } from \"recoil\";\nimport gameBattleState from \"../recoil/atoms/gameBattleState\";\nimport gameSoundState from \"../recoil/atoms/gameSoundState\";\nimport gameState from \"../recoil/atoms/gameState\";\nimport playerState from \"../recoil/atoms/playerState\";\nimport {\n  GameBattleEffect,\n  GameLevel,\n  GameStatus,\n  LEVEL_BATTLE_MAX,\n  nextLevel,\n  Pokemon,\n} from \"../types/game\";\nimport {\n  generatePokemonMatrix,\n  checkCompletedLevel,\n  hasAnyConnectLine,\n  reShufflePokemonList,\n  randomEffectEvent,\n} from \"../utils/game\";\nimport { useGameBattleActions } from \"./useGameBattleActions\";\nimport gameOverlayState from \"../recoil/atoms/gameOverlayState\";\n\nexport default function useGameBattleEngine() {\n  const { playLevelUpSound, playCompletedGameSound } =\n    useRecoilValue(gameSoundState);\n  const {\n    initGame,\n    resetGame,\n    endGame,\n    onReadyGame,\n    startGame,\n    pendingGame,\n    increaseYourPoints,\n    decreaseYourPoints,\n    levelUpYourPoints,\n  } = useGameBattleActions();\n  const setGame = useSetRecoilState(gameState);\n  const currentPlayer = useRecoilValue(playerState);\n  const { matrix, row, col, status, pokemons, level } =\n    useRecoilValue(gameState);\n  const {\n    allReady,\n    competitor,\n    sendJoinedGame,\n    sendQuitGame,\n    sendIncreasePoints,\n    sendDecreasePoints,\n    sendGameEffect,\n  } = useRecoilValue(gameBattleState);\n  const { connectingLinePoints } = useRecoilValue(gameOverlayState);\n  const shuffleMatrix = (pokemons: Record<string, Pokemon>) => {\n    const newShufflePokemons = reShufflePokemonList(pokemons);\n    const { pokemonMatrix, pokemons: newPokemons } = generatePokemonMatrix(\n      newShufflePokemons,\n      row,\n      col\n    );\n    setGame({\n      pokemons: newPokemons,\n      matrix: pokemonMatrix,\n      level,\n      row,\n      col,\n      status: GameStatus.RUNNING,\n    });\n  };\n\n  const competitorRef = useRef<undefined | string>(undefined);\n\n  // quit room when refresh or close/redirect\n  useLayoutEffect(() => {\n    const sendQuitBeforeOut = () => {\n      sendQuitGame && sendQuitGame();\n    };\n    window.addEventListener(\"beforeunload\", sendQuitBeforeOut);\n    return () => {\n      window.removeEventListener(\"beforeunload\", sendQuitBeforeOut);\n    };\n  }, [sendQuitGame]);\n\n  // check competitor player joined room\n  useEffect(() => {\n    if (competitorRef.current !== competitor && competitor !== undefined) {\n      competitorRef.current = competitor;\n      sendJoinedGame && sendJoinedGame();\n    } else {\n      if (competitor === undefined) {\n        competitorRef.current = competitor;\n      }\n    }\n  }, [competitor]);\n\n  useEffect(() => {\n    if ([GameStatus.PENDING].includes(status) && allReady.length === 2) {\n      onReadyGame();\n    }\n    if ([GameStatus.RUNNING].includes(status) && allReady.length === 1) {\n      endGame(allReady[0]);\n    }\n    if ([GameStatus.COMPLETED].includes(status) && allReady.length === 1) {\n      pendingGame();\n    }\n    if ([GameStatus.READY].includes(status)) {\n      if (allReady.length === 1) {\n        resetGame();\n      }\n    }\n  }, [allReady.length, status]);\n\n  // Setup game\n  useEffect(() => {\n    if (status === GameStatus.PENDING) {\n      // playFanfareSound && playFanfareSound();\n      initGame(level);\n    }\n    return () => {\n      // cleanup\n    };\n  }, [status]);\n\n  // Check completed one level and re-start new one higher level\n  useEffect(() => {\n    if (checkCompletedLevel(pokemons)) {\n      const levelUp: GameLevel = nextLevel[level];\n      if (LEVEL_BATTLE_MAX === levelUp) {\n        const newLevel = GameLevel.LEVEL_1;\n        initGame(newLevel, GameStatus.RUNNING);\n      } else {\n        initGame(levelUp, GameStatus.RUNNING);\n      }\n\n      const effectEvent = randomEffectEvent();\n\n      sendGameEffect && sendGameEffect(effectEvent);\n\n      if (effectEvent === GameBattleEffect.LEVEL_UP) {\n        levelUpYourPoints();\n      }\n\n      playCompletedGameSound && playCompletedGameSound();\n    } else {\n      const { foundConnectLine } = hasAnyConnectLine(\n        pokemons,\n        matrix,\n        row,\n        col\n      );\n      if (Object.keys(pokemons).length && foundConnectLine === false) {\n        shuffleMatrix(pokemons);\n        playLevelUpSound && playLevelUpSound();\n      }\n    }\n  }, [pokemons]);\n\n  useEffect(() => {\n    if (connectingLinePoints.length === 1) {\n      decreaseYourPoints();\n      sendDecreasePoints && sendDecreasePoints();\n    }\n    if (connectingLinePoints.length > 1) {\n      increaseYourPoints();\n      sendIncreasePoints && sendIncreasePoints();\n    }\n  }, [connectingLinePoints]);\n\n  return {\n    initGame,\n    resetGame,\n    endGame,\n    onReadyGame,\n    startGame,\n    matrix,\n    row,\n    col,\n    status,\n    level,\n    currentPlayer,\n  };\n}\n","import PokemonBattleRow from \"./Game/PokemonBattleRow\";\nimport useGameBattleEngine from \"../hooks/useGameBattleEngine\";\nimport { GameStatus } from \"../types/game\";\n\nconst GameBattleBoard = () => {\n  const { matrix, row, col, status } = useGameBattleEngine();\n\n  return (\n    <div className={`game-pokemon board-${row}x${col}`}>\n      {status === GameStatus.RUNNING &&\n        matrix &&\n        matrix.map((pokemons, index) => (\n          <PokemonBattleRow\n            key={`row-${index}`}\n            rowIndex={index}\n            pokemons={pokemons}\n            status={status}\n          />\n        ))}\n    </div>\n  );\n};\n\nexport default GameBattleBoard;\n","import { BASE_WS_URL } from \"../../types/chat\";\nimport { FC, memo, useEffect, useState } from \"react\";\nimport useWebSocket, { ReadyState } from \"react-use-websocket\";\nimport { useSetRecoilState } from \"recoil\";\nimport gameBattleState from \"../../recoil/atoms/gameBattleState\";\nimport useGameBattleSocket from \"../../hooks/useGameBattleSocket\";\nimport { useGameBattleActions } from \"../../hooks/useGameBattleActions\";\nimport { GameSocketEvents } from \"../../types/game\";\nimport { useTranslation } from \"react-i18next\";\nimport { useHistory } from \"react-router-dom\";\nimport { Routes } from \"../../routes/CONSTANTS\";\n\ninterface GameBattleSocketProps {\n  gameId: string;\n  player: string;\n}\n\nconst GameBattleSocket: FC<GameBattleSocketProps> = ({ gameId, player }) => {\n  const { t } = useTranslation();\n  const history = useHistory();\n  const { handleSocketEvents } = useGameBattleActions();\n  const setGameBattleState = useSetRecoilState(gameBattleState);\n  const [socketUrl] = useState(`${BASE_WS_URL}/game`);\n  const { sendJsonMessage, readyState } = useWebSocket(socketUrl, {\n    reconnectAttempts: 10,\n    reconnectInterval: 3000,\n    retryOnError: true,\n    shouldReconnect: () => true,\n    queryParams: {\n      player,\n      gameId,\n    },\n    onOpen: (event) => {\n      // console.log(\"onOpen\");\n      const subscribeMessage = {\n        command: 0,\n        match: gameId,\n        player,\n      };\n      sendJsonMessage(subscribeMessage);\n      const joinMessage = {\n        command: 2,\n        match: gameId,\n        player,\n        event: GameSocketEvents.JOINED,\n      };\n      sendJsonMessage(joinMessage);\n    },\n    onMessage: (event) => {\n      const data = JSON.parse(event.data);\n      const messageData = JSON.parse(data.content);\n      messageData.currentPlayer = player;\n\n      handleSocketEvents(messageData);\n    },\n    onError: (event) => {\n      // console.log(\"onError\", event);\n    },\n    onClose: (event) => {\n      // console.log(\"onClose\", event);\n    },\n  });\n\n  const {\n    sendReadyGame,\n    sendUnReadyGame,\n    sendQuitGame,\n    sendSelectedPokemon,\n    sendIncreasePoints,\n    sendDecreasePoints,\n    sendGameEffect,\n    sendJoinedGame,\n  } = useGameBattleSocket({\n    sendJsonMessage,\n    gameId,\n    player,\n  });\n\n  useEffect(() => {\n    setGameBattleState((gameBattleState) => ({\n      ...gameBattleState,\n      sendSelectedPokemon,\n      sendReadyGame,\n      sendUnReadyGame,\n      sendQuitGame,\n      sendJoinedGame,\n      sendDecreasePoints,\n      sendIncreasePoints,\n      sendGameEffect,\n    }));\n  }, [\n    sendSelectedPokemon,\n    sendReadyGame,\n    sendUnReadyGame,\n    sendQuitGame,\n    sendJoinedGame,\n    sendDecreasePoints,\n    sendIncreasePoints,\n    sendGameEffect,\n  ]);\n\n  return readyState !== ReadyState.OPEN ? (\n    <div className={`game-status socket-${ReadyState[readyState]}`}>\n      <div className=\"service-status\">\n        {t(\"Service is not available now.\")}\n        <strong\n          className=\"clickable\"\n          onClick={() => history.push(Routes.MULTI_PLAYER_PAGE)}\n        >\n          {t(\"Out\")}\n        </strong>\n      </div>\n    </div>\n  ) : null;\n};\n\nfunction areEqualGame(\n  prevProps: GameBattleSocketProps,\n  nextProps: GameBattleSocketProps\n) {\n  return (\n    prevProps.player === nextProps.player &&\n    prevProps.gameId === nextProps.gameId\n  );\n}\n\nexport default memo(GameBattleSocket, areEqualGame);\n","import { SendJsonMessage } from \"react-use-websocket/dist/lib/types\";\nimport {\n  GameBattleEffect,\n  GameSocketEvents,\n  GameSocketMessage,\n  SocketCommand,\n} from \"../types/game\";\n\ninterface UseGameBattleSocketProps {\n  sendJsonMessage: SendJsonMessage;\n  gameId: string;\n  player: string;\n}\n\nexport default function useGameBattleSocket({\n  sendJsonMessage,\n  gameId,\n  player,\n}: UseGameBattleSocketProps) {\n  const baseMessageJson: GameSocketMessage = {\n    command: SocketCommand.SEND_MESSAGE,\n    event: GameSocketEvents.READY,\n    match: gameId,\n    player,\n  };\n  const sendReadyGame = () => {\n    const messageJson = {\n      ...baseMessageJson,\n      event: GameSocketEvents.READY,\n    };\n    sendJsonMessage(messageJson);\n  };\n\n  const sendUnReadyGame = () => {\n    const messageJson: GameSocketMessage = {\n      ...baseMessageJson,\n      event: GameSocketEvents.UNREADY,\n    };\n    sendJsonMessage(messageJson);\n  };\n\n  const sendQuitGame = () => {\n    const messageJson: GameSocketMessage = {\n      ...baseMessageJson,\n      event: GameSocketEvents.QUIT,\n    };\n    sendJsonMessage(messageJson);\n  };\n\n  const sendSelectedPokemon = (rowIndex: number, colIndex: number) => {\n    const messageJson: GameSocketMessage = {\n      ...baseMessageJson,\n      event: GameSocketEvents.INCREASE_COMPETITOR_POINTS,\n    };\n    sendJsonMessage(messageJson);\n  };\n\n  const sendJoinedGame = () => {\n    const messageJson: GameSocketMessage = {\n      ...baseMessageJson,\n      event: GameSocketEvents.JOINED,\n    };\n    sendJsonMessage(messageJson);\n  };\n\n  const sendIncreasePoints = () => {\n    const messageJson: GameSocketMessage = {\n      ...baseMessageJson,\n      event: GameSocketEvents.INCREASE_COMPETITOR_POINTS,\n    };\n    sendJsonMessage(messageJson);\n  };\n\n  const sendDecreasePoints = () => {\n    const messageJson: GameSocketMessage = {\n      ...baseMessageJson,\n      event: GameSocketEvents.DECREASE_COMPETITOR_POINTS,\n    };\n    sendJsonMessage(messageJson);\n  };\n\n  const sendGameEffect = (effect: GameBattleEffect) => {\n    switch (effect) {\n      case GameBattleEffect.FREEZE:\n        const freeJson: GameSocketMessage = {\n          ...baseMessageJson,\n          event: GameSocketEvents.FREEZE_COMPETITOR_BOARD,\n        };\n        sendJsonMessage(freeJson);\n        break;\n\n      default:\n        const levelUpJson: GameSocketMessage = {\n          ...baseMessageJson,\n          event: GameSocketEvents.LEVEL_UP_POINTS,\n        };\n        sendJsonMessage(levelUpJson);\n        break;\n    }\n  };\n\n  return {\n    sendReadyGame,\n    sendUnReadyGame,\n    sendQuitGame,\n    sendSelectedPokemon,\n    sendJoinedGame,\n    sendDecreasePoints,\n    sendIncreasePoints,\n    sendGameEffect,\n  };\n}\n","import { useEffect, useRef, useState } from \"react\";\nimport { useRecoilValue } from \"recoil\";\nimport gameState from \"../../recoil/atoms/gameState\";\nimport {\n  BONUS_POINTS,\n  FREEZING_TIME,\n  GameStatus,\n  LEVEL_UP_POINTS,\n  PENALTY_POINTS,\n  PENDING_TIME,\n} from \"../../types/game\";\nimport { useGameBattleActions } from \"../../hooks/useGameBattleActions\";\nimport { getPlayerID, getPlayerName } from \"../../utils/game\";\nimport { useTranslation } from \"react-i18next\";\nimport gameBattleState from \"../../recoil/atoms/gameBattleState\";\n\nconst GamePendingTiming = () => {\n  const { t } = useTranslation();\n  const { status } = useRecoilValue(gameState);\n  const { allReady, winner } = useRecoilValue(gameBattleState);\n  const { startGame } = useGameBattleActions();\n  const pendingTiming = useRef(PENDING_TIME);\n  const [timingState, setTimingState] = useState(0);\n  const player = winner ? winner : allReady.length > 0 && allReady[0];\n  let winnerPlayerName = \"\";\n  if (player) {\n    winnerPlayerName = `${getPlayerName(player)} - ${getPlayerID(player)}`;\n  }\n\n  useEffect(() => {\n    let intervalId: NodeJS.Timeout | undefined = undefined;\n\n    switch (status) {\n      case GameStatus.READY:\n        intervalId = setInterval(() => {\n          if (pendingTiming.current <= 1) {\n            intervalId && clearInterval(intervalId);\n            pendingTiming.current = PENDING_TIME;\n            startGame();\n          } else {\n            pendingTiming.current--;\n          }\n          const countdownEl = document.getElementById(\n            \"count-down-pending-timing\"\n          );\n          if (countdownEl)\n            countdownEl.innerText = pendingTiming.current.toString();\n        }, 1000);\n        break;\n\n      default:\n        pendingTiming.current = PENDING_TIME;\n        break;\n    }\n\n    return () => {\n      pendingTiming.current = PENDING_TIME;\n      intervalId && clearInterval(intervalId);\n    };\n  }, [status]);\n\n  useEffect(() => {\n    let timeoutId: NodeJS.Timeout | undefined = undefined;\n\n    switch (status) {\n      case GameStatus.READY:\n        timeoutId = setTimeout(() => {\n          setTimingState(timingState + 1);\n        }, 1000);\n        break;\n\n      default:\n        timeoutId && clearTimeout(timeoutId);\n        break;\n    }\n    return () => {\n      timeoutId && clearTimeout(timeoutId);\n    };\n  }, [timingState, status]);\n\n  return (\n    <div className=\"game-info\">\n      {status === GameStatus.COMPLETED && (\n        <div className=\"battle-result\">\n          <h2 className=\"game-title\">{t(\"The winner\")}</h2>\n          <h1 className=\"text-big-title\">{winnerPlayerName}</h1>\n        </div>\n      )}\n      {status === GameStatus.PENDING && (\n        <div className=\"battle-rule\">\n          <h1 className=\"game-title\">{t(\"Battle rule\")}</h1>\n          <blockquote>\n            {t(\"Matched pair of pokemon, your points will be increased\", {\n              point: BONUS_POINTS,\n            })}\n          </blockquote>\n          <blockquote>\n            {t(\n              \"Matched the wrong pair of pokemon, your points will be decreased\",\n              { point: PENALTY_POINTS }\n            )}\n          </blockquote>\n          <blockquote>\n            {t(\n              \"If your points are over competitor points 50 points. You are the winner and vice versa.\"\n            )}\n          </blockquote>\n          <blockquote>\n            {t(\n              \"Every time you level up, you will deal 1 of 2 effects `Freeze enemy` or `Give points to yourself`\",\n              { second: FREEZING_TIME, point: LEVEL_UP_POINTS }\n            )}\n          </blockquote>\n        </div>\n      )}\n      {status === GameStatus.READY && (\n        <div\n          key=\"count-down\"\n          id=\"count-down-pending-timing\"\n          className=\"overlay-pending-timing\"\n        >\n          {pendingTiming.current}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default GamePendingTiming;\n","import { FC } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { GameStatus } from \"../../types/game\";\nimport GameBattleBoard from \"../GameBattleBoard\";\nimport GameOverlay from \"../GameOverlay\";\nimport GameBattleSocket from \"./GameBattleSocket\";\nimport GamePendingTiming from \"./GamePendingTiming\";\n\ninterface GameBoardContainerProps {\n  gameId: string;\n  status: GameStatus;\n  player: string;\n}\n\nconst GameBoardContainer: FC<GameBoardContainerProps> = ({\n  gameId,\n  status,\n  player,\n}) => {\n  const { t } = useTranslation();\n  return (\n    <div className={`game-board game-${status}`}>\n      <h1 className=\"game-id\">\n        {t(\"Game ID\")}: {gameId}\n      </h1>\n      <GameBattleSocket gameId={gameId} player={player} />\n      <GameOverlay />\n      <GameBattleBoard />\n      <GamePendingTiming />\n    </div>\n  );\n};\n\nexport default GameBoardContainer;\n","import { FC, MouseEventHandler, useCallback, useEffect, useRef } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { useRecoilValue } from \"recoil\";\nimport gameBattleState from \"../../recoil/atoms/gameBattleState\";\nimport gameSoundState from \"../../recoil/atoms/gameSoundState\";\nimport { GameStatus } from \"../../types/game\";\nimport { getPlayerID, getPlayerName } from \"../../utils/game\";\n\ninterface ReadyGameButtonProps {\n  status: GameStatus;\n  player: string;\n}\n\nconst ReadyGameButton: FC<ReadyGameButtonProps> = ({ status, player }) => {\n  const { t } = useTranslation();\n  const { sendReadyGame, sendUnReadyGame, allReady } =\n    useRecoilValue(gameBattleState);\n  const classReady = allReady.includes(player) ? \"ready\" : \"\";\n\n  const onReady: MouseEventHandler<HTMLButtonElement> = (event) => {\n    if ([GameStatus.PENDING, GameStatus.COMPLETED].includes(status)) {\n      if (classReady === \"ready\") {\n        sendUnReadyGame && sendUnReadyGame();\n      } else {\n        sendReadyGame && sendReadyGame();\n      }\n    } else if ([GameStatus.RUNNING, GameStatus.READY].includes(status)) {\n      sendUnReadyGame && sendUnReadyGame();\n    }\n  };\n\n  return (\n    <>\n      <div>\n        <strong>{t(\"You\")}:</strong>\n        <span>\n          {getPlayerName(player)} <em>(ID: {getPlayerID(player)})</em>\n        </span>\n      </div>\n      <button className={`button-${status} ${classReady}`} onClick={onReady}>\n        {[GameStatus.PENDING, GameStatus.COMPLETED].includes(status) &&\n          t(\"Ready\")}\n        {[GameStatus.RUNNING, GameStatus.READY].includes(status) && t(\"Stop\")}\n      </button>\n    </>\n  );\n};\n\nexport default ReadyGameButton;\n","import { FC } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { Link, useParams } from \"react-router-dom\";\nimport { useRecoilValue } from \"recoil\";\nimport gameBattleState from \"../../recoil/atoms/gameBattleState\";\nimport gameState from \"../../recoil/atoms/gameState\";\nimport playerState from \"../../recoil/atoms/playerState\";\nimport { Routes } from \"../../routes/CONSTANTS\";\nimport CompetitorReadyGameButton from \"./CompetitorReadyGameButton\";\nimport GameBattleBar from \"./GameBattleBar\";\nimport GameBoardContainer from \"./GameBoardContainer\";\nimport ReadyGameButton from \"./ReadyGameButton\";\n\ninterface GameBattleContainerProps {\n  gameId: string;\n  player: string;\n}\n\nconst GameBattleContainer: FC<GameBattleContainerProps> = ({\n  gameId,\n  player,\n}) => {\n  const { t } = useTranslation();\n  const { status } = useRecoilValue(gameState);\n  const { sendQuitGame } = useRecoilValue(gameBattleState);\n  return (\n    <>\n      <div className=\"battle-container-bar\">\n        <div id=\"current-player-name\" className=\"player-box\">\n          <ReadyGameButton status={status} player={player} />\n          <Link to={Routes.MULTI_PLAYER_PAGE} onClick={sendQuitGame}>\n            <button className={`button-quit`}>{t(\"Quit\")}</button>\n          </Link>\n        </div>\n        <GameBattleBar />\n        <div id=\"competitor-player-name\" className=\" player-box\">\n          <CompetitorReadyGameButton status={status} player={player} />\n        </div>\n      </div>\n      {gameId && (\n        <GameBoardContainer gameId={gameId} status={status} player={player} />\n      )}\n    </>\n  );\n};\n\nexport default GameBattleContainer;\n","import { Helmet } from \"react-helmet\";\nimport { useHistory, useParams } from \"react-router-dom\";\nimport useAsync, { ResponseStatus } from \"../hooks/useAsync\";\nimport { getPlayersInGame } from \"../api/game\";\nimport { useCallback, useEffect } from \"react\";\nimport GameBattleContainer from \"../components/Game/GameBattleContainner\";\nimport playerState from \"../recoil/atoms/playerState\";\nimport { useRecoilValue } from \"recoil\";\nimport { Routes } from \"../routes/CONSTANTS\";\nimport { useTranslation } from \"react-i18next\";\n\nconst BattleModePage = () => {\n  const { t } = useTranslation();\n  const history = useHistory();\n  const { gameId } = useParams<{ gameId: string }>();\n  const { player } = useRecoilValue(playerState);\n  const fetchPlayersInGame = useCallback(\n    () => getPlayersInGame(gameId),\n    [gameId]\n  );\n  const { status: fetchStatus, value: playersInGameResponse } =\n    useAsync(fetchPlayersInGame);\n\n  const playersInGame: string[] = playersInGameResponse?.data ?? [];\n\n  useEffect(() => {\n    if (fetchStatus === ResponseStatus.SUCCESS) {\n      if (playersInGame.length >= 2 && !playersInGame.includes(player)) {\n        alert(t(\"The game was full slot!!!\"));\n        history.push(Routes.MULTI_PLAYER_PAGE);\n      }\n    }\n  }, [fetchStatus]);\n\n  return (\n    <div className=\"game-battle-container\">\n      <Helmet>\n        <meta charSet=\"utf-8\" />\n        <title>Pika pika! - Battle mode board</title>\n      </Helmet>\n      {fetchStatus === ResponseStatus.SUCCESS && gameId && (\n        <GameBattleContainer gameId={gameId} player={player} />\n      )}\n    </div>\n  );\n};\n\nexport default BattleModePage;\n","import \"./App.css\";\nimport { Switch, Route, useHistory } from \"react-router-dom\";\nimport MainPage from \"./pages/MainPage\";\nimport { Routes } from \"./routes/CONSTANTS\";\nimport SinglePlayerPage from \"./pages/SinglePlayerPage\";\nimport MultiPlayerPage from \"./pages/MultiPlayerPage\";\nimport SpeedModePage from \"./pages/SpeedModePage\";\nimport { useRecoilState, useRecoilValue } from \"recoil\";\nimport gameSoundState from \"./recoil/atoms/gameSoundState\";\nimport { useTranslation } from \"react-i18next\";\nimport i18n from \"./services/i18n\";\nimport { useEffect } from \"react\";\nimport useLocalStorage from \"./hooks/useLocalStorage\";\nimport SurvivalModePage from \"./pages/SurvivalModePage\";\nimport playerState from \"./recoil/atoms/playerState\";\nimport PlayerPage from \"./pages/PlayerPage\";\nimport ToggleSound from \"./components/ToggleSound\";\nimport ToggleMusic from \"./components/ToggleMusic\";\nimport BattleModePage from \"./pages/BattleModePage\";\nimport { getPlayerName } from \"./utils/game\";\n\nfunction App() {\n  const { t } = useTranslation();\n  const { soundReady } = useRecoilValue(gameSoundState);\n  const history = useHistory();\n  const [currentPlayer, setPlayer] = useRecoilState(playerState);\n  const [language] = useLocalStorage(\"language\", \"vi\");\n  const [localPlayer, saveLocalPlayerName] = useLocalStorage(\"player\", \"\");\n\n  useEffect(() => {\n    i18n.changeLanguage(language);\n  }, [language]);\n\n  useEffect(() => {\n    if (\n      localPlayer &&\n      localPlayer !== \"\" &&\n      getPlayerName(localPlayer).match(/^[a-zA-Z0-9 ]*$/gim)\n    ) {\n      if (\n        currentPlayer.player.trim() !== \"\" &&\n        getPlayerName(currentPlayer.player).match(/^[a-zA-Z0-9 ]*$/gim)\n      ) {\n        setPlayer({ player: currentPlayer.player, playerTiming: 0 });\n      } else {\n        setPlayer({ player: localPlayer, playerTiming: 0 });\n      }\n    } else {\n      saveLocalPlayerName(\"\");\n      history.push(Routes.PLAYER_PAGE);\n    }\n  }, [localPlayer]);\n\n  return (\n    <div className=\"app\">\n      {soundReady && (\n        <>\n          <ToggleMusic />\n          <ToggleSound />\n        </>\n      )}\n      {!soundReady && <h1>{t(\"Preparing resource...\")}</h1>}\n      {soundReady && (\n        <Switch>\n          <Route path={Routes.MAIN_PAGE} exact>\n            <MainPage />\n          </Route>\n          <Route path={Routes.SINGLE_PLAYER_PAGE} exact>\n            <SinglePlayerPage />\n          </Route>\n          <Route path={Routes.MULTI_PLAYER_PAGE} exact>\n            <MultiPlayerPage />\n          </Route>\n          <Route path={Routes.SPEED_MODE_PAGE} exact>\n            <SpeedModePage />\n          </Route>\n          <Route path={Routes.SURVIVAL_MODE_PAGE} exact>\n            <SurvivalModePage />\n          </Route>\n          <Route path={`${Routes.BATTLE_MODE_PAGE}`} exact>\n            <BattleModePage />\n          </Route>\n          <Route path={Routes.PLAYER_PAGE} exact>\n            <PlayerPage />\n          </Route>\n          <Route path=\"*\">\n            <MainPage />\n          </Route>\n        </Switch>\n      )}\n    </div>\n  );\n}\n\nexport default App;\n","import useSound from \"use-sound\";\nimport { SpriteMap } from \"use-sound/dist/types\";\n\nimport menuOpenSound from \"../assets/sound/menu-open.mp3\";\nimport disableSound from \"../assets/sound/disable-sound.mp3\";\nimport enableSound from \"../assets/sound/enable-sound.mp3\";\nimport onSound from \"../assets/sound/switch-on.mp3\";\nimport offSound from \"../assets/sound/switch-off.mp3\";\nimport biteSound from \"../assets/sound/bite.mp3\";\nimport fanfareSound from \"../assets/sound/fanfare.mp3\";\nimport glugSound from \"../assets/sound/glug-a.mp3\";\nimport risingPopSound from \"../assets/sound/rising-pops.mp3\";\nimport completeGameSound from \"../assets/sound/game-completion.wav\";\nimport failedGameSound from \"../assets/sound/gamers-fail-game.mp3\";\nimport nearlyEndTimeSound from \"../assets/sound/time-limited.wav\";\nimport levelUpSound from \"../assets/sound/levelup.mp3\";\nimport popDownSound from \"../assets/sound/pop-down.mp3\";\nimport popUpOnSound from \"../assets/sound/pop-up-on.mp3\";\nimport popUpOffSound from \"../assets/sound/pop-up-off.mp3\";\nimport youWinSound from \"../assets/sound/you-win.mp3\";\nimport gameSongSound from \"../assets/sound/game-song.mp3\";\nimport { useRecoilValue } from \"recoil\";\nimport toggleSoundState from \"../recoil/atoms/toggleSoundState\";\n\nexport enum Sound {\n  MENU_OPEN = \"MENU_OPEN\",\n  BITE = \"BITE\",\n  DISABLE = \"DISABLE\",\n  ENABLE = \"ENABLE\",\n  ON = \"ON\",\n  OFF = \"OFF\",\n  FANFARE = \"FANFARE\",\n  GLUG = \"GLUG\",\n  RISING_POP = \"RISING_POP\",\n  COMPLETE_GAME = \"COMPLETE_GAME\",\n  FAIL_GAME = \"FAIL_GAME\",\n  NEARLY_END_TIME = \"NEARLY_END_TIME\",\n  LEVEL_UP = \"LEVEL_UP\",\n  POP_DOWN = \"POP_DOWN\",\n  POP_UP_ON = \"POP_UP_ON\",\n  POP_UP_OFF = \"POP_UP_OFF\",\n  YOU_WIN = \"YOU_WIN\",\n  GAME_SONG = \"GAME_SONG\",\n}\n\ninterface SoundOptions {\n  id?: string;\n  volume?: number;\n  playbackRate?: number;\n  interrupt?: boolean;\n  soundEnabled?: boolean;\n  sprite?: SpriteMap;\n  onload?: () => void;\n}\n\nexport default function usePlaySound(sound?: Sound) {\n  const { music, effect } = useRecoilValue(toggleSoundState);\n  const defaultConfigSound: SoundOptions = {\n    interrupt: true,\n    volume: effect,\n  };\n  let soundPath = menuOpenSound;\n  if (sound) {\n    switch (sound) {\n      case Sound.BITE:\n        soundPath = biteSound;\n        break;\n      case Sound.COMPLETE_GAME:\n        soundPath = completeGameSound;\n        break;\n      case Sound.DISABLE:\n        soundPath = disableSound;\n        break;\n      case Sound.ENABLE:\n        soundPath = enableSound;\n        break;\n      case Sound.ON:\n        soundPath = onSound;\n        break;\n      case Sound.OFF:\n        soundPath = offSound;\n        break;\n      case Sound.FAIL_GAME:\n        soundPath = failedGameSound;\n        break;\n      case Sound.GLUG:\n        soundPath = glugSound;\n        break;\n      case Sound.FANFARE:\n        soundPath = fanfareSound;\n        break;\n      case Sound.RISING_POP:\n        soundPath = risingPopSound;\n        break;\n      case Sound.NEARLY_END_TIME:\n        soundPath = nearlyEndTimeSound;\n        break;\n      case Sound.LEVEL_UP:\n        soundPath = levelUpSound;\n        break;\n      case Sound.POP_DOWN:\n        soundPath = popDownSound;\n        break;\n      case Sound.POP_UP_ON:\n        soundPath = popUpOnSound;\n        break;\n      case Sound.POP_UP_OFF:\n        soundPath = popUpOffSound;\n        break;\n      case Sound.YOU_WIN:\n        soundPath = youWinSound;\n        break;\n      case Sound.GAME_SONG:\n        soundPath = gameSongSound;\n        // defaultConfigSound.volume = music;\n        break;\n      default:\n        soundPath = menuOpenSound;\n        break;\n    }\n  }\n\n  const [\n    play,\n    { sound: loadedSound, stop: stopSound, pause: pauseSound, duration },\n  ] = useSound(soundPath, defaultConfigSound);\n\n  return {\n    playSound: play,\n    loadedSound,\n    stopSound,\n    pauseSound,\n    duration,\n    music,\n    effect,\n  };\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","export default __webpack_public_path__ + \"static/media/menu-open.019cf647.mp3\";","export default __webpack_public_path__ + \"static/media/disable-sound.477d0574.mp3\";","export default __webpack_public_path__ + \"static/media/enable-sound.00d0be95.mp3\";","export default __webpack_public_path__ + \"static/media/switch-on.88d10ee7.mp3\";","export default __webpack_public_path__ + \"static/media/switch-off.e5ebe933.mp3\";","export default __webpack_public_path__ + \"static/media/bite.aea7caff.mp3\";","export default __webpack_public_path__ + \"static/media/fanfare.8807360a.mp3\";","export default __webpack_public_path__ + \"static/media/glug-a.b9f1fa99.mp3\";","export default __webpack_public_path__ + \"static/media/rising-pops.7eda816b.mp3\";","export default __webpack_public_path__ + \"static/media/game-completion.a7022fca.wav\";","export default __webpack_public_path__ + \"static/media/gamers-fail-game.1bab0c1d.mp3\";","export default __webpack_public_path__ + \"static/media/time-limited.3894918f.wav\";","export default __webpack_public_path__ + \"static/media/levelup.3dc0430f.mp3\";","export default __webpack_public_path__ + \"static/media/pop-down.cc0a5518.mp3\";","export default __webpack_public_path__ + \"static/media/pop-up-on.b776a1ef.mp3\";","export default __webpack_public_path__ + \"static/media/pop-up-off.83c6ba5b.mp3\";","export default __webpack_public_path__ + \"static/media/you-win.70d95733.mp3\";","export default __webpack_public_path__ + \"static/media/game-song.c7ee5596.mp3\";","import { memo, useEffect } from \"react\";\nimport { useSetRecoilState } from \"recoil\";\nimport usePlaySound, { Sound } from \"../../hooks/usePlaySound\";\nimport gameSoundState from \"../../recoil/atoms/gameSoundState\";\n\nconst BiteSound = () => {\n  const { playSound: playBiteSound, loadedSound } = usePlaySound(Sound.BITE);\n  const setSounds = useSetRecoilState(gameSoundState);\n  useEffect(() => {\n    if (loadedSound !== null) {\n      setSounds((sounds) => ({ ...sounds, playBiteSound }));\n    }\n  }, [loadedSound, playBiteSound, setSounds]);\n  return null;\n};\n\nfunction areLoaded() {\n  return true;\n}\n\nexport default memo(BiteSound, areLoaded);\n","import { useEffect } from \"react\";\nimport { useSetRecoilState } from \"recoil\";\nimport usePlaySound, { Sound } from \"../../hooks/usePlaySound\";\nimport gameSoundState from \"../../recoil/atoms/gameSoundState\";\n\nconst CompletedGameSound = () => {\n  const { playSound: playCompletedGameSound, loadedSound } = usePlaySound(\n    Sound.COMPLETE_GAME\n  );\n  const setSounds = useSetRecoilState(gameSoundState);\n  useEffect(() => {\n    if (loadedSound !== null) {\n      setSounds((sounds) => ({ ...sounds, playCompletedGameSound }));\n    }\n  }, [loadedSound, setSounds, playCompletedGameSound]);\n  return null;\n};\n\nexport default CompletedGameSound;\n","import { useEffect } from \"react\";\nimport { useSetRecoilState } from \"recoil\";\nimport usePlaySound, { Sound } from \"../../hooks/usePlaySound\";\nimport gameSoundState from \"../../recoil/atoms/gameSoundState\";\n\nconst OpenMenuSound = () => {\n  const { playSound: playOpenMenuSound, loadedSound } = usePlaySound(\n    Sound.MENU_OPEN\n  );\n  const setSounds = useSetRecoilState(gameSoundState);\n  useEffect(() => {\n    if (loadedSound !== null) {\n      setSounds((sounds) => ({ ...sounds, playOpenMenuSound }));\n    }\n  }, [loadedSound, setSounds, playOpenMenuSound]);\n  return null;\n};\n\nexport default OpenMenuSound;\n","import { useEffect } from \"react\";\nimport { useSetRecoilState } from \"recoil\";\nimport usePlaySound, { Sound } from \"../../hooks/usePlaySound\";\nimport gameSoundState from \"../../recoil/atoms/gameSoundState\";\n\nconst DisableSound = () => {\n  const { playSound: playDisableSound, loadedSound } = usePlaySound(\n    Sound.DISABLE\n  );\n  const setSounds = useSetRecoilState(gameSoundState);\n  useEffect(() => {\n    if (loadedSound !== null) {\n      setSounds((sounds) => ({ ...sounds, playDisableSound }));\n    }\n  }, [loadedSound, playDisableSound, setSounds]);\n  return null;\n};\n\nexport default DisableSound;\n","import { useEffect } from \"react\";\nimport { useSetRecoilState } from \"recoil\";\nimport usePlaySound, { Sound } from \"../../hooks/usePlaySound\";\nimport gameSoundState from \"../../recoil/atoms/gameSoundState\";\n\nconst EnableSound = () => {\n  const { playSound: playEnableSound, loadedSound } = usePlaySound(\n    Sound.ENABLE\n  );\n  const setSounds = useSetRecoilState(gameSoundState);\n  useEffect(() => {\n    if (loadedSound !== null) {\n      setSounds((sounds) => ({ ...sounds, playEnableSound }));\n    }\n  }, [loadedSound, playEnableSound, setSounds]);\n  return null;\n};\n\nexport default EnableSound;\n","import { useEffect } from \"react\";\nimport { useSetRecoilState } from \"recoil\";\nimport usePlaySound, { Sound } from \"../../hooks/usePlaySound\";\nimport gameSoundState from \"../../recoil/atoms/gameSoundState\";\n\nconst FanfareSound = () => {\n  const { playSound: playFanfareSound, loadedSound } = usePlaySound(\n    Sound.FANFARE\n  );\n  const setSounds = useSetRecoilState(gameSoundState);\n  useEffect(() => {\n    if (loadedSound !== null) {\n      setSounds((sounds) => ({ ...sounds, playFanfareSound }));\n    }\n  }, [loadedSound, setSounds, playFanfareSound]);\n  return null;\n};\n\nexport default FanfareSound;\n","import { useEffect } from \"react\";\nimport { useSetRecoilState } from \"recoil\";\nimport usePlaySound, { Sound } from \"../../hooks/usePlaySound\";\nimport gameSoundState from \"../../recoil/atoms/gameSoundState\";\n\nconst FailedGameSound = () => {\n  const { playSound: playFailedGameSound, loadedSound } = usePlaySound(\n    Sound.FAIL_GAME\n  );\n  const setSounds = useSetRecoilState(gameSoundState);\n  useEffect(() => {\n    if (loadedSound !== null) {\n      setSounds((sounds) => ({ ...sounds, playFailedGameSound }));\n    }\n  }, [loadedSound, setSounds, playFailedGameSound]);\n  return null;\n};\n\nexport default FailedGameSound;\n","import { useEffect } from \"react\";\nimport { useSetRecoilState } from \"recoil\";\nimport usePlaySound, { Sound } from \"../../hooks/usePlaySound\";\nimport gameSoundState from \"../../recoil/atoms/gameSoundState\";\n\nconst GameSongSound = () => {\n  const {\n    playSound: playGameSong,\n    loadedSound,\n    duration,\n  } = usePlaySound(Sound.GAME_SONG);\n  const setSounds = useSetRecoilState(gameSoundState);\n\n  useEffect(() => {\n    if (loadedSound !== null) {\n      setSounds((sounds) => ({\n        ...sounds,\n        soundReady: true,\n        gameSongDuration: duration ?? 0,\n        playGameSong,\n      }));\n    }\n  }, [loadedSound]);\n\n  return null;\n};\n\nexport default GameSongSound;\n","import { useEffect } from \"react\";\nimport { useSetRecoilState } from \"recoil\";\nimport usePlaySound, { Sound } from \"../../hooks/usePlaySound\";\nimport gameSoundState from \"../../recoil/atoms/gameSoundState\";\n\nconst LevelUpSound = () => {\n  const { playSound: playLevelUpSound, loadedSound } = usePlaySound(\n    Sound.LEVEL_UP\n  );\n  const setSounds = useSetRecoilState(gameSoundState);\n  useEffect(() => {\n    if (loadedSound !== null) {\n      setSounds((sounds) => ({ ...sounds, playLevelUpSound }));\n    }\n  }, [loadedSound, setSounds, playLevelUpSound]);\n  return null;\n};\n\nexport default LevelUpSound;\n","import { useEffect } from \"react\";\nimport { useSetRecoilState } from \"recoil\";\nimport usePlaySound, { Sound } from \"../../hooks/usePlaySound\";\nimport gameSoundState from \"../../recoil/atoms/gameSoundState\";\n\nconst NearlyEndTimeSound = () => {\n  const { playSound: playNearlyEndTimeSound, loadedSound } = usePlaySound(\n    Sound.NEARLY_END_TIME\n  );\n  const setSounds = useSetRecoilState(gameSoundState);\n  useEffect(() => {\n    if (loadedSound !== null) {\n      setSounds((sounds) => ({ ...sounds, playNearlyEndTimeSound }));\n    }\n  }, [loadedSound, setSounds, playNearlyEndTimeSound]);\n  return null;\n};\n\nexport default NearlyEndTimeSound;\n","import { useEffect } from \"react\";\nimport { useSetRecoilState } from \"recoil\";\nimport usePlaySound, { Sound } from \"../../hooks/usePlaySound\";\nimport gameSoundState from \"../../recoil/atoms/gameSoundState\";\n\nconst OffSound = () => {\n  const { playSound: playOffSound, loadedSound } = usePlaySound(Sound.OFF);\n  const setSounds = useSetRecoilState(gameSoundState);\n  useEffect(() => {\n    if (loadedSound !== null) {\n      setSounds((sounds) => ({ ...sounds, playOffSound }));\n    }\n  }, [loadedSound, playOffSound, setSounds]);\n  return null;\n};\n\nexport default OffSound;\n","import { useEffect } from \"react\";\nimport { useSetRecoilState } from \"recoil\";\nimport usePlaySound, { Sound } from \"../../hooks/usePlaySound\";\nimport gameSoundState from \"../../recoil/atoms/gameSoundState\";\n\nconst OnSound = () => {\n  const { playSound: playOnSound, loadedSound } = usePlaySound(Sound.ON);\n  const setSounds = useSetRecoilState(gameSoundState);\n  useEffect(() => {\n    if (loadedSound !== null) {\n      setSounds((sounds) => ({ ...sounds, playOnSound }));\n    }\n  }, [loadedSound, playOnSound, setSounds]);\n  return null;\n};\n\nexport default OnSound;\n","import { useEffect } from \"react\";\nimport { useSetRecoilState } from \"recoil\";\nimport usePlaySound, { Sound } from \"../../hooks/usePlaySound\";\nimport gameSoundState from \"../../recoil/atoms/gameSoundState\";\n\nconst PopDownSound = () => {\n  const { playSound: playPopDownSound, loadedSound } = usePlaySound(\n    Sound.POP_DOWN\n  );\n  const setSounds = useSetRecoilState(gameSoundState);\n  useEffect(() => {\n    if (loadedSound !== null) {\n      setSounds((sounds) => ({ ...sounds, playPopDownSound }));\n    }\n  }, [loadedSound, setSounds, playPopDownSound]);\n  return null;\n};\n\nexport default PopDownSound;\n","import { useEffect } from \"react\";\nimport { useSetRecoilState } from \"recoil\";\nimport usePlaySound, { Sound } from \"../../hooks/usePlaySound\";\nimport gameSoundState from \"../../recoil/atoms/gameSoundState\";\n\nconst PopUpOffSound = () => {\n  const { playSound: playPopUpOffSound, loadedSound } = usePlaySound(\n    Sound.POP_UP_OFF\n  );\n  const setSounds = useSetRecoilState(gameSoundState);\n  useEffect(() => {\n    if (loadedSound !== null) {\n      setSounds((sounds) => ({ ...sounds, playPopUpOffSound }));\n    }\n  }, [loadedSound, setSounds, playPopUpOffSound]);\n  return null;\n};\n\nexport default PopUpOffSound;\n","import { useEffect } from \"react\";\nimport { useSetRecoilState } from \"recoil\";\nimport usePlaySound, { Sound } from \"../../hooks/usePlaySound\";\nimport gameSoundState from \"../../recoil/atoms/gameSoundState\";\n\nconst PopUpOnSound = () => {\n  const { playSound: playPopUpOnSound, loadedSound } = usePlaySound(\n    Sound.POP_UP_ON\n  );\n  const setSounds = useSetRecoilState(gameSoundState);\n  useEffect(() => {\n    if (loadedSound !== null) {\n      setSounds((sounds) => ({ ...sounds, playPopUpOnSound }));\n    }\n  }, [loadedSound, setSounds, playPopUpOnSound]);\n  return null;\n};\n\nexport default PopUpOnSound;\n","import { useEffect } from \"react\";\nimport { useSetRecoilState } from \"recoil\";\nimport usePlaySound, { Sound } from \"../../hooks/usePlaySound\";\nimport gameSoundState from \"../../recoil/atoms/gameSoundState\";\n\nconst YouWinSound = () => {\n  const { playSound: playYouWinSound, loadedSound } = usePlaySound(\n    Sound.YOU_WIN\n  );\n  const setSounds = useSetRecoilState(gameSoundState);\n  useEffect(() => {\n    if (loadedSound !== null) {\n      setSounds((sounds) => ({ ...sounds, playYouWinSound }));\n    }\n  }, [loadedSound, playYouWinSound, setSounds]);\n  return null;\n};\n\nexport default YouWinSound;\n","import { useEffect } from \"react\";\nimport { useSetRecoilState } from \"recoil\";\nimport usePlaySound, { Sound } from \"../../hooks/usePlaySound\";\nimport gameSoundState from \"../../recoil/atoms/gameSoundState\";\n\nconst RisingPopSound = () => {\n  const { playSound: playRisingPopSound, loadedSound } = usePlaySound(\n    Sound.RISING_POP\n  );\n  const setSounds = useSetRecoilState(gameSoundState);\n  useEffect(() => {\n    if (loadedSound !== null) {\n      setSounds((sounds) => ({ ...sounds, playRisingPopSound }));\n    }\n  }, [loadedSound, playRisingPopSound, setSounds]);\n  return null;\n};\n\nexport default RisingPopSound;\n","import ReactPlayer from \"react-player/youtube\";\nimport { useRecoilValue } from \"recoil\";\nimport toggleSoundState from \"../../recoil/atoms/toggleSoundState\";\n\nconst YoutubeThemeSong = () => {\n  const { music } = useRecoilValue(toggleSoundState);\n  return (\n    <div className=\"game-theme\">\n      <ReactPlayer\n        url=\"https://www.youtube.com/watch?v=6ZUDiC6TB-k\"\n        playing={music ? true : false}\n        loop\n      />\n    </div>\n  );\n};\n\nexport default YoutubeThemeSong;\n","import { useEffect } from \"react\";\nimport { useSetRecoilState } from \"recoil\";\nimport usePlaySound, { Sound } from \"../../hooks/usePlaySound\";\nimport gameSoundState from \"../../recoil/atoms/gameSoundState\";\n\nconst GlugSound = () => {\n  const { playSound: playGlugSound, loadedSound } = usePlaySound(Sound.GLUG);\n  const setSounds = useSetRecoilState(gameSoundState);\n  useEffect(() => {\n    if (loadedSound !== null) {\n      setSounds((sounds) => ({ ...sounds, playGlugSound }));\n    }\n  }, [loadedSound, setSounds, playGlugSound]);\n  return null;\n};\n\nexport default GlugSound;\n","import { FC } from \"react\";\nimport BiteSound from \"./Sound/BiteSound\";\nimport CompletedGameSound from \"./Sound/CompletedGameSound\";\nimport OpenMenuSound from \"./Sound/OpenMenuSound\";\nimport DisableSound from \"./Sound/DisableSound\";\nimport EnableSound from \"./Sound/EnableSound\";\nimport FanfareSound from \"./Sound/FanfareSound\";\nimport FailedGameSound from \"./Sound/FailedGameSound\";\nimport GameSongSound from \"./Sound/GameSongSound\";\nimport LevelUpSound from \"./Sound/LevelUpSound\";\nimport NearlyEndTimeSound from \"./Sound/NearlyEndTimeSound\";\nimport OffSound from \"./Sound/OffSound\";\nimport OnSound from \"./Sound/OnSound\";\nimport PopDownSound from \"./Sound/PopDownSound\";\nimport PopUpOffSound from \"./Sound/PopUpOffSound\";\nimport PopUpOnSound from \"./Sound/PopUpOnSound\";\nimport YouWinSound from \"./Sound/YouWinSound\";\nimport RisingPopSound from \"./Sound/RisingPopSound\";\nimport YoutubeThemeSong from \"./Sound/YoutubeThemeSong\";\nimport GlugSound from \"./Sound/GlugSound\";\n\nconst SoundProvider: FC = ({ children }) => {\n  return (\n    <>\n      <YoutubeThemeSong />\n      <BiteSound />\n      <CompletedGameSound />\n      <DisableSound />\n      <EnableSound />\n      <FailedGameSound />\n      <FanfareSound />\n      <GameSongSound />\n      <LevelUpSound />\n      <NearlyEndTimeSound />\n      <OffSound />\n      <OnSound />\n      <OpenMenuSound />\n      <PopDownSound />\n      <PopUpOffSound />\n      <PopUpOnSound />\n      <RisingPopSound />\n      <YouWinSound />\n      <GlugSound />\n      {children}\n    </>\n  );\n};\n\nexport default SoundProvider;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { HashRouter as Router } from \"react-router-dom\";\nimport { RecoilRoot } from \"recoil\";\nimport SoundProvider from \"./components/SoundProvider\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <RecoilRoot>\n      <SoundProvider>\n        <Router>\n          <App />\n        </Router>\n      </SoundProvider>\n    </RecoilRoot>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}